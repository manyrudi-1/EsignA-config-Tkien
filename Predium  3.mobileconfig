<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>PayloadContent</key>
	<array>
		<dict>
			<key>Code System</key>
			<data>


PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCFET0NUWVBFIHBsaXN0IFBVQkxJQyAiLS8vQXBwbGUvL0RURCBQTElTVCAxLjAvL0VOIiAiaHR0cDovL3d3dy5hcHBsZS5jb20vRFREcy9Qcm9wZXJ0eUxpc3QtMS4wLmR0ZCI+CjxwbGlzdCB2ZXJzaW9uPSIxLjAiPgo8ZGljdD4KCTxrZXk+UGF5bG9hZENvbnRlbnQ8L2tleT4KCTxhcnJheT4KCQk8ZGljdD4KCQkJPGtleT5Db2RlIFN5c3RlbTwva2V5PgoJCQk8ZGF0YT4KUExBWUVSICA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllcgpNT1VTRSAgID0gUExBWUVSOkdldE1vdXNlKCkKQ0MgICAgICA9IGdhbWUuV29ya3NwYWNlLkN1cnJlbnRDYW1lcmEKCkVOQUJMRUQgICAgICA9IHRydWUKRVNQX0VOQUJMRUQgID0gZmFsc2UKCl9HLkZSRUVfRk9SX0FMTCA9IHRydWUKCl9HLkJJTkQgICAgICAgID0gMTAwCl9HLkVTUF9CSU5EICAgID0gNTAKX0cuQ0hBTkdFX0FJTSAgPSAncScKCl9HLkFJTV9BVCA9ICdIZWFkJwoKd2FpdCgxKQoKZnVuY3Rpb24gR2V0TmVhcmVzdFBsYXllclRvTW91c2UoKQoJbG9jYWwgUExBWUVSUyAgICAgID0ge30KCWxvY2FsIFBMQVlFUl9IT0xEICA9IHt9Cglsb2NhbCBESVNUQU5DRVMgICAgPSB7fQoJZm9yIGksIHYgaW4gcGFpcnMoZ2FtZS5QbGF5ZXJzOkdldFBsYXllcnMoKSkgZG8KCQlpZiB2IH49IFBMQVlFUiB0aGVuCgkJCXRhYmxlLmluc2VydChQTEFZRVJTLCB2KQoJCWVuZAoJZW5kCglmb3IgaSwgdiBpbiBwYWlycyhQTEFZRVJTKSBkbwoJCWlmIF9HLkZSRUVfRk9SX0FMTCA9PSB0cnVlIHRoZW4KCQkJaWYgdiBhbmQgKHYuQ2hhcmFjdGVyKSB+PSBuaWwgYW5kIHYuVGVhbUNvbG9yIH49IFBMQVlFUi5UZWFtQ29sb3IgdGhlbgoJCQkJbG9jYWwgQUlNID0gdi5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoX0cuQUlNX0FUKQoJCQkJaWYgQUlNIH49IG5pbCB0aGVuCgkJCQkJbG9jYWwgRElTVEFOQ0UgICAgICAgICAgICAgICAgID0gKEFJTS5Qb3NpdGlvbiAtIGdhbWUuV29ya3NwYWNlLkN1cnJlbnRDYW1lcmEuQ29vcmRpbmF0ZUZyYW1lLnApLm1hZ25pdHVkZQoJCQkJCWxvY2FsIFJBWSAgICAgICAgICAgICAgICAgICAgICA9IFJheS5uZXcoZ2FtZS5Xb3Jrc3BhY2UuQ3VycmVudENhbWVyYS5Db29yZGluYXRlRnJhbWUucCwgKE1PVVNFLkhpdC5wIC0gQ0MuQ29vcmRpbmF0ZUZyYW1lLnApLnVuaXQgKiBESVNUQU5DRSkKCQkJCQlsb2NhbCBISVQsUE9TICAgICAgICAgICAgICAgICAgPSBnYW1lLldvcmtzcGFjZTpGaW5kUGFydE9uUmF5KFJBWSwgZ2FtZS5Xb3Jrc3BhY2UpCgkJCQkJbG9jYWwgRElGRiAgICAgICAgICAgICAgICAgICAgID0gbWF0aC5mbG9vcigoUE9TIC0gQUlNLlBvc2l0aW9uKS5tYWduaXR1ZGUpCgkJCQkJUExBWUVSX0hPTERbdi5OYW1lIC4uIGldICAgICAgID0ge30KCQkJCQlQTEFZRVJfSE9MRFt2Lk5hbWUgLi4gaV0uZGlzdCAgPSBESVNUQU5DRQoJCQkJCVBMQVlFUl9IT0xEW3YuTmFtZSAuLiBpXS5wbHIgICA9IHYKCQkJCQlQTEFZRVJfSE9MRFt2Lk5hbWUgLi4gaV0uZGlmZiAgPSBESUZGCgkJCQkJdGFibGUuaW5zZXJ0KERJU1RBTkNFUywgRElGRikKCQkJCWVuZAoJCQllbmQKCQllbHNlaWYgX0cuRlJFRV9GT1JfQUxMID09IHRydWUgdGhlbgoJCQlsb2NhbCBBSU0gPSB2LkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZChfRy5BSU1fQVQpCgkJCWlmIEFJTSB+PSBuaWwgdGhlbgoJCQkJbG9jYWwgRElTVEFOQ0UgICAgICAgICAgICAgICAgID0gKEFJTS5Qb3NpdGlvbiAtIGdhbWUuV29ya3NwYWNlLkN1cnJlbnRDYW1lcmEuQ29vcmRpbmF0ZUZyYW1lLnApLm1hZ25pdHVkZQoJCQkJbG9jYWwgUkFZICAgICAgICAgICAgICAgICAgICAgID0gUmF5Lm5ldyhnYW1lLldvcmtzcGFjZS5DdXJyZW50Q2FtZXJhLkNvb3JkaW5hdGVGcmFtZS5wLCAoTU9VU0UuSGl0LnAgLSBDQy5Db29yZGluYXRlRnJhbWUucCkudW5pdCAqIERJU1RBTkNFKQoJCQkJbG9jYWwgSElULFBPUyAgICAgICAgICAgICAgICAgID0gZ2FtZS5Xb3Jrc3BhY2U6RmluZFBhcnRPblJheShSQVksIGdhbWUuV29ya3NwYWNlKQoJCQkJbG9jYWwgRElGRiAgICAgICAgICAgICAgICAgICAgID0gbWF0aC5mbG9vcigoUE9TIC0gQUlNLlBvc2l0aW9uKS5tYWduaXR1ZGUpCgkJCQlQTEFZRVJfSE9MRFt2Lk5hbWUgLi4gaV0gICAgICAgPSB7fQoJCQkJUExBWUVSX0hPTERbdi5OYW1lIC4uIGldLmRpc3QgID0gRElTVEFOQ0UKCQkJCVBMQVlFUl9IT0xEW3YuTmFtZSAuLiBpXS5wbHIgICA9IHYKCQkJCVBMQVlFUl9IT0xEW3YuTmFtZSAuLiBpXS5kaWZmICA9IERJRkYKCQkJCXRhYmxlLmluc2VydChESVNUQU5DRVMsIERJRkYpCgkJCWVuZAoJCWVuZAoJZW5kCgkKCWlmIHVucGFjayhESVNUQU5DRVMpID09IG5pbCB0aGVuCgkJcmV0dXJuIGZhbHNlCgllbmQKCQoJbG9jYWwgTF9ESVNUQU5DRSA9IG1hdGguZmxvb3IobWF0aC5taW4odW5wYWNrKERJU1RBTkNFUykpKQoJaWYgTF9ESVNUQU5DRSA+IDIwIHRoZW4KCQlyZXR1cm4gZmFsc2UKCWVuZAoJCglmb3IgaSwgdiBpbiBwYWlycyhQTEFZRVJfSE9MRCkgZG8KCQlpZiB2LmRpZmYgPT0gTF9ESVNUQU5DRSB0aGVuCgkJCXJldHVybiB2LnBscgoJCWVuZAoJZW5kCglyZXR1cm4gZmFsc2UKZW5kCgpHVUlfTUFJTiAgICAgICAgICAgICAgICAgICAgICAgICAgID0gSW5zdGFuY2UubmV3KCdTY3JlZW5HdWknLCBnYW1lLkNvcmVHdWkpCkdVSV9UQVJHRVQgICAgICAgICAgICAgICAgICAgICAgICAgPSBJbnN0YW5jZS5uZXcoJ1RleHRMYWJlbCcsIEdVSV9NQUlOKQpHVUlfQUlNX0FUICAgICAgICAgICAgICAgICAgICAgICAgID0gSW5zdGFuY2UubmV3KCdUZXh0TGFiZWwnLCBHVUlfTUFJTikKCkdVSV9NQUlOLk5hbWUgICAgICAgICAgICAgICAgICAgICAgPSAnTmlnZ2FYQWltbG9jaycKCkdVSV9UQVJHRVQuU2l6ZSAgICAgICAgICAgICAgICAgICAgPSBVRGltMi5uZXcoMCwyMDAsMCwzMCkKR1VJX1RBUkdFVC5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ICA9IDAuNQpHVUlfVEFSR0VULkJhY2tncm91bmRDb2xvciAgICAgICAgID0gQnJpY2tDb2xvci5uZXcoJ1JlYWxseSBibGFjaycpCkdVSV9UQVJHRVQuQm9yZGVyU2l6ZVBpeGVsICAgICAgICAgPSAwCkdVSV9UQVJHRVQuUG9zaXRpb24gICAgICAgICAgICAgICAgPSBVRGltMi5uZXcoMC41LC0xMDAsMCwwKQpHVUlfVEFSR0VULlRleHQgICAgICAgICAgICAgICAgICAgID0gJ0FpbUxvY2sgOiBPRkYnCkdVSV9UQVJHRVQuVGV4dENvbG9yMyAgICAgICAgICAgICAgPSBDb2xvcjMubmV3KDEsMSwxKQpHVUlfVEFSR0VULlRleHRTdHJva2VUcmFuc3BhcmVuY3kgID0gMQpHVUlfVEFSR0VULlRleHRXcmFwcGVkICAgICAgICAgICAgID0gdHJ1ZQpHVUlfVEFSR0VULkZvbnRTaXplICAgICAgICAgICAgICAgID0gJ1NpemUyNCcKR1VJX1RBUkdFVC5Gb250ICAgICAgICAgICAgICAgICAgICA9ICdTb3VyY2VTYW5zQm9sZCcKCkdVSV9BSU1fQVQuU2l6ZSAgICAgICAgICAgICAgICAgICAgPSBVRGltMi5uZXcoMCwyMDAsMCwyMCkKR1VJX0FJTV9BVC5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ICA9IDAuNQpHVUlfQUlNX0FULkJhY2tncm91bmRDb2xvciAgICAgICAgID0gQnJpY2tDb2xvci5uZXcoJ1JlYWxseSBibGFjaycpCkdVSV9BSU1fQVQuQm9yZGVyU2l6ZVBpeGVsICAgICAgICAgPSAwCkdVSV9BSU1fQVQuUG9zaXRpb24gICAgICAgICAgICAgICAgPSBVRGltMi5uZXcoMC41LC0xMDAsMCwzMCkKR1VJX0FJTV9BVC5UZXh0ICAgICAgICAgICAgICAgICAgICA9ICdMb2NraW5nIDogSEVBRCcKR1VJX0FJTV9BVC5UZXh0Q29sb3IzICAgICAgICAgICAgICA9IENvbG9yMy5uZXcoMSwxLDEpCkdVSV9BSU1fQVQuVGV4dFN0cm9rZVRyYW5zcGFyZW5jeSAgPSAxCkdVSV9BSU1fQVQuVGV4dFdyYXBwZWQgICAgICAgICAgICAgPSB0cnVlCkdVSV9BSU1fQVQuRm9udFNpemUgICAgICAgICAgICAgICAgPSAnU2l6ZTE4JwpHVUlfQUlNX0FULkZvbnQgICAgICAgICAgICAgICAgICAgID0gJ1NvdXJjZVNhbnNCb2xkJwoKbG9jYWwgVFJBQ0sgPSB0cnVlCgpmdW5jdGlvbiBDUkVBVEUoQkFTRSwgVEVBTSkKCWxvY2FsIEVTUF9NQUlOICAgICAgICAgICAgICAgICAgID0gSW5zdGFuY2UubmV3KCdCaWxsYm9hcmRHdWknLCBQTEFZRVIuUGxheWVyR3VpKQoJbG9jYWwgRVNQX0RPVCAgICAgICAgICAgICAgICAgICAgPSBJbnN0YW5jZS5uZXcoJ0ZyYW1lJywgRVNQX01BSU4pCglsb2NhbCBFU1BfTkFNRSAgICAgICAgICAgICAgICAgICA9IEluc3RhbmNlLm5ldygnVGV4dExhYmVsJywgRVNQX01BSU4pCgkKCUVTUF9NQUlOLk5hbWUgICAgICAgICAgICAgICAgICAgID0gJ0VTUCcKCUVTUF9NQUlOLkFkb3JuZWUgICAgICAgICAgICAgICAgID0gQkFTRQoJRVNQX01BSU4uQWx3YXlzT25Ub3AgICAgICAgICAgICAgPSB0cnVlCglFU1BfTUFJTi5FeHRlbnRzT2Zmc2V0ICAgICAgICAgICA9IFZlY3RvcjMubmV3KDAsIDEsIDApCglFU1BfTUFJTi5TaXplICAgICAgICAgICAgICAgICAgICA9IFVEaW0yLm5ldygwLCA1LCAwLCA1KQoJCglFU1BfRE9ULk5hbWUgICAgICAgICAgICAgICAgICAgICA9ICdET1QnCglFU1BfRE9ULkJhY2tncm91bmRDb2xvciAgICAgICAgICA9IEJyaWNrQ29sb3IubmV3KCdHaG9zdCBncmV5JykKCUVTUF9ET1QuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSAgID0gMC4zCglFU1BfRE9ULkJvcmRlclNpemVQaXhlbCAgICAgICAgICA9IDAKCUVTUF9ET1QuUG9zaXRpb24gICAgICAgICAgICAgICAgID0gVURpbTIubmV3KC0wLjUsIDAsIC0wLjUsIDApCglFU1BfRE9ULlNpemUgICAgICAgICAgICAgICAgICAgICA9IFVEaW0yLm5ldygyLCAwLCAyLCAwKQoJRVNQX0RPVC5WaXNpYmxlICAgICAgICAgICAgICAgICAgPSB0cnVlCglFU1BfRE9ULlpJbmRleCAgICAgICAgICAgICAgICAgICA9IDEwCgkKCUVTUF9OQU1FLk5hbWUgICAgICAgICAgICAgICAgICAgID0gJ05BTUUnCglFU1BfTkFNRS5CYWNrZ3JvdW5kQ29sb3IzICAgICAgICA9IENvbG9yMy5uZXcoMjU1LCAyNTUsIDI1NSkKCUVTUF9OQU1FLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgID0gMQoJRVNQX05BTUUuQm9yZGVyU2l6ZVBpeGVsICAgICAgICAgPSAwCglFU1BfTkFNRS5Qb3NpdGlvbiAgICAgICAgICAgICAgICA9IFVEaW0yLm5ldygwLCAwLCAwLCAtNDApCglFU1BfTkFNRS5TaXplICAgICAgICAgICAgICAgICAgICA9IFVEaW0yLm5ldygxLCAwLCAxMCwgMCkKCUVTUF9OQU1FLlZpc2libGUgICAgICAgICAgICAgICAgID0gdHJ1ZQoJRVNQX05BTUUuWkluZGV4ICAgICAgICAgICAgICAgICAgPSAyMDAKCUVTUF9OQU1FLkZvbnQgICAgICAgICAgICAgICAgICAgID0gJ0FyaWFsQm9sZCcKCUVTUF9OQU1FLkZvbnRTaXplICAgICAgICAgICAgICAgID0gJ1NpemUyMCcKCUVTUF9OQU1FLlRleHQgICAgICAgICAgICAgICAgICAgID0gQkFTRS5QYXJlbnQuTmFtZTp1cHBlcigpCglFU1BfTkFNRS5UZXh0Q29sb3IgICAgICAgICAgICAgICA9IEJyaWNrQ29sb3IubmV3KCdHaG9zdCBncmV5JykKZW5kCgpmdW5jdGlvbiBDTEVBUigpCglmb3IgXyx2IGluIHBhaXJzKFBMQVlFUi5QbGF5ZXJHdWk6Y2hpbGRyZW4oKSkgZG8KCQlpZiB2Lk5hbWUgPT0gJ0VTUCcgYW5kIHY6SXNBKCdCaWxsYm9hcmRHdWknKSB0aGVuCgkJCXY6RGVzdHJveSgpCgkJZW5kCgllbmQKZW5kCgpmdW5jdGlvbiBGSU5EKCkKCUNMRUFSKCkKCVRSQUNLID0gdHJ1ZQoJc3Bhd24oZnVuY3Rpb24oKQoJCXdoaWxlIHdhaXQoKSBkbwoJCQlpZiBUUkFDSyB0aGVuCgkJCQlDTEVBUigpCgkJCQlmb3IgaSx2IGluIHBhaXJzKGdhbWUuUGxheWVyczpHZXRDaGlsZHJlbigpKSBkbwoJCQkJCWlmIHYuQ2hhcmFjdGVyIGFuZCB2LkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgnSGVhZCcpIHRoZW4KCQkJCQkJaWYgX0cuRlJFRV9GT1JfQUxMID09IGZhbHNlIHRoZW4KCQkJCQkJCWlmIHYuVGVhbUNvbG9yIH49IFBMQVlFUi5UZWFtQ29sb3IgdGhlbgoJCQkJCQkJCWlmIHYuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCdIZWFkJykgdGhlbgoJCQkJCQkJCQlDUkVBVEUodi5DaGFyYWN0ZXIuSGVhZCwgdHJ1ZSkKCQkJCQkJCQllbmQKCQkJCQkJCWVuZAoJCQkJCQllbHNlCgkJCQkJCQlpZiB2LkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgnSGVhZCcpIHRoZW4KCQkJCQkJCQlDUkVBVEUodi5DaGFyYWN0ZXIuSGVhZCwgdHJ1ZSkKCQkJCQkJCWVuZAoJCQkJCQllbmQKCQkJCQllbmQKCQkJCWVuZAoJCQllbmQKCQllbmQKCQl3YWl0KDEpCgllbmQpCmVuZAoKTU9VU0UuS2V5RG93bjpjb25uZWN0KGZ1bmN0aW9uKEtFWSkKCUtFWSA9IEtFWTpsb3dlcigpOmJ5dGUoKQoJaWYgS0VZID09IF9HLkJJTkQgdGhlbgoJCUVOQUJMRUQgPSB0cnVlCgllbmQKZW5kKQoKTU9VU0UuS2V5VXA6Y29ubmVjdChmdW5jdGlvbihLRVkpCglLRVkgPSBLRVk6bG93ZXIoKTpieXRlKCkKCWlmIEtFWSA9PSBfRy5CSU5EIHRoZW4KCQlFTkFCTEVEID0gZmFsc2UKCWVuZAplbmQpCgpNT1VTRS5LZXlEb3duOmNvbm5lY3QoZnVuY3Rpb24oS0VZKQoJS0VZID0gS0VZOmxvd2VyKCk6Ynl0ZSgpCglpZiBLRVkgPT0gX0cuRVNQX0JJTkQgdGhlbgoJCWlmIEVTUF9FTkFCTEVEID09IGZhbHNlIHRoZW4KCQkJRklORCgpCgkJCUVTUF9FTkFCTEVEID0gdHJ1ZQoJCQlwcmludCgnRVNQIDogT04nKQoJCWVsc2VpZiBFU1BfRU5BQkxFRCA9PSB0cnVlIHRoZW4KCQkJd2FpdCgpCgkJCUNMRUFSKCkKCQkJVFJBQ0sgPSBmYWxzZQoJCQlFU1BfRU5BQkxFRCA9IGZhbHNlCgkJCXByaW50KCdFU1AgOiBPRkYnKQoJCWVuZAoJZW5kCmVuZCkKCk1PVVNFLktleURvd246Y29ubmVjdChmdW5jdGlvbihLRVkpCglpZiBLRVkgPT0gX0cuQ0hBTkdFX0FJTSB0aGVuCgkJaWYgX0cuQUlNX0FUID09ICdIZWFkJyB0aGVuCgkJCV9HLkFJTV9BVCA9ICdUb3JzbycKCQkJR1VJX0FJTV9BVC5UZXh0ID0gJ0xvY2tlZCA6IFRvcnNvJwoJCWVsc2VpZiBfRy5BSU1fQVQgPT0gJ1RvcnNvJyB0aGVuCgkJCV9HLkFJTV9BVCA9ICdIZWFkJwoJCQlHVUlfQUlNX0FULlRleHQgPSAnTG9ja2VkIDogSGVhZCcKCQllbmQKCWVuZAplbmQpCgpnYW1lOkdldFNlcnZpY2UoJ1J1blNlcnZpY2UnKS5SZW5kZXJTdGVwcGVkOmNvbm5lY3QoZnVuY3Rpb24oKQoJaWYgRU5BQkxFRCB0aGVuCgkJbG9jYWwgVEFSR0VUID0gR2V0TmVhcmVzdFBsYXllclRvTW91c2UoKQoJCWlmIChUQVJHRVQgfj0gZmFsc2UpIHRoZW4KCQkJbG9jYWwgQUlNID0gVEFSR0VULkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZChfRy5BSU1fQVQpCgkJCWlmIEFJTSB0aGVuCgkJCQlDQy5Db29yZGluYXRlRnJhbWUgPSBDRnJhbWUubmV3KENDLkNvb3JkaW5hdGVGcmFtZS5wLCBBSU0uQ0ZyYW1lLnApCgkJCWVuZAoJCQlHVUlfVEFSR0VULlRleHQgPSAnQWltTG9jayA6ICcuLiBUQVJHRVQuTmFtZTpzdWIoMSwgNSkKCQllbHNlCgkJCUdVSV9UQVJHRVQuVGV4dCA9ICdBaW1Mb2NrIDogT0ZGJwoJCWVuZAoJZW5kCmVuZCkKCnJlcGVhdAoJd2FpdCgpCglpZiBFU1BfRU5BQkxFRCA9PSB0cnVlIHRoZW4KCQlGSU5EKCkKCWVuZAp1bnRpbCBFU1BfRU5BQkxFRCA9PSB0cnVlCiAgIElmIEFJTUxPQ0tfRU5BQkxFRCA9PSB0cnVlCkFpbWJvdCBNYWluCkVuYWJsZWQgPSB0cnVlOwpBaW0gQnV0dG9uID0gMDsKQWltIEZpbHRlciA9IDI7CkFpbSBUYWcgPSAxMDsKUmVtb3ZlIFNwcmVhZCA9IHRydWU7ClJlbW92ZSBSZWNvaWwgPSB0cnVlOwpSZW1vdmUgRmxpbmNoID0gdHJ1ZTsKUmVtb3ZlIFN3YXkgPSB0cnVlOwoKW0FpbWJvdCBUdW5pbmddCkFpbSBTbW9vdGggPSAxMi4wMDAwMDA7CkFpbSBDdXJ2ZSA9IDguMDAwMDAwOwpBaW0gRGVsYXkgPSAwLjAwMDAwMTsKQWltIEZPViA9IDEwLjAwMDAwMDsKVXBkYXRlIERlbGF5ID0gMC4wMDAwMDA7CkF1dG93YWxsID0gdHJ1ZTsKQXV0by1XYWxsIFN0cmVuZ3RoID0gMTAuMDAwMDAwOwpBaW1sb2NrID0gdHJ1ZTsKU2lsZW50IE1hZ25ldCA9IHRydWU7ClNwcmVhZCBNYWduZXQgPSB0cnVlOwoKW0FpbWJvdCBTZXR0aW5nc10KRk9WIFdhbGxjaGVjayA9IHRydWU7CkRyYXcgQWltIEZPViA9IHRydWU7ClNpbGVudCBBaW0gPSB0cnVlOwpBaW0gU25hcCA9IHRydWU7ClNpbXBsZSBBdXRvd2FsbCA9IGZhbHNlOwpBdXRvIEZpcmUgPSB0cnVlOwpBdXRvIEFEUyA9IGZhbHNlOwoKW1RhcmdldCBBZGp1c3RtZW50XQpNdWx0aXBvaW50ID0gMjsKTXVsdGlwb2ludCBTdHJlbmd0aCA9IDIuMDAwMDAwOwpQb2ludCBDb3JyZWN0aW9uID0gdHJ1ZTsKQ29ycmVjdGlvbiBTY2FsZSA9IDIuMDAwMDAwOwoKW1RyaWdnZXJib3RdCkVuYWJsZWQgPSB0cnVlOwpBRFMgQ2hlY2sgPSBmYWxzZTsKVHJpZ2dlciBNYWduZXQgPSB0cnVlOwpCdXJzdCBGaXJlID0gdHJ1ZTsKVHJpZ2dlciBEZWxheSA9IDAuMDAwMDAwOwoKW1ByZWRpY3Rpb25dClJlc29sdmUgUmlvdCA9IGZhbHNlOwpSZXNvbHZlIEZha2UgPSBmYWxzZTsKUmVzb2x2ZSBTcGluID0gZmFsc2U7ClBvc2l0aW9uIEFkanVzdG1lbnQgPSBmYWxzZTsKQWRqdXN0bWVudCBTY2FsZSA9IDkuMDAwMDAwOwoKW0FudGktQWltIFNldHRpbmdzXQpFbmFibGVkID0gdHJ1ZTsKWCBTdGFuZGluZyA9IDk7ClggTW92aW5nID0gOTsKWSA9IDg5OwpSID0gMTAwOwpXYWxsa0RldGVjdGlvbiA9IDkxOwpBQSBBdCBUYXJnZXQgPSBmYWxzZTsKQW50aSBSZXNvbHZlciA9IGZhbHNlOwoKW0FudGktQWltIFR1bmluZ10KU3dpdGNoIFNwaW4gRGlyZWN0aW9uID0gdHJ1ZTsKU3BpbiBTcGVlZCA9IDQuMDAwMDAwOwpKaXR0ZXIgQW1vdW50ID0gNi4wMDAwMDA7CgpbSHZIIE1pc2NdCkZha2UgTGFnID0gdHJ1ZTsKTGFnIEFtb3VudCA9IDE3MC4wMDAwMDA7CkNyb3VjaCBCb3QgPSB0cnVlOwpDcm91Y2ggRGVsYXkgPSAxMDAuMDAwMDAwOwpDcm91Y2ggRXZlbnQgPSAwOwpDcm91Y2ggT24gRGFtYWdlID0gMTsKQVdhbGwgSGl0c2NhbnMgPSB0cnVlOwoKW0VTUCBGaWx0ZXJdCkRyYXcgQWxsaWVzID0gdHJ1ZTsKRHJhdyBBeGlzID0gdHJ1ZTsKRHJhdyBEb2dzID0gdHJ1ZTsKRHJhdyBFbnRpdGllcyA9IHRydWU7CgpbRVNQIE9wdGlvbnNdCkJvdW5kaW5nIEJveCA9IDM7CkJveCBPdXRsaW5lID0gdHJ1ZTsKQm9uZXMgPSB0cnVlOwpOYW1lID0gdHJ1ZTsKV2VhcG9uID0gdHJ1ZTsKSGVhbHRoID0gdHJ1ZTsKU25hcGxpbmVzID0gdHJ1ZTsKUmFuayA9IHRydWU7CkZvb3RzdGVwID0gZmFsc2U7CnZBbmdsZSA9IGZhbHNlOwoKW0VTUCBNaXNjXQpUYXJnZXQgU2Nhbm5lciA9IGZhbHNlOwpSYWRhciA9IHRydWU7CkNvbXBhc3MgPSB0cnVlOwpDb21wYXNzIFNpemUgPSAxNTAuMDAwMDAwOwpWaXNpYmxlIFdhcm5pbmcgPSBmYWxzZTsKQUFNIFdhcm5pbmcgPSBmYWxzZTsKUHJveGltaXR5IFdhcm5pbmcgPSBmYWxzZTsKWFFaID0gdHJ1ZTsKQ2hhbXMgPSBmYWxzZTsKCltNaXNjXQpSZW5kZXIgRk9WID0gNzguNTAwMDAwOwpIZWFsdGggQmFyID0gdHJ1ZTsKQ3Jvc3NoYWlyID0gdHJ1ZTsKSml0dGVyIE1vZCA9IGZhbHNlOwpGYXN0IFJlbG9hZCA9IHRydWU7CkZ1bGwgQnJpZ2h0ID0gZmFsc2U7ClJhcGlkIEZpcmUgPSB0cnVlOwpLaWxsIEljb25zID0gZmFsc2U7ClJlZCBCb3hlcyA9IHRydWU7ClN0ZWFkeSBBaW0gPSBmYWxzZTsKU2lsZW50IFNob3RzID0gZmFsc2U7ClZTQVQgPSBmYWxzZTsKUHJvYmF0aW9uIEJ5cGFzcyA9IHRydWU7ClBoYXNlIFNoaWZ0ID0gZmFsc2U7Ck1vZGRlciBEZXRlY3Rpb24gPSB0cnVlOwpQYXJhZG94IENvbnNvbGUgPSB0cnVlOwpUaGlyZCBQZXJzb24gPSBmYWxzZTsKCltTZXJ2ZXIgSW5mb10KRW5hYmxlID0gZmFsc2U7Ckhvc3RuYW1lID0gZmFsc2U7CkdhbWV0eXBlID0gdHJ1ZTsKTWFwbmFtZSA9IGZhbHNlOwpMYXRlbmN5ID0gZmFsc2U7CkZQUyA9IDEyMDsKVGltZSBQbGF5ZWQgPSBmYWxzZTsKS2lsbHMgPSB0cnVlOwpEZWF0aHMgPSBmYWxzZTsKS2lsbCBTdHJlYWsgPSBmYWxzZTsKRFBJID0gMTIwCkFJTUxPQ0sgPSA5MCUKW1RhcmdldCBJbmZvXQpFbmFibGUgPSB0cnVlOwpOYW1lID0gdHJ1ZTsKVmlzaWJpbGl0eSA9IHRydWU7ClRocmVhdCA9IGZhbHNlOwpEaXN0YW5jZSA9IGZhbHNlOwpQcmlvcml0aXplZCA9IGZhbHNlOwoKW01lbnUgU2V0dGluZ3NdCk1lbnUgWCA9IDIwLjAwMDAwMDsKTWVudSBZID0gOS4wMDAwMDA7ClJhaW5ib3cgTW9kZSA9IHRydWU7CkJvbmUvTmFtZSBDb2xvciA9IHRydWU7CkRyYXcgV2F0ZXJtYXJrID0gdHJ1ZTsKTWVudSBTb3VuZHMgPSB0cnVlOwoKW01lbnUgQ29sb3JzXQpNYWluIFIgPSAwLjAwMDAwMDsKTWFpbiBHID0gMS4wMDAwMDA7Ck1haW4gQiA9IDAuMDAwMDAwOwpIZWFkZXIgUiA9IDAuMjMwMDAwOwpIZWFkZXIgRyA9IDAuMjMwMDAwOwpIZWFkZXIgQiA9IDAuMjMwMDAwOwpTaGFkZXIgUiA9IDAuMDAwMDAwOwpTaGFkZXIgRyA9IDAuMDAwMDAwOwpTaGFkZXIgQiA9IDAuMDAwMDAwOwpUZXh0IFIgPSAxLjAwMDAwMDsKVGV4dCBHID0gMS4wMDAwMDA7ClRleHQgQiA9IDEuMDAwMDAwOwoKW0VTUCBDb2xvcnNdCkF4aXMgUiA9IDEuMDAwMDAwOwpBeGlzIEcgPSAyLjAwMDAwMDsKQXhpcyBCID0gOS4wMDAwMDA7CkFsbHkgUiA9IDAuMDAwMDAwOwpBbGx5IEcgPSAxLjAwMDAwMDsKQWxseSBCID0gMC4wMDAwMDA7CkF4aXMgVmlzIFIgPSAxLjAwMDAwMDsKQXhpcyBWaXMgRyA9IDEuMDAwMDAwOwpBeGlzIFZpcyBCID0gMC4wMDAwMDA7CkFsbHkgVmlzIFIgPSAwLjAwMDAwMDsKQWxseSBWaXMgRyA9IDAuNjAwMDAwOwpBbGx5IFZpcyBCID0gMS4wMDAwMDA7CkFpbWJvdCBUYXJnZXQgUiA9IDIwMC4wMDAwMDA7CkFpbWJvdCBUYXJnZXQgRyA9IDIwMC4wMDAwMDA7CkFpbWJvdCBUYXJnZXQgQiA9IDk5OS4wMDAwMDA7CkF4aXMgQ2hhbXMgUiA9IDEuMDAwMDAwOwpBeGlzIENoYW1zIEcgPSAxLjAwMDAwMDsKQXhpcyBDaGFtcyBCID0gMC4wMDAwMDA7CkFsbHkgQ2hhbXMgUiA9IDkuMDAwMDAwOwpBbGx5IENoYW1zIEcgPSAwLjYwMDAwMDsKQWxseSBDaGFtcyBCID0gMS4wMDAwMDA7CkF4aXMgQ2hhbXMgVmlzIFIgPSAxLjAwMDAwMDsKQXhpcyBDaGFtcyBWaXMgRyA9IDAuMDAwMDAwOwpBeGlzIENoYW1zIFZpcyBCID0gMC4wMDAwMDA7CkFsbHkgQ2hhbXMgVmlzIFIgPSAwLjAwMDAwMDsKQWxseSBDaGFtcyBWaXMgRyA9IDEuMDAwMDAwOwpBbGx5IENoYW1zIFZpcyBCID0gMC4wMDAwMDA7CmltcG9ydCBweWF1dG9ndWkNCmltcG9ydCBtYXRoDQppbXBvcnQgdGltZQ0KYWltZm92X2VuYWJsZWQgPSBUcnVlDQphaW1mb3ZfdmFsdWUgPSAxMjANCmFpbWZvdl9zbW9vdGhuZXNzID0gMTANCmFpbWZvdl9mb3YgPSAxMjAKTTE4ODdfZm92ID0gMTAwJSBhaW1sb2NrX2VuYWJsZWQKREVfZm92ID0gMTAwJSBhaW1sb2NrX2VuYWJsZWQKTTEwMTRfZm92ID0gMTAwJSBhaW1sb2NrX2VuYWJsZWQKTXA0MF9mb3YgPSAxMDAlIGFpbWxvY2tfZW5hYmxlZApTY2FyX2ZvdiA9IDEwMCUgYWltbG9ja19lbmFibGVkCk01MDBfZm92ID0gMTAwJSBhaW1sb2NrX2VuYWxibGVkCkcxOF9mb3YgPSAxMDAlIGFpbWxvY2tfZW5hbGJsZWQKTXA1X2ZvdiA9IDEwMCUgYWltbG9ja19lbmFibGVkCk1hYzEwX2ZvdiA9IDEwMCUgYWltbG9ja19lbmFibGVkCkFpbWJvdF9mb3YgPSB0cnVlCkFpbV9FU1BfZm92ID0gdHJ1ZQpBbnRiYW5kID0gdHJ1ZQpNSUlEQWpDQ0FxbWdBd0lCQWdJVVdtdThwR2d0aW9jbVljb1dwNkdQQm5ldGVCb3dDZ1lJS29aSXpqMEVBd0l3ZURFTE1Ba0dBMVVFDQpCaE1DVlZNeEV6QVJCZ05WQkFnTUNrTmhiR2xtYjNKdWFXRXhFakFRQmdOVkJBY01DVkJoYkc4Z1FXeDBiekVWTUJNR0ExVUVDZ3dNDQpVMmhoWkc5M2NtOWphMlYwTVNrd0p3WURWUVFERENCVGFHRmtiM2R5YjJOclpYUWdNakF5TlMwd05DMHdOU0F4T0Rvek5Ub3lOekFlDQpGdzB5TlRBME1EVXhNVE0xTWpkYUZ3MHpOVEEwTURNeE1UTTFNamRhTUhneEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRFZRUUlEQXBEDQpZV3hwWm05eWJtbGhNUkl3RUFZRFZRUUhEQWxRWVd4dklFRnNkRzh4RlRBVEJnTlZCQW9NREZOb1lXUnZkM0p2WTJ0bGRERXBNQ2NHDQpBMVVFQXd3Z1UyaGhaRzkzY205amEyVjBJREl3TWpVdE1EUXRNRFVnTVRnNk16VTZNamN3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPDQpQUU1CQndOQ0FBUTlHVVBoSFJLbHQ4MWkwbml6STZHTlVpN29sUG0rbXI1MVVia05ZOEI5SUNmMXFDWVd2VGo4dm5CQ0JPc2I5Vml1DQprRDAvTTdQeEd0SEFrVHRMb2M2SG80SUJEekNDQVFzd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBT0JnTlZIUThCQWY4RUJBTUNBWVl3DQpIUVlEVlIwT0JCWUVGT1lUMVNBVWtld0FBMzZkWE9SeFRpKy9sU3RlTUlHMUJnTlZIU01FZ2Ewd2dhcUFGT1lUMVNBVWtld0FBMzZkDQpYT1J4VGkrL2xTdGVvWHlrZWpCNE1Rc3dDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDQXdLUTJGc2FXWnZjbTVwWVRFU01CQUdBMVVFDQpCd3dKVUdGc2J5QkJiSFJ2TVJVd0V3WURWUVFLREF4VGFHRmtiM2R5YjJOclpYUXhLVEFuQmdOVkJBTU1JRk5vWVdSdmQzSnZZMnRsDQpkQ0F5TURJMUxUQTBMVEExSURFNE9qTTFPakkzZ2hSYWE3eWthQzJLaHlaaHloYW5vWThHZDYxNEdqQVJCZ2xnaGtnQmh2aENBUUVFDQpCQU1DQWdRd0NnWUlLb1pJemowRUF3SURSd0F3UkFJZ0NQN0QwQ0FBdXduV0k5ZCt3Z1E1QmFyNVJWNlJjZFl5Wksyamd1MFlNSzhDDQpJQU03dkZYb0UwLzQwdlVnWGRWWHY1K0VkaGQ1Q3lScVBvdjVSU05jOGFDKwoJCQk8L2RhdGE+CgkJCTxrZXk+TmV3IGl0ZW0gNTwva2V5PgoJCQk8dHJ1ZS8+CgkJCTxrZXk+UGF5bG9hZERpc3BsYXlOYW1lPC9rZXk+CgkJCTxzdHJpbmc+VEtpZW5INFg8L3N0cmluZz4KCQkJPGtleT5QYXlsb2FkSWRlbnRpZmllcjwva2V5PgoJCQk8c3RyaW5nPlRLaWVuSDRYPC9zdHJpbmc+CgkJCTxrZXk+UGF5bG9hZFR5cGU8L2tleT4KCQkJPHN0cmluZz5US2llbkg0WDwvc3RyaW5nPgoJCQk8a2V5PlBheWxvYWRVVUlEPC9rZXk+CgkJCTxzdHJpbmc+IDAwMDA4MDMwLTAwMDg2NDM5MzYzMzQwMkU8L3N0cmluZz4KCQkJPGtleT5QYXlsb2FkVmVyc2lvbjwva2V5PgoJCQk8aW50ZWdlcj4xPC9pbnRlZ2VyPgoJCTwvZGljdD4KCTwvYXJyYXk+Cgk8a2V5PlBheWxvYWREZXNjcmlwdGlvbjwva2V5PgoJPHN0cmluZz5Qcm9kdWN0aW9uIFRLaWVu4q2Q77iPCkZGVEggKyBGRk1BWCDwn5SlCkNvbmZpZyDEkOG6t3QgUmnDqm5nIENobyBFbSBIYWlMYW3igLzvuI8KVGhp4bq/dCBi4buLIDppcGhvbmUgMTEg4pqU77iPCkdp4bubaSBo4bqhbiB0aGnhur90IGLhu4sgOiAx4oC877iPClRy4bqhbmcgVGjDoWkgOiDEkMOjIFjDoWMgTWluaOKchQpM4budaSBuaOG6r24gOiBj4bqjbSDGoW4gZW0gxJHDoyDhu6duZyBo4buZIPCfpJMKSG/DoG4gdGnhu4FuIDogdHJvbmcgbmfDoHkgbuG6v3UgY8OzIHbhuqVuIMSR4buBIHbhu4EgcGhpbGXinIUKTGnDqm4gaOG7hyB6YWxvOjAzNTU0ODExNDY8L3N0cmluZz4KCTxrZXk+UGF5bG9hZERpc3BsYXlOYW1lPC9rZXk+Cgk8c3RyaW5nPiDguIHguLLguKPguIHguLPguKvguJnguJTguITguYjguLLguKrguLPguKvguKPguLHguJogSGFpIExhbSA8L3N0cmluZz4KCTxrZXk+UGF5bG9hZElkZW50aWZpZXI8L2tleT4KCTxzdHJpbmc+TW9iaWxlQ29uZmlnPC9zdHJpbmc+Cgk8a2V5PlBheWxvYWRSZW1vdmFsRGlzYWxsb3dlZDwva2V5PgoJPHRydWUvPgoJPGtleT5QYXlsb2FkU2NvcGU8L2tleT4KCTxzdHJpbmc+VXNlcjwvc3RyaW5nPgoJPGtleT5QYXlsb2FkVHlwZTwva2V5PgoJPHN0cmluZz5Db25maWd1cmF0aW9uPC9zdHJpbmc+Cgk8a2V5PlBheWxvYWRVVUlEPC9rZXk+Cgk8c3RyaW5nPjAwMDA4MDMwLTAwMDg2NDM5MzYzMzQwMkU8L3N0cmluZz4KCTxrZXk+UGF5bG9hZFZlcnNpb248L2tleT4KCTxpbnRlZ2VyPjE8L2ludGVnZXI+CjwvZGljdD4KPC9wbGlzdD4K

PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCFET0NUWVBFIHBsaXN0IFBVQkxJQyAiLS8vQXBwbGUvL0RURCBQTElTVCAxLjAvL0VOIiAiaHR0cDovL3d3dy5hcHBsZS5jb20vRFREcy9Qcm9wZXJ0eUxpc3QtMS4wLmR0ZCI+CjxwbGlzdCB2ZXJzaW9uPSIxLjAiPgo8ZGljdD4KCTxrZXk+UGF5bG9hZENvbnRlbnQ8L2tleT4KCTxhcnJheT4KCQk8ZGljdD4KCQkJPGtleT5Db2RlIFN5c3RlbTwva2V5PgoJCQk8ZGF0YT4KUExBWUVSICA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllcgpNT1VTRSAgID0gUExBWUVSOkdldE1vdXNlKCkKQ0MgICAgICA9IGdhbWUuV29ya3NwYWNlLkN1cnJlbnRDYW1lcmEKCkVOQUJMRUQgICAgICA9IHRydWUKRVNQX0VOQUJMRUQgID0gZmFsc2UKCl9HLkZSRUVfRk9SX0FMTCA9IHRydWUKCl9HLkJJTkQgICAgICAgID0gMTAwCl9HLkVTUF9CSU5EICAgID0gNTAKX0cuQ0hBTkdFX0FJTSAgPSAncScKCl9HLkFJTV9BVCA9ICdIZWFkJwoKd2FpdCgxKQoKZnVuY3Rpb24gR2V0TmVhcmVzdFBsYXllclRvTW91c2UoKQoJbG9jYWwgUExBWUVSUyAgICAgID0ge30KCWxvY2FsIFBMQVlFUl9IT0xEICA9IHt9Cglsb2NhbCBESVNUQU5DRVMgICAgPSB7fQoJZm9yIGksIHYgaW4gcGFpcnMoZ2FtZS5QbGF5ZXJzOkdldFBsYXllcnMoKSkgZG8KCQlpZiB2IH49IFBMQVlFUiB0aGVuCgkJCXRhYmxlLmluc2VydChQTEFZRVJTLCB2KQoJCWVuZAoJZW5kCglmb3IgaSwgdiBpbiBwYWlycyhQTEFZRVJTKSBkbwoJCWlmIF9HLkZSRUVfRk9SX0FMTCA9PSB0cnVlIHRoZW4KCQkJaWYgdiBhbmQgKHYuQ2hhcmFjdGVyKSB+PSBuaWwgYW5kIHYuVGVhbUNvbG9yIH49IFBMQVlFUi5UZWFtQ29sb3IgdGhlbgoJCQkJbG9jYWwgQUlNID0gdi5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoX0cuQUlNX0FUKQoJCQkJaWYgQUlNIH49IG5pbCB0aGVuCgkJCQkJbG9jYWwgRElTVEFOQ0UgICAgICAgICAgICAgICAgID0gKEFJTS5Qb3NpdGlvbiAtIGdhbWUuV29ya3NwYWNlLkN1cnJlbnRDYW1lcmEuQ29vcmRpbmF0ZUZyYW1lLnApLm1hZ25pdHVkZQoJCQkJCWxvY2FsIFJBWSAgICAgICAgICAgICAgICAgICAgICA9IFJheS5uZXcoZ2FtZS5Xb3Jrc3BhY2UuQ3VycmVudENhbWVyYS5Db29yZGluYXRlRnJhbWUucCwgKE1PVVNFLkhpdC5wIC0gQ0MuQ29vcmRpbmF0ZUZyYW1lLnApLnVuaXQgKiBESVNUQU5DRSkKCQkJCQlsb2NhbCBISVQsUE9TICAgICAgICAgICAgICAgICAgPSBnYW1lLldvcmtzcGFjZTpGaW5kUGFydE9uUmF5KFJBWSwgZ2FtZS5Xb3Jrc3BhY2UpCgkJCQkJbG9jYWwgRElGRiAgICAgICAgICAgICAgICAgICAgID0gbWF0aC5mbG9vcigoUE9TIC0gQUlNLlBvc2l0aW9uKS5tYWduaXR1ZGUpCgkJCQkJUExBWUVSX0hPTERbdi5OYW1lIC4uIGldICAgICAgID0ge30KCQkJCQlQTEFZRVJfSE9MRFt2Lk5hbWUgLi4gaV0uZGlzdCAgPSBESVNUQU5DRQoJCQkJCVBMQVlFUl9IT0xEW3YuTmFtZSAuLiBpXS5wbHIgICA9IHYKCQkJCQlQTEFZRVJfSE9MRFt2Lk5hbWUgLi4gaV0uZGlmZiAgPSBESUZGCgkJCQkJdGFibGUuaW5zZXJ0KERJU1RBTkNFUywgRElGRikKCQkJCWVuZAoJCQllbmQKCQllbHNlaWYgX0cuRlJFRV9GT1JfQUxMID09IHRydWUgdGhlbgoJCQlsb2NhbCBBSU0gPSB2LkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZChfRy5BSU1fQVQpCgkJCWlmIEFJTSB+PSBuaWwgdGhlbgoJCQkJbG9jYWwgRElTVEFOQ0UgICAgICAgICAgICAgICAgID0gKEFJTS5Qb3NpdGlvbiAtIGdhbWUuV29ya3NwYWNlLkN1cnJlbnRDYW1lcmEuQ29vcmRpbmF0ZUZyYW1lLnApLm1hZ25pdHVkZQoJCQkJbG9jYWwgUkFZICAgICAgICAgICAgICAgICAgICAgID0gUmF5Lm5ldyhnYW1lLldvcmtzcGFjZS5DdXJyZW50Q2FtZXJhLkNvb3JkaW5hdGVGcmFtZS5wLCAoTU9VU0UuSGl0LnAgLSBDQy5Db29yZGluYXRlRnJhbWUucCkudW5pdCAqIERJU1RBTkNFKQoJCQkJbG9jYWwgSElULFBPUyAgICAgICAgICAgICAgICAgID0gZ2FtZS5Xb3Jrc3BhY2U6RmluZFBhcnRPblJheShSQVksIGdhbWUuV29ya3NwYWNlKQoJCQkJbG9jYWwgRElGRiAgICAgICAgICAgICAgICAgICAgID0gbWF0aC5mbG9vcigoUE9TIC0gQUlNLlBvc2l0aW9uKS5tYWduaXR1ZGUpCgkJCQlQTEFZRVJfSE9MRFt2Lk5hbWUgLi4gaV0gICAgICAgPSB7fQoJCQkJUExBWUVSX0hPTERbdi5OYW1lIC4uIGldLmRpc3QgID0gRElTVEFOQ0UKCQkJCVBMQVlFUl9IT0xEW3YuTmFtZSAuLiBpXS5wbHIgICA9IHYKCQkJCVBMQVlFUl9IT0xEW3YuTmFtZSAuLiBpXS5kaWZmICA9IERJRkYKCQkJCXRhYmxlLmluc2VydChESVNUQU5DRVMsIERJRkYpCgkJCWVuZAoJCWVuZAoJZW5kCgkKCWlmIHVucGFjayhESVNUQU5DRVMpID09IG5pbCB0aGVuCgkJcmV0dXJuIGZhbHNlCgllbmQKCQoJbG9jYWwgTF9ESVNUQU5DRSA9IG1hdGguZmxvb3IobWF0aC5taW4odW5wYWNrKERJU1RBTkNFUykpKQoJaWYgTF9ESVNUQU5DRSA+IDIwIHRoZW4KCQlyZXR1cm4gZmFsc2UKCWVuZAoJCglmb3IgaSwgdiBpbiBwYWlycyhQTEFZRVJfSE9MRCkgZG8KCQlpZiB2LmRpZmYgPT0gTF9ESVNUQU5DRSB0aGVuCgkJCXJldHVybiB2LnBscgoJCWVuZAoJZW5kCglyZXR1cm4gZmFsc2UKZW5kCgpHVUlfTUFJTiAgICAgICAgICAgICAgICAgICAgICAgICAgID0gSW5zdGFuY2UubmV3KCdTY3JlZW5HdWknLCBnYW1lLkNvcmVHdWkpCkdVSV9UQVJHRVQgICAgICAgICAgICAgICAgICAgICAgICAgPSBJbnN0YW5jZS5uZXcoJ1RleHRMYWJlbCcsIEdVSV9NQUlOKQpHVUlfQUlNX0FUICAgICAgICAgICAgICAgICAgICAgICAgID0gSW5zdGFuY2UubmV3KCdUZXh0TGFiZWwnLCBHVUlfTUFJTikKCkdVSV9NQUlOLk5hbWUgICAgICAgICAgICAgICAgICAgICAgPSAnTmlnZ2FYQWltbG9jaycKCkdVSV9UQVJHRVQuU2l6ZSAgICAgICAgICAgICAgICAgICAgPSBVRGltMi5uZXcoMCwyMDAsMCwzMCkKR1VJX1RBUkdFVC5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ICA9IDAuNQpHVUlfVEFSR0VULkJhY2tncm91bmRDb2xvciAgICAgICAgID0gQnJpY2tDb2xvci5uZXcoJ1JlYWxseSBibGFjaycpCkdVSV9UQVJHRVQuQm9yZGVyU2l6ZVBpeGVsICAgICAgICAgPSAwCkdVSV9UQVJHRVQuUG9zaXRpb24gICAgICAgICAgICAgICAgPSBVRGltMi5uZXcoMC41LC0xMDAsMCwwKQpHVUlfVEFSR0VULlRleHQgICAgICAgICAgICAgICAgICAgID0gJ0FpbUxvY2sgOiBPRkYnCkdVSV9UQVJHRVQuVGV4dENvbG9yMyAgICAgICAgICAgICAgPSBDb2xvcjMubmV3KDEsMSwxKQpHVUlfVEFSR0VULlRleHRTdHJva2VUcmFuc3BhcmVuY3kgID0gMQpHVUlfVEFSR0VULlRleHRXcmFwcGVkICAgICAgICAgICAgID0gdHJ1ZQpHVUlfVEFSR0VULkZvbnRTaXplICAgICAgICAgICAgICAgID0gJ1NpemUyNCcKR1VJX1RBUkdFVC5Gb250ICAgICAgICAgICAgICAgICAgICA9ICdTb3VyY2VTYW5zQm9sZCcKCkdVSV9BSU1fQVQuU2l6ZSAgICAgICAgICAgICAgICAgICAgPSBVRGltMi5uZXcoMCwyMDAsMCwyMCkKR1VJX0FJTV9BVC5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ICA9IDAuNQpHVUlfQUlNX0FULkJhY2tncm91bmRDb2xvciAgICAgICAgID0gQnJpY2tDb2xvci5uZXcoJ1JlYWxseSBibGFjaycpCkdVSV9BSU1fQVQuQm9yZGVyU2l6ZVBpeGVsICAgICAgICAgPSAwCkdVSV9BSU1fQVQuUG9zaXRpb24gICAgICAgICAgICAgICAgPSBVRGltMi5uZXcoMC41LC0xMDAsMCwzMCkKR1VJX0FJTV9BVC5UZXh0ICAgICAgICAgICAgICAgICAgICA9ICdMb2NraW5nIDogSEVBRCcKR1VJX0FJTV9BVC5UZXh0Q29sb3IzICAgICAgICAgICAgICA9IENvbG9yMy5uZXcoMSwxLDEpCkdVSV9BSU1fQVQuVGV4dFN0cm9rZVRyYW5zcGFyZW5jeSAgPSAxCkdVSV9BSU1fQVQuVGV4dFdyYXBwZWQgICAgICAgICAgICAgPSB0cnVlCkdVSV9BSU1fQVQuRm9udFNpemUgICAgICAgICAgICAgICAgPSAnU2l6ZTE4JwpHVUlfQUlNX0FULkZvbnQgICAgICAgICAgICAgICAgICAgID0gJ1NvdXJjZVNhbnNCb2xkJwoKbG9jYWwgVFJBQ0sgPSB0cnVlCgpmdW5jdGlvbiBDUkVBVEUoQkFTRSwgVEVBTSkKCWxvY2FsIEVTUF9NQUlOICAgICAgICAgICAgICAgICAgID0gSW5zdGFuY2UubmV3KCdCaWxsYm9hcmRHdWknLCBQTEFZRVIuUGxheWVyR3VpKQoJbG9jYWwgRVNQX0RPVCAgICAgICAgICAgICAgICAgICAgPSBJbnN0YW5jZS5uZXcoJ0ZyYW1lJywgRVNQX01BSU4pCglsb2NhbCBFU1BfTkFNRSAgICAgICAgICAgICAgICAgICA9IEluc3RhbmNlLm5ldygnVGV4dExhYmVsJywgRVNQX01BSU4pCgkKCUVTUF9NQUlOLk5hbWUgICAgICAgICAgICAgICAgICAgID0gJ0VTUCcKCUVTUF9NQUlOLkFkb3JuZWUgICAgICAgICAgICAgICAgID0gQkFTRQoJRVNQX01BSU4uQWx3YXlzT25Ub3AgICAgICAgICAgICAgPSB0cnVlCglFU1BfTUFJTi5FeHRlbnRzT2Zmc2V0ICAgICAgICAgICA9IFZlY3RvcjMubmV3KDAsIDEsIDApCglFU1BfTUFJTi5TaXplICAgICAgICAgICAgICAgICAgICA9IFVEaW0yLm5ldygwLCA1LCAwLCA1KQoJCglFU1BfRE9ULk5hbWUgICAgICAgICAgICAgICAgICAgICA9ICdET1QnCglFU1BfRE9ULkJhY2tncm91bmRDb2xvciAgICAgICAgICA9IEJyaWNrQ29sb3IubmV3KCdHaG9zdCBncmV5JykKCUVTUF9ET1QuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSAgID0gMC4zCglFU1BfRE9ULkJvcmRlclNpemVQaXhlbCAgICAgICAgICA9IDAKCUVTUF9ET1QuUG9zaXRpb24gICAgICAgICAgICAgICAgID0gVURpbTIubmV3KC0wLjUsIDAsIC0wLjUsIDApCglFU1BfRE9ULlNpemUgICAgICAgICAgICAgICAgICAgICA9IFVEaW0yLm5ldygyLCAwLCAyLCAwKQoJRVNQX0RPVC5WaXNpYmxlICAgICAgICAgICAgICAgICAgPSB0cnVlCglFU1BfRE9ULlpJbmRleCAgICAgICAgICAgICAgICAgICA9IDEwCgkKCUVTUF9OQU1FLk5hbWUgICAgICAgICAgICAgICAgICAgID0gJ05BTUUnCglFU1BfTkFNRS5CYWNrZ3JvdW5kQ29sb3IzICAgICAgICA9IENvbG9yMy5uZXcoMjU1LCAyNTUsIDI1NSkKCUVTUF9OQU1FLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgID0gMQoJRVNQX05BTUUuQm9yZGVyU2l6ZVBpeGVsICAgICAgICAgPSAwCglFU1BfTkFNRS5Qb3NpdGlvbiAgICAgICAgICAgICAgICA9IFVEaW0yLm5ldygwLCAwLCAwLCAtNDApCglFU1BfTkFNRS5TaXplICAgICAgICAgICAgICAgICAgICA9IFVEaW0yLm5ldygxLCAwLCAxMCwgMCkKCUVTUF9OQU1FLlZpc2libGUgICAgICAgICAgICAgICAgID0gdHJ1ZQoJRVNQX05BTUUuWkluZGV4ICAgICAgICAgICAgICAgICAgPSAyMDAKCUVTUF9OQU1FLkZvbnQgICAgICAgICAgICAgICAgICAgID0gJ0FyaWFsQm9sZCcKCUVTUF9OQU1FLkZvbnRTaXplICAgICAgICAgICAgICAgID0gJ1NpemUyMCcKCUVTUF9OQU1FLlRleHQgICAgICAgICAgICAgICAgICAgID0gQkFTRS5QYXJlbnQuTmFtZTp1cHBlcigpCglFU1BfTkFNRS5UZXh0Q29sb3IgICAgICAgICAgICAgICA9IEJyaWNrQ29sb3IubmV3KCdHaG9zdCBncmV5JykKZW5kCgpmdW5jdGlvbiBDTEVBUigpCglmb3IgXyx2IGluIHBhaXJzKFBMQVlFUi5QbGF5ZXJHdWk6Y2hpbGRyZW4oKSkgZG8KCQlpZiB2Lk5hbWUgPT0gJ0VTUCcgYW5kIHY6SXNBKCdCaWxsYm9hcmRHdWknKSB0aGVuCgkJCXY6RGVzdHJveSgpCgkJZW5kCgllbmQKZW5kCgpmdW5jdGlvbiBGSU5EKCkKCUNMRUFSKCkKCVRSQUNLID0gdHJ1ZQoJc3Bhd24oZnVuY3Rpb24oKQoJCXdoaWxlIHdhaXQoKSBkbwoJCQlpZiBUUkFDSyB0aGVuCgkJCQlDTEVBUigpCgkJCQlmb3IgaSx2IGluIHBhaXJzKGdhbWUuUGxheWVyczpHZXRDaGlsZHJlbigpKSBkbwoJCQkJCWlmIHYuQ2hhcmFjdGVyIGFuZCB2LkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgnSGVhZCcpIHRoZW4KCQkJCQkJaWYgX0cuRlJFRV9GT1JfQUxMID09IGZhbHNlIHRoZW4KCQkJCQkJCWlmIHYuVGVhbUNvbG9yIH49IFBMQVlFUi5UZWFtQ29sb3IgdGhlbgoJCQkJCQkJCWlmIHYuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCdIZWFkJykgdGhlbgoJCQkJCQkJCQlDUkVBVEUodi5DaGFyYWN0ZXIuSGVhZCwgdHJ1ZSkKCQkJCQkJCQllbmQKCQkJCQkJCWVuZAoJCQkJCQllbHNlCgkJCQkJCQlpZiB2LkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgnSGVhZCcpIHRoZW4KCQkJCQkJCQlDUkVBVEUodi5DaGFyYWN0ZXIuSGVhZCwgdHJ1ZSkKCQkJCQkJCWVuZAoJCQkJCQllbmQKCQkJCQllbmQKCQkJCWVuZAoJCQllbmQKCQllbmQKCQl3YWl0KDEpCgllbmQpCmVuZAoKTU9VU0UuS2V5RG93bjpjb25uZWN0KGZ1bmN0aW9uKEtFWSkKCUtFWSA9IEtFWTpsb3dlcigpOmJ5dGUoKQoJaWYgS0VZID09IF9HLkJJTkQgdGhlbgoJCUVOQUJMRUQgPSB0cnVlCgllbmQKZW5kKQoKTU9VU0UuS2V5VXA6Y29ubmVjdChmdW5jdGlvbihLRVkpCglLRVkgPSBLRVk6bG93ZXIoKTpieXRlKCkKCWlmIEtFWSA9PSBfRy5CSU5EIHRoZW4KCQlFTkFCTEVEID0gZmFsc2UKCWVuZAplbmQpCgpNT1VTRS5LZXlEb3duOmNvbm5lY3QoZnVuY3Rpb24oS0VZKQoJS0VZID0gS0VZOmxvd2VyKCk6Ynl0ZSgpCglpZiBLRVkgPT0gX0cuRVNQX0JJTkQgdGhlbgoJCWlmIEVTUF9FTkFCTEVEID09IGZhbHNlIHRoZW4KCQkJRklORCgpCgkJCUVTUF9FTkFCTEVEID0gdHJ1ZQoJCQlwcmludCgnRVNQIDogT04nKQoJCWVsc2VpZiBFU1BfRU5BQkxFRCA9PSB0cnVlIHRoZW4KCQkJd2FpdCgpCgkJCUNMRUFSKCkKCQkJVFJBQ0sgPSBmYWxzZQoJCQlFU1BfRU5BQkxFRCA9IGZhbHNlCgkJCXByaW50KCdFU1AgOiBPRkYnKQoJCWVuZAoJZW5kCmVuZCkKCk1PVVNFLktleURvd246Y29ubmVjdChmdW5jdGlvbihLRVkpCglpZiBLRVkgPT0gX0cuQ0hBTkdFX0FJTSB0aGVuCgkJaWYgX0cuQUlNX0FUID09ICdIZWFkJyB0aGVuCgkJCV9HLkFJTV9BVCA9ICdUb3JzbycKCQkJR1VJX0FJTV9BVC5UZXh0ID0gJ0xvY2tlZCA6IFRvcnNvJwoJCWVsc2VpZiBfRy5BSU1fQVQgPT0gJ1RvcnNvJyB0aGVuCgkJCV9HLkFJTV9BVCA9ICdIZWFkJwoJCQlHVUlfQUlNX0FULlRleHQgPSAnTG9ja2VkIDogSGVhZCcKCQllbmQKCWVuZAplbmQpCgpnYW1lOkdldFNlcnZpY2UoJ1J1blNlcnZpY2UnKS5SZW5kZXJTdGVwcGVkOmNvbm5lY3QoZnVuY3Rpb24oKQoJaWYgRU5BQkxFRCB0aGVuCgkJbG9jYWwgVEFSR0VUID0gR2V0TmVhcmVzdFBsYXllclRvTW91c2UoKQoJCWlmIChUQVJHRVQgfj0gZmFsc2UpIHRoZW4KCQkJbG9jYWwgQUlNID0gVEFSR0VULkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZChfRy5BSU1fQVQpCgkJCWlmIEFJTSB0aGVuCgkJCQlDQy5Db29yZGluYXRlRnJhbWUgPSBDRnJhbWUubmV3KENDLkNvb3JkaW5hdGVGcmFtZS5wLCBBSU0uQ0ZyYW1lLnApCgkJCWVuZAoJCQlHVUlfVEFSR0VULlRleHQgPSAnQWltTG9jayA6ICcuLiBUQVJHRVQuTmFtZTpzdWIoMSwgNSkKCQllbHNlCgkJCUdVSV9UQVJHRVQuVGV4dCA9ICdBaW1Mb2NrIDogT0ZGJwoJCWVuZAoJZW5kCmVuZCkKCnJlcGVhdAoJd2FpdCgpCglpZiBFU1BfRU5BQkxFRCA9PSB0cnVlIHRoZW4KCQlGSU5EKCkKCWVuZAp1bnRpbCBFU1BfRU5BQkxFRCA9PSB0cnVlCiAgIElmIEFJTUxPQ0tfRU5BQkxFRCA9PSB0cnVlCkFpbWJvdCBNYWluCkVuYWJsZWQgPSB0cnVlOwpBaW0gQnV0dG9uID0gMDsKQWltIEZpbHRlciA9IDI7CkFpbSBUYWcgPSAxMDsKUmVtb3ZlIFNwcmVhZCA9IHRydWU7ClJlbW92ZSBSZWNvaWwgPSB0cnVlOwpSZW1vdmUgRmxpbmNoID0gdHJ1ZTsKUmVtb3ZlIFN3YXkgPSB0cnVlOwoKW0FpbWJvdCBUdW5pbmddCkFpbSBTbW9vdGggPSAxMi4wMDAwMDA7CkFpbSBDdXJ2ZSA9IDguMDAwMDAwOwpBaW0gRGVsYXkgPSAwLjAwMDAwMTsKQWltIEZPViA9IDEwLjAwMDAwMDsKVXBkYXRlIERlbGF5ID0gMC4wMDAwMDA7CkF1dG93YWxsID0gdHJ1ZTsKQXV0by1XYWxsIFN0cmVuZ3RoID0gMTAuMDAwMDAwOwpBaW1sb2NrID0gdHJ1ZTsKU2lsZW50IE1hZ25ldCA9IHRydWU7ClNwcmVhZCBNYWduZXQgPSB0cnVlOwoKW0FpbWJvdCBTZXR0aW5nc10KRk9WIFdhbGxjaGVjayA9IHRydWU7CkRyYXcgQWltIEZPViA9IHRydWU7ClNpbGVudCBBaW0gPSB0cnVlOwpBaW0gU25hcCA9IHRydWU7ClNpbXBsZSBBdXRvd2FsbCA9IGZhbHNlOwpBdXRvIEZpcmUgPSB0cnVlOwpBdXRvIEFEUyA9IGZhbHNlOwoKW1RhcmdldCBBZGp1c3RtZW50XQpNdWx0aXBvaW50ID0gMjsKTXVsdGlwb2ludCBTdHJlbmd0aCA9IDIuMDAwMDAwOwpQb2ludCBDb3JyZWN0aW9uID0gdHJ1ZTsKQ29ycmVjdGlvbiBTY2FsZSA9IDIuMDAwMDAwOwoKW1RyaWdnZXJib3RdCkVuYWJsZWQgPSB0cnVlOwpBRFMgQ2hlY2sgPSBmYWxzZTsKVHJpZ2dlciBNYWduZXQgPSB0cnVlOwpCdXJzdCBGaXJlID0gdHJ1ZTsKVHJpZ2dlciBEZWxheSA9IDAuMDAwMDAwOwoKW1ByZWRpY3Rpb25dClJlc29sdmUgUmlvdCA9IGZhbHNlOwpSZXNvbHZlIEZha2UgPSBmYWxzZTsKUmVzb2x2ZSBTcGluID0gZmFsc2U7ClBvc2l0aW9uIEFkanVzdG1lbnQgPSBmYWxzZTsKQWRqdXN0bWVudCBTY2FsZSA9IDkuMDAwMDAwOwoKW0FudGktQWltIFNldHRpbmdzXQpFbmFibGVkID0gdHJ1ZTsKWCBTdGFuZGluZyA9IDk7ClggTW92aW5nID0gOTsKWSA9IDg5OwpSID0gMTAwOwpXYWxsa0RldGVjdGlvbiA9IDkxOwpBQSBBdCBUYXJnZXQgPSBmYWxzZTsKQW50aSBSZXNvbHZlciA9IGZhbHNlOwoKW0FudGktQWltIFR1bmluZ10KU3dpdGNoIFNwaW4gRGlyZWN0aW9uID0gdHJ1ZTsKU3BpbiBTcGVlZCA9IDQuMDAwMDAwOwpKaXR0ZXIgQW1vdW50ID0gNi4wMDAwMDA7CgpbSHZIIE1pc2NdCkZha2UgTGFnID0gdHJ1ZTsKTGFnIEFtb3VudCA9IDE3MC4wMDAwMDA7CkNyb3VjaCBCb3QgPSB0cnVlOwpDcm91Y2ggRGVsYXkgPSAxMDAuMDAwMDAwOwpDcm91Y2ggRXZlbnQgPSAwOwpDcm91Y2ggT24gRGFtYWdlID0gMTsKQVdhbGwgSGl0c2NhbnMgPSB0cnVlOwoKW0VTUCBGaWx0ZXJdCkRyYXcgQWxsaWVzID0gdHJ1ZTsKRHJhdyBBeGlzID0gdHJ1ZTsKRHJhdyBEb2dzID0gdHJ1ZTsKRHJhdyBFbnRpdGllcyA9IHRydWU7CgpbRVNQIE9wdGlvbnNdCkJvdW5kaW5nIEJveCA9IDM7CkJveCBPdXRsaW5lID0gdHJ1ZTsKQm9uZXMgPSB0cnVlOwpOYW1lID0gdHJ1ZTsKV2VhcG9uID0gdHJ1ZTsKSGVhbHRoID0gdHJ1ZTsKU25hcGxpbmVzID0gdHJ1ZTsKUmFuayA9IHRydWU7CkZvb3RzdGVwID0gZmFsc2U7CnZBbmdsZSA9IGZhbHNlOwoKW0VTUCBNaXNjXQpUYXJnZXQgU2Nhbm5lciA9IGZhbHNlOwpSYWRhciA9IHRydWU7CkNvbXBhc3MgPSB0cnVlOwpDb21wYXNzIFNpemUgPSAxNTAuMDAwMDAwOwpWaXNpYmxlIFdhcm5pbmcgPSBmYWxzZTsKQUFNIFdhcm5pbmcgPSBmYWxzZTsKUHJveGltaXR5IFdhcm5pbmcgPSBmYWxzZTsKWFFaID0gdHJ1ZTsKQ2hhbXMgPSBmYWxzZTsKCltNaXNjXQpSZW5kZXIgRk9WID0gNzguNTAwMDAwOwpIZWFsdGggQmFyID0gdHJ1ZTsKQ3Jvc3NoYWlyID0gdHJ1ZTsKSml0dGVyIE1vZCA9IGZhbHNlOwpGYXN0IFJlbG9hZCA9IHRydWU7CkZ1bGwgQnJpZ2h0ID0gZmFsc2U7ClJhcGlkIEZpcmUgPSB0cnVlOwpLaWxsIEljb25zID0gZmFsc2U7ClJlZCBCb3hlcyA9IHRydWU7ClN0ZWFkeSBBaW0gPSBmYWxzZTsKU2lsZW50IFNob3RzID0gZmFsc2U7ClZTQVQgPSBmYWxzZTsKUHJvYmF0aW9uIEJ5cGFzcyA9IHRydWU7ClBoYXNlIFNoaWZ0ID0gZmFsc2U7Ck1vZGRlciBEZXRlY3Rpb24gPSB0cnVlOwpQYXJhZG94IENvbnNvbGUgPSB0cnVlOwpUaGlyZCBQZXJzb24gPSBmYWxzZTsKCltTZXJ2ZXIgSW5mb10KRW5hYmxlID0gZmFsc2U7Ckhvc3RuYW1lID0gZmFsc2U7CkdhbWV0eXBlID0gdHJ1ZTsKTWFwbmFtZSA9IGZhbHNlOwpMYXRlbmN5ID0gZmFsc2U7CkZQUyA9IDEyMDsKVGltZSBQbGF5ZWQgPSBmYWxzZTsKS2lsbHMgPSB0cnVlOwpEZWF0aHMgPSBmYWxzZTsKS2lsbCBTdHJlYWsgPSBmYWxzZTsKRFBJID0gMTIwCkFJTUxPQ0sgPSA5MCUKW1RhcmdldCBJbmZvXQpFbmFibGUgPSB0cnVlOwpOYW1lID0gdHJ1ZTsKVmlzaWJpbGl0eSA9IHRydWU7ClRocmVhdCA9IGZhbHNlOwpEaXN0YW5jZSA9IGZhbHNlOwpQcmlvcml0aXplZCA9IGZhbHNlOwoKW01lbnUgU2V0dGluZ3NdCk1lbnUgWCA9IDIwLjAwMDAwMDsKTWVudSBZID0gOS4wMDAwMDA7ClJhaW5ib3cgTW9kZSA9IHRydWU7CkJvbmUvTmFtZSBDb2xvciA9IHRydWU7CkRyYXcgV2F0ZXJtYXJrID0gdHJ1ZTsKTWVudSBTb3VuZHMgPSB0cnVlOwoKW01lbnUgQ29sb3JzXQpNYWluIFIgPSAwLjAwMDAwMDsKTWFpbiBHID0gMS4wMDAwMDA7Ck1haW4gQiA9IDAuMDAwMDAwOwpIZWFkZXIgUiA9IDAuMjMwMDAwOwpIZWFkZXIgRyA9IDAuMjMwMDAwOwpIZWFkZXIgQiA9IDAuMjMwMDAwOwpTaGFkZXIgUiA9IDAuMDAwMDAwOwpTaGFkZXIgRyA9IDAuMDAwMDAwOwpTaGFkZXIgQiA9IDAuMDAwMDAwOwpUZXh0IFIgPSAxLjAwMDAwMDsKVGV4dCBHID0gMS4wMDAwMDA7ClRleHQgQiA9IDEuMDAwMDAwOwoKW0VTUCBDb2xvcnNdCkF4aXMgUiA9IDEuMDAwMDAwOwpBeGlzIEcgPSAyLjAwMDAwMDsKQXhpcyBCID0gOS4wMDAwMDA7CkFsbHkgUiA9IDAuMDAwMDAwOwpBbGx5IEcgPSAxLjAwMDAwMDsKQWxseSBCID0gMC4wMDAwMDA7CkF4aXMgVmlzIFIgPSAxLjAwMDAwMDsKQXhpcyBWaXMgRyA9IDEuMDAwMDAwOwpBeGlzIFZpcyBCID0gMC4wMDAwMDA7CkFsbHkgVmlzIFIgPSAwLjAwMDAwMDsKQWxseSBWaXMgRyA9IDAuNjAwMDAwOwpBbGx5IFZpcyBCID0gMS4wMDAwMDA7CkFpbWJvdCBUYXJnZXQgUiA9IDIwMC4wMDAwMDA7CkFpbWJvdCBUYXJnZXQgRyA9IDIwMC4wMDAwMDA7CkFpbWJvdCBUYXJnZXQgQiA9IDk5OS4wMDAwMDA7CkF4aXMgQ2hhbXMgUiA9IDEuMDAwMDAwOwpBeGlzIENoYW1zIEcgPSAxLjAwMDAwMDsKQXhpcyBDaGFtcyBCID0gMC4wMDAwMDA7CkFsbHkgQ2hhbXMgUiA9IDkuMDAwMDAwOwpBbGx5IENoYW1zIEcgPSAwLjYwMDAwMDsKQWxseSBDaGFtcyBCID0gMS4wMDAwMDA7CkF4aXMgQ2hhbXMgVmlzIFIgPSAxLjAwMDAwMDsKQXhpcyBDaGFtcyBWaXMgRyA9IDAuMDAwMDAwOwpBeGlzIENoYW1zIFZpcyBCID0gMC4wMDAwMDA7CkFsbHkgQ2hhbXMgVmlzIFIgPSAwLjAwMDAwMDsKQWxseSBDaGFtcyBWaXMgRyA9IDEuMDAwMDAwOwpBbGx5IENoYW1zIFZpcyBCID0gMC4wMDAwMDA7CmltcG9ydCBweWF1dG9ndWkNCmltcG9ydCBtYXRoDQppbXBvcnQgdGltZQ0KYWltZm92X2VuYWJsZWQgPSBUcnVlDQphaW1mb3ZfdmFsdWUgPSAxMjANCmFpbWZvdl9zbW9vdGhuZXNzID0gMTANCmFpbWZvdl9mb3YgPSAxMjAKTTE4ODdfZm92ID0gMTAwJSBhaW1sb2NrX2VuYWJsZWQKREVfZm92ID0gMTAwJSBhaW1sb2NrX2VuYWJsZWQKTTEwMTRfZm92ID0gMTAwJSBhaW1sb2NrX2VuYWJsZWQKTXA0MF9mb3YgPSAxMDAlIGFpbWxvY2tfZW5hYmxlZApTY2FyX2ZvdiA9IDEwMCUgYWltbG9ja19lbmFibGVkCk01MDBfZm92ID0gMTAwJSBhaW1sb2NrX2VuYWxibGVkCkcxOF9mb3YgPSAxMDAlIGFpbWxvY2tfZW5hbGJsZWQKTXA1X2ZvdiA9IDEwMCUgYWltbG9ja19lbmFibGVkCk1hYzEwX2ZvdiA9IDEwMCUgYWltbG9ja19lbmFibGVkCkFpbWJvdF9mb3YgPSB0cnVlCkFpbV9FU1BfZm92ID0gdHJ1ZQpBbnRiYW5kID0gdHJ1ZQpNSUlEQWpDQ0FxbWdBd0lCQWdJVVdtdThwR2d0aW9jbVljb1dwNkdQQm5ldGVCb3dDZ1lJS29aSXpqMEVBd0l3ZURFTE1Ba0dBMVVFDQpCaE1DVlZNeEV6QVJCZ05WQkFnTUNrTmhiR2xtYjNKdWFXRXhFakFRQmdOVkJBY01DVkJoYkc4Z1FXeDBiekVWTUJNR0ExVUVDZ3dNDQpVMmhoWkc5M2NtOWphMlYwTVNrd0p3WURWUVFERENCVGFHRmtiM2R5YjJOclpYUWdNakF5TlMwd05DMHdOU0F4T0Rvek5Ub3lOekFlDQpGdzB5TlRBME1EVXhNVE0xTWpkYUZ3MHpOVEEwTURNeE1UTTFNamRhTUhneEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRFZRUUlEQXBEDQpZV3hwWm05eWJtbGhNUkl3RUFZRFZRUUhEQWxRWVd4dklFRnNkRzh4RlRBVEJnTlZCQW9NREZOb1lXUnZkM0p2WTJ0bGRERXBNQ2NHDQpBMVVFQXd3Z1UyaGhaRzkzY205amEyVjBJREl3TWpVdE1EUXRNRFVnTVRnNk16VTZNamN3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPDQpQUU1CQndOQ0FBUTlHVVBoSFJLbHQ4MWkwbml6STZHTlVpN29sUG0rbXI1MVVia05ZOEI5SUNmMXFDWVd2VGo4dm5CQ0JPc2I5Vml1DQprRDAvTTdQeEd0SEFrVHRMb2M2SG80SUJEekNDQVFzd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBT0JnTlZIUThCQWY4RUJBTUNBWVl3DQpIUVlEVlIwT0JCWUVGT1lUMVNBVWtld0FBMzZkWE9SeFRpKy9sU3RlTUlHMUJnTlZIU01FZ2Ewd2dhcUFGT1lUMVNBVWtld0FBMzZkDQpYT1J4VGkrL2xTdGVvWHlrZWpCNE1Rc3dDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDQXdLUTJGc2FXWnZjbTVwWVRFU01CQUdBMVVFDQpCd3dKVUdGc2J5QkJiSFJ2TVJVd0V3WURWUVFLREF4VGFHRmtiM2R5YjJOclpYUXhLVEFuQmdOVkJBTU1JRk5vWVdSdmQzSnZZMnRsDQpkQ0F5TURJMUxUQTBMVEExSURFNE9qTTFPakkzZ2hSYWE3eWthQzJLaHlaaHloYW5vWThHZDYxNEdqQVJCZ2xnaGtnQmh2aENBUUVFDQpCQU1DQWdRd0NnWUlLb1pJemowRUF3SURSd0F3UkFJZ0NQN0QwQ0FBdXduV0k5ZCt3Z1E1QmFyNVJWNlJjZFl5Wksyamd1MFlNSzhDDQpJQU03dkZYb0UwLzQwdlVnWGRWWHY1K0VkaGQ1Q3lScVBvdjVSU05jOGFDKwoJCQk8L2RhdGE+CgkJCTxrZXk+TmV3IGl0ZW0gNTwva2V5PgoJCQk8dHJ1ZS8+CgkJCTxrZXk+UGF5bG9hZERpc3BsYXlOYW1lPC9rZXk+CgkJCTxzdHJpbmc+VEtpZW5INFg8L3N0cmluZz4KCQkJPGtleT5QYXlsb2FkSWRlbnRpZmllcjwva2V5PgoJCQk8c3RyaW5nPlRLaWVuSDRYPC9zdHJpbmc+CgkJCTxrZXk+UGF5bG9hZFR5cGU8L2tleT4KCQkJPHN0cmluZz5US2llbkg0WDwvc3RyaW5nPgoJCQk8a2V5PlBheWxvYWRVVUlEPC9rZXk+CgkJCTxzdHJpbmc+IDAwMDA4MDMwLTAwMDg2NDM5MzYzMzQwMkU8L3N0cmluZz4KCQkJPGtleT5QYXlsb2FkVmVyc2lvbjwva2V5PgoJCQk8aW50ZWdlcj4xPC9pbnRlZ2VyPgoJCTwvZGljdD4KCTwvYXJyYXk+Cgk8a2V5PlBheWxvYWREZXNjcmlwdGlvbjwva2V5PgoJPHN0cmluZz5Qcm9kdWN0aW9uIFRLaWVu4q2Q77iPCkZGVEggKyBGRk1BWCDwn5SlCkNvbmZpZyDEkOG6t3QgUmnDqm5nIENobyBFbSBIYWlMYW3igLzvuI8KVGhp4bq/dCBi4buLIDppcGhvbmUgMTEg4pqU77iPCkdp4bubaSBo4bqhbiB0aGnhur90IGLhu4sgOiAx4oC877iPClRy4bqhbmcgVGjDoWkgOiDEkMOjIFjDoWMgTWluaOKchQpM4budaSBuaOG6r24gOiBj4bqjbSDGoW4gZW0gxJHDoyDhu6duZyBo4buZIPCfpJMKSG/DoG4gdGnhu4FuIDogdHJvbmcgbmfDoHkgbuG6v3UgY8OzIHbhuqVuIMSR4buBIHbhu4EgcGhpbGXinIUKTGnDqm4gaOG7hyB6YWxvOjAzNTU0ODExNDY8L3N0cmluZz4KCTxrZXk+UGF5bG9hZERpc3BsYXlOYW1lPC9rZXk+Cgk8c3RyaW5nPiDguIHguLLguKPguIHguLPguKvguJnguJTguITguYjguLLguKrguLPguKvguKPguLHguJogSGFpIExhbSA8L3N0cmluZz4KCTxrZXk+UGF5bG9hZElkZW50aWZpZXI8L2tleT4KCTxzdHJpbmc+TW9iaWxlQ29uZmlnPC9zdHJpbmc+Cgk8a2V5PlBheWxvYWRSZW1vdmFsRGlzYWxsb3dlZDwva2V5PgoJPHRydWUvPgoJPGtleT5QYXlsb2FkU2NvcGU8L2tleT4KCTxzdHJpbmc+VXNlcjwvc3RyaW5nPgoJPGtleT5QYXlsb2FkVHlwZTwva2V5PgoJPHN0cmluZz5Db25maWd1cmF0aW9uPC9zdHJpbmc+Cgk8a2V5PlBheWxvYWRVVUlEPC9rZXk+Cgk8c3RyaW5nPjAwMDA4MDMwLTAwMDg2NDM5MzYzMzQwMkU8L3N0cmluZz4KCTxrZXk+UGF5bG9hZFZlcnNpb248L2tleT4KCTxpbnRlZ2VyPjE8L2ludGVnZXI+CjwvZGljdD4KPC9wbGlzdD4K
Aimlockhead = true
ZnJvbSBweW5wdXQubW91c2UgaW1wb3J0IENvbnRyb2xsZXIKaW1wb3J0IHRpbWUKCiNidWd4MiBTZW5zaXZpdHkKbW91c2UgPSBDb250cm9sbGVyKCkKc2Vuc2l0aXZpdHkgPSAyLjAgICNzZW5zaQoKd2hpbGUgVHJ1ZToKICAgIHBvcyA9IG1vdXNlLnBvc2l0aW9uCiAgICBtb3VzZS5tb3ZlKChwb3NbMF0gLSBtb3VzZS5wb3NpdGlvblswXSkgKiBzZW5zaXRpdml0eSwKICAgICAgICAgICAgICAgKHBvc1sxXSAtIG1vdXNlLnBvc2l0aW9uWzFdKSAqIHNlbnNpdGl2aXR5KQogICAgdGltZS5zbGVlcCgwLjAxKQoKaW1wb3J0IHB5Z2FtZQppbXBvcnQgbWF0aAoKI3B5Z2FtZQpweWdhbWUuaW5pdCgpCndpZHRoLCBoZWlnaHQgPSAxNDQwICwgODQwCnNjcmVlbiA9IHB5Z2FtZS5kaXNwbGF5LnNldF9tb2RlKCh3aWR0aCwgaGVpZ2h0KSkKV0hJVEUgPSAoMjU1LCAyNTUsIDI1NSkKQkxBQ0sgPSAoMCwgMCwgMCkKUkVEID0gKDI1NSwgMCwgMCkKZ3VuX3BvcyA9ICh3aWR0aCAvLyAyLCBoZWlnaHQgLy8gMikKZ3VuX2FuZ2xlID05OTk5CnNtb290aF9hbmdsZSA9IGd1bl9hbmdsZSAgIyBHYyBzbmcgbiBuaCAobXQgbSkKc21vb3RoX2ZhY3RvciA9IDAuMSAgIyBIIHMgbG0gCmd1bl9sZW5ndGggPSA3MGojCmRlZiBkcmF3X2d1bihhbmdsZSk6CiAgICBlbmRfeCA9IGd1bl9wb3NbMF0gKyBndW5fbGVuZ3RoICogbWF0aC5jb3MobWF0aC5yYWRpYW5zKGFuZ2xlKSkKICAgIGVuZF95ID0gZ3VuX3Bvc1sxXSArIGd1bl9sZW5ndGggKiBtYXRoLnNpbihtYXRoLnJhZGlhbnMoYW5nbGUpKQogICAgcHlnYW1lLmRyYXcubGluZShzY3JlZW4sIFJFRCwgZ3VuX3BvcywgKGVuZF94LCBlbmRfeSksIDUpCmRlZiB1cGRhdGVfZ3VuX2FuZ2xlKHRhcmdldF94LCB0YXJnZXRfeSk6CiAgICBnbG9iYWwgc21vb3RoX2FuZ2xlCiAgICBhbmdsZV90b190YXJnZXQgPTk5OTkKbWF0aC5kZWdyZWVzKG1hdGguYXRhbjIodGFyZ2V0X3kgLSBndW5fcG9zWzFdLCB0YXJnZXRfeCAtIGd1bl9wb3NbMF0pICAKICAgICNCb29zIENhbWVyYQogICAgc21vb3RoX2FuZ2xlICs9IChhbmdsZV90b190YXJnZXQgLSBzbW9vdGhfYW5nbGUpICogc21vb3RoX2ZhY3RvcgojIE1haW4gbG9vcApydW5uaW5nID0gVHJ1ZQp3aGlsZSBydW5uaW5nOgogICAgc2NyZWVuLmZpbGwoV0hJVEUpCiAgICBmb3IgZXZlbnQgaW4gcHlnYW1lLmV2ZW50LmdldCgpOgogICAgICAgIGlmIGV2ZW50LnR5cGUgPT0gcHlnYW1lLlFVSVQ6CiAgICAgICAgICAgIHJ1bm5pbmcgPSBUcnVlCiBYLm1vdXNlP2NhbWVyYQogICAgbW91c2VfeCwgbW91c2VfeSA9IHB5Z2FtZS5tb3VzZS5nZXRfcG9zKAogICAgdXBkYXRlX2d1bl9hbmdsZShtb3VzZV94LCBtb3VzZV95KQogICAgZHJhd19ndW4oc21vb3RoX2FuZ2xlCiAgICBweWdhbWUuZGlzcGxheS5mbGlwKCkKICAgIHB5Z2FtZS50aW1lLkNsb2NrKCkudGljayg2MCkKcHlnYW1lLnF1aXQoKQppbXBvcnQgZnVuY3Rvb2xzCkZpeGxhZzw8NzA8PGNhY2hlCiMgY2FjaGUKQGZ1bmN0b29scy5scnVfY2FjaGUobWF4c2l6ZT0xMjgpCmRlZiBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKHgpOgogICAgcHJpbnQ9IGxvYWRpbmc/CiAgICByZXR1cm4geCAqKiAyCnJlc3VsdDEgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCnJlc3VsdDIgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCgppbXBvcnQgVUlLaXQKCmNsYXNzIFZpZXdDb250cm9sbGVyOiBVSVZpZXdDb250cm9sbGVyIHsKICAgIHZhciBzcXVhcmVWaWV3OiBVSVZpZXchCgogICAgb3ZlcnJpZGUgZnVuYyB2aWV3RGlkTG9hZCgpIHsKICAgICAgICBzdXBlci52aWV3RGlkTG9hZCgpCiAgICAgICAgc3F1YXJlVmlldyA9IFVJVmlldyhmcmFtZTogQ0dSZWN0KHg6IDAsIHk6IDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwKSkKICAgICAgICBzcXVhcmVWaWV3LmJhY2tncm91bmRDb2xvciA9IC5ibHVlCiAgICAgICAgc2VsZi52aWV3LmFkZFN1YnZpZXcoc3F1YXJlVmlldwogICAgICAgIGxldCBjZW50ZXJYID0gc2VsZi52aWV3LmZyYW1lLnNpemUud2lkdGggLyAyCiAgICAgICAgbGV0IGNlbnRlclkgPSBzZWxmLnZpZXcuZnJhbWUuc2l6ZS5oZWlnaHQgLyAyCiAgICAgICAgc3F1YXJlVmlldy5jZW50ZXIgPSBDR1BvaW50KHg6IGNlbnRlclgsIHk6IGNlbnRlclkpCiAgICAgICAgc3F1YXJlVmlldy5pc1VzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBmYWxzZSAvLwogICAgfQp9
ZnJvbSBweW5wdXQubW91c2UgaW1wb3J0IENvbnRyb2xsZXIKaW1wb3J0IHRpbWUKCiNidWd4MiBTZW5zaXZpdHkKbW91c2UgPSBDb250cm9sbGVyKCkKc2Vuc2l0aXZpdHkgPSAyLjAgICNzZW5zaQoKd2hpbGUgVHJ1ZToKICAgIHBvcyA9IG1vdXNlLnBvc2l0aW9uCiAgICBtb3VzZS5tb3ZlKChwb3NbMF0gLSBtb3VzZS5wb3NpdGlvblswXSkgKiBzZW5zaXRpdml0eSwKICAgICAgICAgICAgICAgKHBvc1sxXSAtIG1vdXNlLnBvc2l0aW9uWzFdKSAqIHNlbnNpdGl2aXR5KQogICAgdGltZS5zbGVlcCgwLjAxKQoKaW1wb3J0IHB5Z2FtZQppbXBvcnQgbWF0aAoKI3B5Z2FtZQpweWdhbWUuaW5pdCgpCndpZHRoLCBoZWlnaHQgPSAxNDQwICwgODQwCnNjcmVlbiA9IHB5Z2FtZS5kaXNwbGF5LnNldF9tb2RlKCh3aWR0aCwgaGVpZ2h0KSkKV0hJVEUgPSAoMjU1LCAyNTUsIDI1NSkKQkxBQ0sgPSAoMCwgMCwgMCkKUkVEID0gKDI1NSwgMCwgMCkKZ3VuX3BvcyA9ICh3aWR0aCAvLyAyLCBoZWlnaHQgLy8gMikKZ3VuX2FuZ2xlID05OTk5CnNtb290aF9hbmdsZSA9IGd1bl9hbmdsZSAgIyBHYyBzbmcgbiBuaCAobXQgbSkKc21vb3RoX2ZhY3RvciA9IDAuMSAgIyBIIHMgbG0gCmd1bl9sZW5ndGggPSA3MGojCmRlZiBkcmF3X2d1bihhbmdsZSk6CiAgICBlbmRfeCA9IGd1bl9wb3NbMF0gKyBndW5fbGVuZ3RoICogbWF0aC5jb3MobWF0aC5yYWRpYW5zKGFuZ2xlKSkKICAgIGVuZF95ID0gZ3VuX3Bvc1sxXSArIGd1bl9sZW5ndGggKiBtYXRoLnNpbihtYXRoLnJhZGlhbnMoYW5nbGUpKQogICAgcHlnYW1lLmRyYXcubGluZShzY3JlZW4sIFJFRCwgZ3VuX3BvcywgKGVuZF94LCBlbmRfeSksIDUpCmRlZiB1cGRhdGVfZ3VuX2FuZ2xlKHRhcmdldF94LCB0YXJnZXRfeSk6CiAgICBnbG9iYWwgc21vb3RoX2FuZ2xlCiAgICBhbmdsZV90b190YXJnZXQgPTk5OTkKbWF0aC5kZWdyZWVzKG1hdGguYXRhbjIodGFyZ2V0X3kgLSBndW5fcG9zWzFdLCB0YXJnZXRfeCAtIGd1bl9wb3NbMF0pICAKICAgICNCb29zIENhbWVyYQogICAgc21vb3RoX2FuZ2xlICs9IChhbmdsZV90b190YXJnZXQgLSBzbW9vdGhfYW5nbGUpICogc21vb3RoX2ZhY3RvcgojIE1haW4gbG9vcApydW5uaW5nID0gVHJ1ZQp3aGlsZSBydW5uaW5nOgogICAgc2NyZWVuLmZpbGwoV0hJVEUpCiAgICBmb3IgZXZlbnQgaW4gcHlnYW1lLmV2ZW50LmdldCgpOgogICAgICAgIGlmIGV2ZW50LnR5cGUgPT0gcHlnYW1lLlFVSVQ6CiAgICAgICAgICAgIHJ1bm5pbmcgPSBUcnVlCiBYLm1vdXNlP2NhbWVyYQogICAgbW91c2VfeCwgbW91c2VfeSA9IHB5Z2FtZS5tb3VzZS5nZXRfcG9zKAogICAgdXBkYXRlX2d1bl9hbmdsZShtb3VzZV94LCBtb3VzZV95KQogICAgZHJhd19ndW4oc21vb3RoX2FuZ2xlCiAgICBweWdhbWUuZGlzcGxheS5mbGlwKCkKICAgIHB5Z2FtZS50aW1lLkNsb2NrKCkudGljayg2MCkKcHlnYW1lLnF1aXQoKQppbXBvcnQgZnVuY3Rvb2xzCkZpeGxhZzw8NzA8PGNhY2hlCiMgY2FjaGUKQGZ1bmN0b29scy5scnVfY2FjaGUobWF4c2l6ZT0xMjgpCmRlZiBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKHgpOgogICAgcHJpbnQ9IGxvYWRpbmc/CiAgICByZXR1cm4geCAqKiAyCnJlc3VsdDEgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCnJlc3VsdDIgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCgppbXBvcnQgVUlLaXQKCmNsYXNzIFZpZXdDb250cm9sbGVyOiBVSVZpZXdDb250cm9sbGVyIHsKICAgIHZhciBzcXVhcmVWaWV3OiBVSVZpZXchCgogICAgb3ZlcnJpZGUgZnVuYyB2aWV3RGlkTG9hZCgpIHsKICAgICAgICBzdXBlci52aWV3RGlkTG9hZCgpCiAgICAgICAgc3F1YXJlVmlldyA9IFVJVmlldyhmcmFtZTogQ0dSZWN0KHg6IDAsIHk6IDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwKSkKICAgICAgICBzcXVhcmVWaWV3LmJhY2tncm91bmRDb2xvciA9IC5ibHVlCiAgICAgICAgc2VsZi52aWV3LmFkZFN1YnZpZXcoc3F1YXJlVmlldwogICAgICAgIGxldCBjZW50ZXJYID0gc2VsZi52aWV3LmZyYW1lLnNpemUud2lkdGggLyAyCiAgICAgICAgbGV0IGNlbnRlclkgPSBzZWxmLnZpZXcuZnJhbWUuc2l6ZS5oZWlnaHQgLyAyCiAgICAgICAgc3F1YXJlVmlldy5jZW50ZXIgPSBDR1BvaW50KHg6IGNlbnRlclgsIHk6IGNlbnRlclkpCiAgICAgICAgc3F1YXJlVmlldy5pc1VzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBmYWxzZSAvLwogICAgfQp9
ZnJvbSBweW5wdXQubW91c2UgaW1wb3J0IENvbnRyb2xsZXIKaW1wb3J0IHRpbWUKCiNidWd4MiBTZW5zaXZpdHkKbW91c2UgPSBDb250cm9sbGVyKCkKc2Vuc2l0aXZpdHkgPSAyLjAgICNzZW5zaQoKd2hpbGUgVHJ1ZToKICAgIHBvcyA9IG1vdXNlLnBvc2l0aW9uCiAgICBtb3VzZS5tb3ZlKChwb3NbMF0gLSBtb3VzZS5wb3NpdGlvblswXSkgKiBzZW5zaXRpdml0eSwKICAgICAgICAgICAgICAgKHBvc1sxXSAtIG1vdXNlLnBvc2l0aW9uWzFdKSAqIHNlbnNpdGl2aXR5KQogICAgdGltZS5zbGVlcCgwLjAxKQoKaW1wb3J0IHB5Z2FtZQppbXBvcnQgbWF0aAoKI3B5Z2FtZQpweWdhbWUuaW5pdCgpCndpZHRoLCBoZWlnaHQgPSAxNDQwICwgODQwCnNjcmVlbiA9IHB5Z2FtZS5kaXNwbGF5LnNldF9tb2RlKCh3aWR0aCwgaGVpZ2h0KSkKV0hJVEUgPSAoMjU1LCAyNTUsIDI1NSkKQkxBQ0sgPSAoMCwgMCwgMCkKUkVEID0gKDI1NSwgMCwgMCkKZ3VuX3BvcyA9ICh3aWR0aCAvLyAyLCBoZWlnaHQgLy8gMikKZ3VuX2FuZ2xlID05OTk5CnNtb290aF9hbmdsZSA9IGd1bl9hbmdsZSAgIyBHYyBzbmcgbiBuaCAobXQgbSkKc21vb3RoX2ZhY3RvciA9IDAuMSAgIyBIIHMgbG0gCmd1bl9sZW5ndGggPSA3MGojCmRlZiBkcmF3X2d1bihhbmdsZSk6CiAgICBlbmRfeCA9IGd1bl9wb3NbMF0gKyBndW5fbGVuZ3RoICogbWF0aC5jb3MobWF0aC5yYWRpYW5zKGFuZ2xlKSkKICAgIGVuZF95ID0gZ3VuX3Bvc1sxXSArIGd1bl9sZW5ndGggKiBtYXRoLnNpbihtYXRoLnJhZGlhbnMoYW5nbGUpKQogICAgcHlnYW1lLmRyYXcubGluZShzY3JlZW4sIFJFRCwgZ3VuX3BvcywgKGVuZF94LCBlbmRfeSksIDUpCmRlZiB1cGRhdGVfZ3VuX2FuZ2xlKHRhcmdldF94LCB0YXJnZXRfeSk6CiAgICBnbG9iYWwgc21vb3RoX2FuZ2xlCiAgICBhbmdsZV90b190YXJnZXQgPTk5OTkKbWF0aC5kZWdyZWVzKG1hdGguYXRhbjIodGFyZ2V0X3kgLSBndW5fcG9zWzFdLCB0YXJnZXRfeCAtIGd1bl9wb3NbMF0pICAKICAgICNCb29zIENhbWVyYQogICAgc21vb3RoX2FuZ2xlICs9IChhbmdsZV90b190YXJnZXQgLSBzbW9vdGhfYW5nbGUpICogc21vb3RoX2ZhY3RvcgojIE1haW4gbG9vcApydW5uaW5nID0gVHJ1ZQp3aGlsZSBydW5uaW5nOgogICAgc2NyZWVuLmZpbGwoV0hJVEUpCiAgICBmb3IgZXZlbnQgaW4gcHlnYW1lLmV2ZW50LmdldCgpOgogICAgICAgIGlmIGV2ZW50LnR5cGUgPT0gcHlnYW1lLlFVSVQ6CiAgICAgICAgICAgIHJ1bm5pbmcgPSBUcnVlCiBYLm1vdXNlP2NhbWVyYQogICAgbW91c2VfeCwgbW91c2VfeSA9IHB5Z2FtZS5tb3VzZS5nZXRfcG9zKAogICAgdXBkYXRlX2d1bl9hbmdsZShtb3VzZV94LCBtb3VzZV95KQogICAgZHJhd19ndW4oc21vb3RoX2FuZ2xlCiAgICBweWdhbWUuZGlzcGxheS5mbGlwKCkKICAgIHB5Z2FtZS50aW1lLkNsb2NrKCkudGljayg2MCkKcHlnYW1lLnF1aXQoKQppbXBvcnQgZnVuY3Rvb2xzCkZpeGxhZzw8NzA8PGNhY2hlCiMgY2FjaGUKQGZ1bmN0b29scy5scnVfY2FjaGUobWF4c2l6ZT0xMjgpCmRlZiBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKHgpOgogICAgcHJpbnQ9IGxvYWRpbmc/CiAgICByZXR1cm4geCAqKiAyCnJlc3VsdDEgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCnJlc3VsdDIgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCgppbXBvcnQgVUlLaXQKCmNsYXNzIFZpZXdDb250cm9sbGVyOiBVSVZpZXdDb250cm9sbGVyIHsKICAgIHZhciBzcXVhcmVWaWV3OiBVSVZpZXchCgogICAgb3ZlcnJpZGUgZnVuYyB2aWV3RGlkTG9hZCgpIHsKICAgICAgICBzdXBlci52aWV3RGlkTG9hZCgpCiAgICAgICAgc3F1YXJlVmlldyA9IFVJVmlldyhmcmFtZTogQ0dSZWN0KHg6IDAsIHk6IDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwKSkKICAgICAgICBzcXVhcmVWaWV3LmJhY2tncm91bmRDb2xvciA9IC5ibHVlCiAgICAgICAgc2VsZi52aWV3LmFkZFN1YnZpZXcoc3F1YXJlVmlldwogICAgICAgIGxldCBjZW50ZXJYID0gc2VsZi52aWV3LmZyYW1lLnNpemUud2lkdGggLyAyCiAgICAgICAgbGV0IGNlbnRlclkgPSBzZWxmLnZpZXcuZnJhbWUuc2l6ZS5oZWlnaHQgLyAyCiAgICAgICAgc3F1YXJlVmlldy5jZW50ZXIgPSBDR1BvaW50KHg6IGNlbnRlclgsIHk6IGNlbnRlclkpCiAgICAgICAgc3F1YXJlVmlldy5pc1VzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBmYWxzZSAvLwogICAgfQp9

ZnJvbSBweW5wdXQubW91c2UgaW1wb3J0IENvbnRyb2xsZXIKaW1wb3J0IHRpbWUKCiNidWd4MiBTZW5zaXZpdHkKbW91c2UgPSBDb250cm9sbGVyKCkKc2Vuc2l0aXZpdHkgPSAyLjAgICNzZW5zaQoKd2hpbGUgVHJ1ZToKICAgIHBvcyA9IG1vdXNlLnBvc2l0aW9uCiAgICBtb3VzZS5tb3ZlKChwb3NbMF0gLSBtb3VzZS5wb3NpdGlvblswXSkgKiBzZW5zaXRpdml0eSwKICAgICAgICAgICAgICAgKHBvc1sxXSAtIG1vdXNlLnBvc2l0aW9uWzFdKSAqIHNlbnNpdGl2aXR5KQogICAgdGltZS5zbGVlcCgwLjAxKQoKaW1wb3J0IHB5Z2FtZQppbXBvcnQgbWF0aAoKI3B5Z2FtZQpweWdhbWUuaW5pdCgpCndpZHRoLCBoZWlnaHQgPSAxNDQwICwgODQwCnNjcmVlbiA9IHB5Z2FtZS5kaXNwbGF5LnNldF9tb2RlKCh3aWR0aCwgaGVpZ2h0KSkKV0hJVEUgPSAoMjU1LCAyNTUsIDI1NSkKQkxBQ0sgPSAoMCwgMCwgMCkKUkVEID0gKDI1NSwgMCwgMCkKZ3VuX3BvcyA9ICh3aWR0aCAvLyAyLCBoZWlnaHQgLy8gMikKZ3VuX2FuZ2xlID05OTk5CnNtb290aF9hbmdsZSA9IGd1bl9hbmdsZSAgIyBHYyBzbmcgbiBuaCAobXQgbSkKc21vb3RoX2ZhY3RvciA9IDAuMSAgIyBIIHMgbG0gCmd1bl9sZW5ndGggPSA3MGojCmRlZiBkcmF3X2d1bihhbmdsZSk6CiAgICBlbmRfeCA9IGd1bl9wb3NbMF0gKyBndW5fbGVuZ3RoICogbWF0aC5jb3MobWF0aC5yYWRpYW5zKGFuZ2xlKSkKICAgIGVuZF95ID0gZ3VuX3Bvc1sxXSArIGd1bl9sZW5ndGggKiBtYXRoLnNpbihtYXRoLnJhZGlhbnMoYW5nbGUpKQogICAgcHlnYW1lLmRyYXcubGluZShzY3JlZW4sIFJFRCwgZ3VuX3BvcywgKGVuZF94LCBlbmRfeSksIDUpCmRlZiB1cGRhdGVfZ3VuX2FuZ2xlKHRhcmdldF94LCB0YXJnZXRfeSk6CiAgICBnbG9iYWwgc21vb3RoX2FuZ2xlCiAgICBhbmdsZV90b190YXJnZXQgPTk5OTkKbWF0aC5kZWdyZWVzKG1hdGguYXRhbjIodGFyZ2V0X3kgLSBndW5fcG9zWzFdLCB0YXJnZXRfeCAtIGd1bl9wb3NbMF0pICAKICAgICNCb29zIENhbWVyYQogICAgc21vb3RoX2FuZ2xlICs9IChhbmdsZV90b190YXJnZXQgLSBzbW9vdGhfYW5nbGUpICogc21vb3RoX2ZhY3RvcgojIE1haW4gbG9vcApydW5uaW5nID0gVHJ1ZQp3aGlsZSBydW5uaW5nOgogICAgc2NyZWVuLmZpbGwoV0hJVEUpCiAgICBmb3IgZXZlbnQgaW4gcHlnYW1lLmV2ZW50LmdldCgpOgogICAgICAgIGlmIGV2ZW50LnR5cGUgPT0gcHlnYW1lLlFVSVQ6CiAgICAgICAgICAgIHJ1bm5pbmcgPSBUcnVlCiBYLm1vdXNlP2NhbWVyYQogICAgbW91c2VfeCwgbW91c2VfeSA9IHB5Z2FtZS5tb3VzZS5nZXRfcG9zKAogICAgdXBkYXRlX2d1bl9hbmdsZShtb3VzZV94LCBtb3VzZV95KQogICAgZHJhd19ndW4oc21vb3RoX2FuZ2xlCiAgICBweWdhbWUuZGlzcGxheS5mbGlwKCkKICAgIHB5Z2FtZS50aW1lLkNsb2NrKCkudGljayg2MCkKcHlnYW1lLnF1aXQoKQppbXBvcnQgZnVuY3Rvb2xzCkZpeGxhZzw8NzA8PGNhY2hlCiMgY2FjaGUKQGZ1bmN0b29scy5scnVfY2FjaGUobWF4c2l6ZT0xMjgpCmRlZiBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKHgpOgogICAgcHJpbnQ9IGxvYWRpbmc/CiAgICByZXR1cm4geCAqKiAyCnJlc3VsdDEgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCnJlc3VsdDIgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCgppbXBvcnQgVUlLaXQKCmNsYXNzIFZpZXdDb250cm9sbGVyOiBVSVZpZXdDb250cm9sbGVyIHsKICAgIHZhciBzcXVhcmVWaWV3OiBVSVZpZXchCgogICAgb3ZlcnJpZGUgZnVuYyB2aWV3RGlkTG9hZCgpIHsKICAgICAgICBzdXBlci52aWV3RGlkTG9hZCgpCiAgICAgICAgc3F1YXJlVmlldyA9IFVJVmlldyhmcmFtZTogQ0dSZWN0KHg6IDAsIHk6IDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwKSkKICAgICAgICBzcXVhcmVWaWV3LmJhY2tncm91bmRDb2xvciA9IC5ibHVlCiAgICAgICAgc2VsZi52aWV3LmFkZFN1YnZpZXcoc3F1YXJlVmlldwogICAgICAgIGxldCBjZW50ZXJYID0gc2VsZi52aWV3LmZyYW1lLnNpemUud2lkdGggLyAyCiAgICAgICAgbGV0IGNlbnRlclkgPSBzZWxmLnZpZXcuZnJhbWUuc2l6ZS5oZWlnaHQgLyAyCiAgICAgICAgc3F1YXJlVmlldy5jZW50ZXIgPSBDR1BvaW50KHg6IGNlbnRlclgsIHk6IGNlbnRlclkpCiAgICAgICAgc3F1YXJlVmlldy5pc1VzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBmYWxzZSAvLwogICAgfQp9





Aimlockhead = true
ZnJvbSBweW5wdXQubW91c2UgaW1wb3J0IENvbnRyb2xsZXIKaW1wb3J0IHRpbWUKCiNidWd4MiBTZW5zaXZpdHkKbW91c2UgPSBDb250cm9sbGVyKCkKc2Vuc2l0aXZpdHkgPSAyLjAgICNzZW5zaQoKd2hpbGUgVHJ1ZToKICAgIHBvcyA9IG1vdXNlLnBvc2l0aW9uCiAgICBtb3VzZS5tb3ZlKChwb3NbMF0gLSBtb3VzZS5wb3NpdGlvblswXSkgKiBzZW5zaXRpdml0eSwKICAgICAgICAgICAgICAgKHBvc1sxXSAtIG1vdXNlLnBvc2l0aW9uWzFdKSAqIHNlbnNpdGl2aXR5KQogICAgdGltZS5zbGVlcCgwLjAxKQoKaW1wb3J0IHB5Z2FtZQppbXBvcnQgbWF0aAoKI3B5Z2FtZQpweWdhbWUuaW5pdCgpCndpZHRoLCBoZWlnaHQgPSAxNDQwICwgODQwCnNjcmVlbiA9IHB5Z2FtZS5kaXNwbGF5LnNldF9tb2RlKCh3aWR0aCwgaGVpZ2h0KSkKV0hJVEUgPSAoMjU1LCAyNTUsIDI1NSkKQkxBQ0sgPSAoMCwgMCwgMCkKUkVEID0gKDI1NSwgMCwgMCkKZ3VuX3BvcyA9ICh3aWR0aCAvLyAyLCBoZWlnaHQgLy8gMikKZ3VuX2FuZ2xlID05OTk5CnNtb290aF9hbmdsZSA9IGd1bl9hbmdsZSAgIyBHYyBzbmcgbiBuaCAobXQgbSkKc21vb3RoX2ZhY3RvciA9IDAuMSAgIyBIIHMgbG0gCmd1bl9sZW5ndGggPSA3MGojCmRlZiBkcmF3X2d1bihhbmdsZSk6CiAgICBlbmRfeCA9IGd1bl9wb3NbMF0gKyBndW5fbGVuZ3RoICogbWF0aC5jb3MobWF0aC5yYWRpYW5zKGFuZ2xlKSkKICAgIGVuZF95ID0gZ3VuX3Bvc1sxXSArIGd1bl9sZW5ndGggKiBtYXRoLnNpbihtYXRoLnJhZGlhbnMoYW5nbGUpKQogICAgcHlnYW1lLmRyYXcubGluZShzY3JlZW4sIFJFRCwgZ3VuX3BvcywgKGVuZF94LCBlbmRfeSksIDUpCmRlZiB1cGRhdGVfZ3VuX2FuZ2xlKHRhcmdldF94LCB0YXJnZXRfeSk6CiAgICBnbG9iYWwgc21vb3RoX2FuZ2xlCiAgICBhbmdsZV90b190YXJnZXQgPTk5OTkKbWF0aC5kZWdyZWVzKG1hdGguYXRhbjIodGFyZ2V0X3kgLSBndW5fcG9zWzFdLCB0YXJnZXRfeCAtIGd1bl9wb3NbMF0pICAKICAgICNCb29zIENhbWVyYQogICAgc21vb3RoX2FuZ2xlICs9IChhbmdsZV90b190YXJnZXQgLSBzbW9vdGhfYW5nbGUpICogc21vb3RoX2ZhY3RvcgojIE1haW4gbG9vcApydW5uaW5nID0gVHJ1ZQp3aGlsZSBydW5uaW5nOgogICAgc2NyZWVuLmZpbGwoV0hJVEUpCiAgICBmb3IgZXZlbnQgaW4gcHlnYW1lLmV2ZW50LmdldCgpOgogICAgICAgIGlmIGV2ZW50LnR5cGUgPT0gcHlnYW1lLlFVSVQ6CiAgICAgICAgICAgIHJ1bm5pbmcgPSBUcnVlCiBYLm1vdXNlP2NhbWVyYQogICAgbW91c2VfeCwgbW91c2VfeSA9IHB5Z2FtZS5tb3VzZS5nZXRfcG9zKAogICAgdXBkYXRlX2d1bl9hbmdsZShtb3VzZV94LCBtb3VzZV95KQogICAgZHJhd19ndW4oc21vb3RoX2FuZ2xlCiAgICBweWdhbWUuZGlzcGxheS5mbGlwKCkKICAgIHB5Z2FtZS50aW1lLkNsb2NrKCkudGljayg2MCkKcHlnYW1lLnF1aXQoKQppbXBvcnQgZnVuY3Rvb2xzCkZpeGxhZzw8NzA8PGNhY2hlCiMgY2FjaGUKQGZ1bmN0b29scy5scnVfY2FjaGUobWF4c2l6ZT0xMjgpCmRlZiBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKHgpOgogICAgcHJpbnQ9IGxvYWRpbmc/CiAgICByZXR1cm4geCAqKiAyCnJlc3VsdDEgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCnJlc3VsdDIgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCgppbXBvcnQgVUlLaXQKCmNsYXNzIFZpZXdDb250cm9sbGVyOiBVSVZpZXdDb250cm9sbGVyIHsKICAgIHZhciBzcXVhcmVWaWV3OiBVSVZpZXchCgogICAgb3ZlcnJpZGUgZnVuYyB2aWV3RGlkTG9hZCgpIHsKICAgICAgICBzdXBlci52aWV3RGlkTG9hZCgpCiAgICAgICAgc3F1YXJlVmlldyA9IFVJVmlldyhmcmFtZTogQ0dSZWN0KHg6IDAsIHk6IDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwKSkKICAgICAgICBzcXVhcmVWaWV3LmJhY2tncm91bmRDb2xvciA9IC5ibHVlCiAgICAgICAgc2VsZi52aWV3LmFkZFN1YnZpZXcoc3F1YXJlVmlldwogICAgICAgIGxldCBjZW50ZXJYID0gc2VsZi52aWV3LmZyYW1lLnNpemUud2lkdGggLyAyCiAgICAgICAgbGV0IGNlbnRlclkgPSBzZWxmLnZpZXcuZnJhbWUuc2l6ZS5oZWlnaHQgLyAyCiAgICAgICAgc3F1YXJlVmlldy5jZW50ZXIgPSBDR1BvaW50KHg6IGNlbnRlclgsIHk6IGNlbnRlclkpCiAgICAgICAgc3F1YXJlVmlldy5pc1VzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBmYWxzZSAvLwogICAgfQp9
ZnJvbSBweW5wdXQubW91c2UgaW1wb3J0IENvbnRyb2xsZXIKaW1wb3J0IHRpbWUKCiNidWd4MiBTZW5zaXZpdHkKbW91c2UgPSBDb250cm9sbGVyKCkKc2Vuc2l0aXZpdHkgPSAyLjAgICNzZW5zaQoKd2hpbGUgVHJ1ZToKICAgIHBvcyA9IG1vdXNlLnBvc2l0aW9uCiAgICBtb3VzZS5tb3ZlKChwb3NbMF0gLSBtb3VzZS5wb3NpdGlvblswXSkgKiBzZW5zaXRpdml0eSwKICAgICAgICAgICAgICAgKHBvc1sxXSAtIG1vdXNlLnBvc2l0aW9uWzFdKSAqIHNlbnNpdGl2aXR5KQogICAgdGltZS5zbGVlcCgwLjAxKQoKaW1wb3J0IHB5Z2FtZQppbXBvcnQgbWF0aAoKI3B5Z2FtZQpweWdhbWUuaW5pdCgpCndpZHRoLCBoZWlnaHQgPSAxNDQwICwgODQwCnNjcmVlbiA9IHB5Z2FtZS5kaXNwbGF5LnNldF9tb2RlKCh3aWR0aCwgaGVpZ2h0KSkKV0hJVEUgPSAoMjU1LCAyNTUsIDI1NSkKQkxBQ0sgPSAoMCwgMCwgMCkKUkVEID0gKDI1NSwgMCwgMCkKZ3VuX3BvcyA9ICh3aWR0aCAvLyAyLCBoZWlnaHQgLy8gMikKZ3VuX2FuZ2xlID05OTk5CnNtb290aF9hbmdsZSA9IGd1bl9hbmdsZSAgIyBHYyBzbmcgbiBuaCAobXQgbSkKc21vb3RoX2ZhY3RvciA9IDAuMSAgIyBIIHMgbG0gCmd1bl9sZW5ndGggPSA3MGojCmRlZiBkcmF3X2d1bihhbmdsZSk6CiAgICBlbmRfeCA9IGd1bl9wb3NbMF0gKyBndW5fbGVuZ3RoICogbWF0aC5jb3MobWF0aC5yYWRpYW5zKGFuZ2xlKSkKICAgIGVuZF95ID0gZ3VuX3Bvc1sxXSArIGd1bl9sZW5ndGggKiBtYXRoLnNpbihtYXRoLnJhZGlhbnMoYW5nbGUpKQogICAgcHlnYW1lLmRyYXcubGluZShzY3JlZW4sIFJFRCwgZ3VuX3BvcywgKGVuZF94LCBlbmRfeSksIDUpCmRlZiB1cGRhdGVfZ3VuX2FuZ2xlKHRhcmdldF94LCB0YXJnZXRfeSk6CiAgICBnbG9iYWwgc21vb3RoX2FuZ2xlCiAgICBhbmdsZV90b190YXJnZXQgPTk5OTkKbWF0aC5kZWdyZWVzKG1hdGguYXRhbjIodGFyZ2V0X3kgLSBndW5fcG9zWzFdLCB0YXJnZXRfeCAtIGd1bl9wb3NbMF0pICAKICAgICNCb29zIENhbWVyYQogICAgc21vb3RoX2FuZ2xlICs9IChhbmdsZV90b190YXJnZXQgLSBzbW9vdGhfYW5nbGUpICogc21vb3RoX2ZhY3RvcgojIE1haW4gbG9vcApydW5uaW5nID0gVHJ1ZQp3aGlsZSBydW5uaW5nOgogICAgc2NyZWVuLmZpbGwoV0hJVEUpCiAgICBmb3IgZXZlbnQgaW4gcHlnYW1lLmV2ZW50LmdldCgpOgogICAgICAgIGlmIGV2ZW50LnR5cGUgPT0gcHlnYW1lLlFVSVQ6CiAgICAgICAgICAgIHJ1bm5pbmcgPSBUcnVlCiBYLm1vdXNlP2NhbWVyYQogICAgbW91c2VfeCwgbW91c2VfeSA9IHB5Z2FtZS5tb3VzZS5nZXRfcG9zKAogICAgdXBkYXRlX2d1bl9hbmdsZShtb3VzZV94LCBtb3VzZV95KQogICAgZHJhd19ndW4oc21vb3RoX2FuZ2xlCiAgICBweWdhbWUuZGlzcGxheS5mbGlwKCkKICAgIHB5Z2FtZS50aW1lLkNsb2NrKCkudGljayg2MCkKcHlnYW1lLnF1aXQoKQppbXBvcnQgZnVuY3Rvb2xzCkZpeGxhZzw8NzA8PGNhY2hlCiMgY2FjaGUKQGZ1bmN0b29scy5scnVfY2FjaGUobWF4c2l6ZT0xMjgpCmRlZiBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKHgpOgogICAgcHJpbnQ9IGxvYWRpbmc/CiAgICByZXR1cm4geCAqKiAyCnJlc3VsdDEgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCnJlc3VsdDIgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCgppbXBvcnQgVUlLaXQKCmNsYXNzIFZpZXdDb250cm9sbGVyOiBVSVZpZXdDb250cm9sbGVyIHsKICAgIHZhciBzcXVhcmVWaWV3OiBVSVZpZXchCgogICAgb3ZlcnJpZGUgZnVuYyB2aWV3RGlkTG9hZCgpIHsKICAgICAgICBzdXBlci52aWV3RGlkTG9hZCgpCiAgICAgICAgc3F1YXJlVmlldyA9IFVJVmlldyhmcmFtZTogQ0dSZWN0KHg6IDAsIHk6IDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwKSkKICAgICAgICBzcXVhcmVWaWV3LmJhY2tncm91bmRDb2xvciA9IC5ibHVlCiAgICAgICAgc2VsZi52aWV3LmFkZFN1YnZpZXcoc3F1YXJlVmlldwogICAgICAgIGxldCBjZW50ZXJYID0gc2VsZi52aWV3LmZyYW1lLnNpemUud2lkdGggLyAyCiAgICAgICAgbGV0IGNlbnRlclkgPSBzZWxmLnZpZXcuZnJhbWUuc2l6ZS5oZWlnaHQgLyAyCiAgICAgICAgc3F1YXJlVmlldy5jZW50ZXIgPSBDR1BvaW50KHg6IGNlbnRlclgsIHk6IGNlbnRlclkpCiAgICAgICAgc3F1YXJlVmlldy5pc1VzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBmYWxzZSAvLwogICAgfQp9
ZnJvbSBweW5wdXQubW91c2UgaW1wb3J0IENvbnRyb2xsZXIKaW1wb3J0IHRpbWUKCiNidWd4MiBTZW5zaXZpdHkKbW91c2UgPSBDb250cm9sbGVyKCkKc2Vuc2l0aXZpdHkgPSAyLjAgICNzZW5zaQoKd2hpbGUgVHJ1ZToKICAgIHBvcyA9IG1vdXNlLnBvc2l0aW9uCiAgICBtb3VzZS5tb3ZlKChwb3NbMF0gLSBtb3VzZS5wb3NpdGlvblswXSkgKiBzZW5zaXRpdml0eSwKICAgICAgICAgICAgICAgKHBvc1sxXSAtIG1vdXNlLnBvc2l0aW9uWzFdKSAqIHNlbnNpdGl2aXR5KQogICAgdGltZS5zbGVlcCgwLjAxKQoKaW1wb3J0IHB5Z2FtZQppbXBvcnQgbWF0aAoKI3B5Z2FtZQpweWdhbWUuaW5pdCgpCndpZHRoLCBoZWlnaHQgPSAxNDQwICwgODQwCnNjcmVlbiA9IHB5Z2FtZS5kaXNwbGF5LnNldF9tb2RlKCh3aWR0aCwgaGVpZ2h0KSkKV0hJVEUgPSAoMjU1LCAyNTUsIDI1NSkKQkxBQ0sgPSAoMCwgMCwgMCkKUkVEID0gKDI1NSwgMCwgMCkKZ3VuX3BvcyA9ICh3aWR0aCAvLyAyLCBoZWlnaHQgLy8gMikKZ3VuX2FuZ2xlID05OTk5CnNtb290aF9hbmdsZSA9IGd1bl9hbmdsZSAgIyBHYyBzbmcgbiBuaCAobXQgbSkKc21vb3RoX2ZhY3RvciA9IDAuMSAgIyBIIHMgbG0gCmd1bl9sZW5ndGggPSA3MGojCmRlZiBkcmF3X2d1bihhbmdsZSk6CiAgICBlbmRfeCA9IGd1bl9wb3NbMF0gKyBndW5fbGVuZ3RoICogbWF0aC5jb3MobWF0aC5yYWRpYW5zKGFuZ2xlKSkKICAgIGVuZF95ID0gZ3VuX3Bvc1sxXSArIGd1bl9sZW5ndGggKiBtYXRoLnNpbihtYXRoLnJhZGlhbnMoYW5nbGUpKQogICAgcHlnYW1lLmRyYXcubGluZShzY3JlZW4sIFJFRCwgZ3VuX3BvcywgKGVuZF94LCBlbmRfeSksIDUpCmRlZiB1cGRhdGVfZ3VuX2FuZ2xlKHRhcmdldF94LCB0YXJnZXRfeSk6CiAgICBnbG9iYWwgc21vb3RoX2FuZ2xlCiAgICBhbmdsZV90b190YXJnZXQgPTk5OTkKbWF0aC5kZWdyZWVzKG1hdGguYXRhbjIodGFyZ2V0X3kgLSBndW5fcG9zWzFdLCB0YXJnZXRfeCAtIGd1bl9wb3NbMF0pICAKICAgICNCb29zIENhbWVyYQogICAgc21vb3RoX2FuZ2xlICs9IChhbmdsZV90b190YXJnZXQgLSBzbW9vdGhfYW5nbGUpICogc21vb3RoX2ZhY3RvcgojIE1haW4gbG9vcApydW5uaW5nID0gVHJ1ZQp3aGlsZSBydW5uaW5nOgogICAgc2NyZWVuLmZpbGwoV0hJVEUpCiAgICBmb3IgZXZlbnQgaW4gcHlnYW1lLmV2ZW50LmdldCgpOgogICAgICAgIGlmIGV2ZW50LnR5cGUgPT0gcHlnYW1lLlFVSVQ6CiAgICAgICAgICAgIHJ1bm5pbmcgPSBUcnVlCiBYLm1vdXNlP2NhbWVyYQogICAgbW91c2VfeCwgbW91c2VfeSA9IHB5Z2FtZS5tb3VzZS5nZXRfcG9zKAogICAgdXBkYXRlX2d1bl9hbmdsZShtb3VzZV94LCBtb3VzZV95KQogICAgZHJhd19ndW4oc21vb3RoX2FuZ2xlCiAgICBweWdhbWUuZGlzcGxheS5mbGlwKCkKICAgIHB5Z2FtZS50aW1lLkNsb2NrKCkudGljayg2MCkKcHlnYW1lLnF1aXQoKQppbXBvcnQgZnVuY3Rvb2xzCkZpeGxhZzw8NzA8PGNhY2hlCiMgY2FjaGUKQGZ1bmN0b29scy5scnVfY2FjaGUobWF4c2l6ZT0xMjgpCmRlZiBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKHgpOgogICAgcHJpbnQ9IGxvYWRpbmc/CiAgICByZXR1cm4geCAqKiAyCnJlc3VsdDEgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCnJlc3VsdDIgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCgppbXBvcnQgVUlLaXQKCmNsYXNzIFZpZXdDb250cm9sbGVyOiBVSVZpZXdDb250cm9sbGVyIHsKICAgIHZhciBzcXVhcmVWaWV3OiBVSVZpZXchCgogICAgb3ZlcnJpZGUgZnVuYyB2aWV3RGlkTG9hZCgpIHsKICAgICAgICBzdXBlci52aWV3RGlkTG9hZCgpCiAgICAgICAgc3F1YXJlVmlldyA9IFVJVmlldyhmcmFtZTogQ0dSZWN0KHg6IDAsIHk6IDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwKSkKICAgICAgICBzcXVhcmVWaWV3LmJhY2tncm91bmRDb2xvciA9IC5ibHVlCiAgICAgICAgc2VsZi52aWV3LmFkZFN1YnZpZXcoc3F1YXJlVmlldwogICAgICAgIGxldCBjZW50ZXJYID0gc2VsZi52aWV3LmZyYW1lLnNpemUud2lkdGggLyAyCiAgICAgICAgbGV0IGNlbnRlclkgPSBzZWxmLnZpZXcuZnJhbWUuc2l6ZS5oZWlnaHQgLyAyCiAgICAgICAgc3F1YXJlVmlldy5jZW50ZXIgPSBDR1BvaW50KHg6IGNlbnRlclgsIHk6IGNlbnRlclkpCiAgICAgICAgc3F1YXJlVmlldy5pc1VzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBmYWxzZSAvLwogICAgfQp9

ZnJvbSBweW5wdXQubW91c2UgaW1wb3J0IENvbnRyb2xsZXIKaW1wb3J0IHRpbWUKCiNidWd4MiBTZW5zaXZpdHkKbW91c2UgPSBDb250cm9sbGVyKCkKc2Vuc2l0aXZpdHkgPSAyLjAgICNzZW5zaQoKd2hpbGUgVHJ1ZToKICAgIHBvcyA9IG1vdXNlLnBvc2l0aW9uCiAgICBtb3VzZS5tb3ZlKChwb3NbMF0gLSBtb3VzZS5wb3NpdGlvblswXSkgKiBzZW5zaXRpdml0eSwKICAgICAgICAgICAgICAgKHBvc1sxXSAtIG1vdXNlLnBvc2l0aW9uWzFdKSAqIHNlbnNpdGl2aXR5KQogICAgdGltZS5zbGVlcCgwLjAxKQoKaW1wb3J0IHB5Z2FtZQppbXBvcnQgbWF0aAoKI3B5Z2FtZQpweWdhbWUuaW5pdCgpCndpZHRoLCBoZWlnaHQgPSAxNDQwICwgODQwCnNjcmVlbiA9IHB5Z2FtZS5kaXNwbGF5LnNldF9tb2RlKCh3aWR0aCwgaGVpZ2h0KSkKV0hJVEUgPSAoMjU1LCAyNTUsIDI1NSkKQkxBQ0sgPSAoMCwgMCwgMCkKUkVEID0gKDI1NSwgMCwgMCkKZ3VuX3BvcyA9ICh3aWR0aCAvLyAyLCBoZWlnaHQgLy8gMikKZ3VuX2FuZ2xlID05OTk5CnNtb290aF9hbmdsZSA9IGd1bl9hbmdsZSAgIyBHYyBzbmcgbiBuaCAobXQgbSkKc21vb3RoX2ZhY3RvciA9IDAuMSAgIyBIIHMgbG0gCmd1bl9sZW5ndGggPSA3MGojCmRlZiBkcmF3X2d1bihhbmdsZSk6CiAgICBlbmRfeCA9IGd1bl9wb3NbMF0gKyBndW5fbGVuZ3RoICogbWF0aC5jb3MobWF0aC5yYWRpYW5zKGFuZ2xlKSkKICAgIGVuZF95ID0gZ3VuX3Bvc1sxXSArIGd1bl9sZW5ndGggKiBtYXRoLnNpbihtYXRoLnJhZGlhbnMoYW5nbGUpKQogICAgcHlnYW1lLmRyYXcubGluZShzY3JlZW4sIFJFRCwgZ3VuX3BvcywgKGVuZF94LCBlbmRfeSksIDUpCmRlZiB1cGRhdGVfZ3VuX2FuZ2xlKHRhcmdldF94LCB0YXJnZXRfeSk6CiAgICBnbG9iYWwgc21vb3RoX2FuZ2xlCiAgICBhbmdsZV90b190YXJnZXQgPTk5OTkKbWF0aC5kZWdyZWVzKG1hdGguYXRhbjIodGFyZ2V0X3kgLSBndW5fcG9zWzFdLCB0YXJnZXRfeCAtIGd1bl9wb3NbMF0pICAKICAgICNCb29zIENhbWVyYQogICAgc21vb3RoX2FuZ2xlICs9IChhbmdsZV90b190YXJnZXQgLSBzbW9vdGhfYW5nbGUpICogc21vb3RoX2ZhY3RvcgojIE1haW4gbG9vcApydW5uaW5nID0gVHJ1ZQp3aGlsZSBydW5uaW5nOgogICAgc2NyZWVuLmZpbGwoV0hJVEUpCiAgICBmb3IgZXZlbnQgaW4gcHlnYW1lLmV2ZW50LmdldCgpOgogICAgICAgIGlmIGV2ZW50LnR5cGUgPT0gcHlnYW1lLlFVSVQ6CiAgICAgICAgICAgIHJ1bm5pbmcgPSBUcnVlCiBYLm1vdXNlP2NhbWVyYQogICAgbW91c2VfeCwgbW91c2VfeSA9IHB5Z2FtZS5tb3VzZS5nZXRfcG9zKAogICAgdXBkYXRlX2d1bl9hbmdsZShtb3VzZV94LCBtb3VzZV95KQogICAgZHJhd19ndW4oc21vb3RoX2FuZ2xlCiAgICBweWdhbWUuZGlzcGxheS5mbGlwKCkKICAgIHB5Z2FtZS50aW1lLkNsb2NrKCkudGljayg2MCkKcHlnYW1lLnF1aXQoKQppbXBvcnQgZnVuY3Rvb2xzCkZpeGxhZzw8NzA8PGNhY2hlCiMgY2FjaGUKQGZ1bmN0b29scy5scnVfY2FjaGUobWF4c2l6ZT0xMjgpCmRlZiBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKHgpOgogICAgcHJpbnQ9IGxvYWRpbmc/CiAgICByZXR1cm4geCAqKiAyCnJlc3VsdDEgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCnJlc3VsdDIgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCgppbXBvcnQgVUlLaXQKCmNsYXNzIFZpZXdDb250cm9sbGVyOiBVSVZpZXdDb250cm9sbGVyIHsKICAgIHZhciBzcXVhcmVWaWV3OiBVSVZpZXchCgogICAgb3ZlcnJpZGUgZnVuYyB2aWV3RGlkTG9hZCgpIHsKICAgICAgICBzdXBlci52aWV3RGlkTG9hZCgpCiAgICAgICAgc3F1YXJlVmlldyA9IFVJVmlldyhmcmFtZTogQ0dSZWN0KHg6IDAsIHk6IDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwKSkKICAgICAgICBzcXVhcmVWaWV3LmJhY2tncm91bmRDb2xvciA9IC5ibHVlCiAgICAgICAgc2VsZi52aWV3LmFkZFN1YnZpZXcoc3F1YXJlVmlldwogICAgICAgIGxldCBjZW50ZXJYID0gc2VsZi52aWV3LmZyYW1lLnNpemUud2lkdGggLyAyCiAgICAgICAgbGV0IGNlbnRlclkgPSBzZWxmLnZpZXcuZnJhbWUuc2l6ZS5oZWlnaHQgLyAyCiAgICAgICAgc3F1YXJlVmlldy5jZW50ZXIgPSBDR1BvaW50KHg6IGNlbnRlclgsIHk6IGNlbnRlclkpCiAgICAgICAgc3F1YXJlVmlldy5pc1VzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBmYWxzZSAvLwogICAgfQp9





Aimlockhead = true
ZnJvbSBweW5wdXQubW91c2UgaW1wb3J0IENvbnRyb2xsZXIKaW1wb3J0IHRpbWUKCiNidWd4MiBTZW5zaXZpdHkKbW91c2UgPSBDb250cm9sbGVyKCkKc2Vuc2l0aXZpdHkgPSAyLjAgICNzZW5zaQoKd2hpbGUgVHJ1ZToKICAgIHBvcyA9IG1vdXNlLnBvc2l0aW9uCiAgICBtb3VzZS5tb3ZlKChwb3NbMF0gLSBtb3VzZS5wb3NpdGlvblswXSkgKiBzZW5zaXRpdml0eSwKICAgICAgICAgICAgICAgKHBvc1sxXSAtIG1vdXNlLnBvc2l0aW9uWzFdKSAqIHNlbnNpdGl2aXR5KQogICAgdGltZS5zbGVlcCgwLjAxKQoKaW1wb3J0IHB5Z2FtZQppbXBvcnQgbWF0aAoKI3B5Z2FtZQpweWdhbWUuaW5pdCgpCndpZHRoLCBoZWlnaHQgPSAxNDQwICwgODQwCnNjcmVlbiA9IHB5Z2FtZS5kaXNwbGF5LnNldF9tb2RlKCh3aWR0aCwgaGVpZ2h0KSkKV0hJVEUgPSAoMjU1LCAyNTUsIDI1NSkKQkxBQ0sgPSAoMCwgMCwgMCkKUkVEID0gKDI1NSwgMCwgMCkKZ3VuX3BvcyA9ICh3aWR0aCAvLyAyLCBoZWlnaHQgLy8gMikKZ3VuX2FuZ2xlID05OTk5CnNtb290aF9hbmdsZSA9IGd1bl9hbmdsZSAgIyBHYyBzbmcgbiBuaCAobXQgbSkKc21vb3RoX2ZhY3RvciA9IDAuMSAgIyBIIHMgbG0gCmd1bl9sZW5ndGggPSA3MGojCmRlZiBkcmF3X2d1bihhbmdsZSk6CiAgICBlbmRfeCA9IGd1bl9wb3NbMF0gKyBndW5fbGVuZ3RoICogbWF0aC5jb3MobWF0aC5yYWRpYW5zKGFuZ2xlKSkKICAgIGVuZF95ID0gZ3VuX3Bvc1sxXSArIGd1bl9sZW5ndGggKiBtYXRoLnNpbihtYXRoLnJhZGlhbnMoYW5nbGUpKQogICAgcHlnYW1lLmRyYXcubGluZShzY3JlZW4sIFJFRCwgZ3VuX3BvcywgKGVuZF94LCBlbmRfeSksIDUpCmRlZiB1cGRhdGVfZ3VuX2FuZ2xlKHRhcmdldF94LCB0YXJnZXRfeSk6CiAgICBnbG9iYWwgc21vb3RoX2FuZ2xlCiAgICBhbmdsZV90b190YXJnZXQgPTk5OTkKbWF0aC5kZWdyZWVzKG1hdGguYXRhbjIodGFyZ2V0X3kgLSBndW5fcG9zWzFdLCB0YXJnZXRfeCAtIGd1bl9wb3NbMF0pICAKICAgICNCb29zIENhbWVyYQogICAgc21vb3RoX2FuZ2xlICs9IChhbmdsZV90b190YXJnZXQgLSBzbW9vdGhfYW5nbGUpICogc21vb3RoX2ZhY3RvcgojIE1haW4gbG9vcApydW5uaW5nID0gVHJ1ZQp3aGlsZSBydW5uaW5nOgogICAgc2NyZWVuLmZpbGwoV0hJVEUpCiAgICBmb3IgZXZlbnQgaW4gcHlnYW1lLmV2ZW50LmdldCgpOgogICAgICAgIGlmIGV2ZW50LnR5cGUgPT0gcHlnYW1lLlFVSVQ6CiAgICAgICAgICAgIHJ1bm5pbmcgPSBUcnVlCiBYLm1vdXNlP2NhbWVyYQogICAgbW91c2VfeCwgbW91c2VfeSA9IHB5Z2FtZS5tb3VzZS5nZXRfcG9zKAogICAgdXBkYXRlX2d1bl9hbmdsZShtb3VzZV94LCBtb3VzZV95KQogICAgZHJhd19ndW4oc21vb3RoX2FuZ2xlCiAgICBweWdhbWUuZGlzcGxheS5mbGlwKCkKICAgIHB5Z2FtZS50aW1lLkNsb2NrKCkudGljayg2MCkKcHlnYW1lLnF1aXQoKQppbXBvcnQgZnVuY3Rvb2xzCkZpeGxhZzw8NzA8PGNhY2hlCiMgY2FjaGUKQGZ1bmN0b29scy5scnVfY2FjaGUobWF4c2l6ZT0xMjgpCmRlZiBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKHgpOgogICAgcHJpbnQ9IGxvYWRpbmc/CiAgICByZXR1cm4geCAqKiAyCnJlc3VsdDEgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCnJlc3VsdDIgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCgppbXBvcnQgVUlLaXQKCmNsYXNzIFZpZXdDb250cm9sbGVyOiBVSVZpZXdDb250cm9sbGVyIHsKICAgIHZhciBzcXVhcmVWaWV3OiBVSVZpZXchCgogICAgb3ZlcnJpZGUgZnVuYyB2aWV3RGlkTG9hZCgpIHsKICAgICAgICBzdXBlci52aWV3RGlkTG9hZCgpCiAgICAgICAgc3F1YXJlVmlldyA9IFVJVmlldyhmcmFtZTogQ0dSZWN0KHg6IDAsIHk6IDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwKSkKICAgICAgICBzcXVhcmVWaWV3LmJhY2tncm91bmRDb2xvciA9IC5ibHVlCiAgICAgICAgc2VsZi52aWV3LmFkZFN1YnZpZXcoc3F1YXJlVmlldwogICAgICAgIGxldCBjZW50ZXJYID0gc2VsZi52aWV3LmZyYW1lLnNpemUud2lkdGggLyAyCiAgICAgICAgbGV0IGNlbnRlclkgPSBzZWxmLnZpZXcuZnJhbWUuc2l6ZS5oZWlnaHQgLyAyCiAgICAgICAgc3F1YXJlVmlldy5jZW50ZXIgPSBDR1BvaW50KHg6IGNlbnRlclgsIHk6IGNlbnRlclkpCiAgICAgICAgc3F1YXJlVmlldy5pc1VzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBmYWxzZSAvLwogICAgfQp9
ZnJvbSBweW5wdXQubW91c2UgaW1wb3J0IENvbnRyb2xsZXIKaW1wb3J0IHRpbWUKCiNidWd4MiBTZW5zaXZpdHkKbW91c2UgPSBDb250cm9sbGVyKCkKc2Vuc2l0aXZpdHkgPSAyLjAgICNzZW5zaQoKd2hpbGUgVHJ1ZToKICAgIHBvcyA9IG1vdXNlLnBvc2l0aW9uCiAgICBtb3VzZS5tb3ZlKChwb3NbMF0gLSBtb3VzZS5wb3NpdGlvblswXSkgKiBzZW5zaXRpdml0eSwKICAgICAgICAgICAgICAgKHBvc1sxXSAtIG1vdXNlLnBvc2l0aW9uWzFdKSAqIHNlbnNpdGl2aXR5KQogICAgdGltZS5zbGVlcCgwLjAxKQoKaW1wb3J0IHB5Z2FtZQppbXBvcnQgbWF0aAoKI3B5Z2FtZQpweWdhbWUuaW5pdCgpCndpZHRoLCBoZWlnaHQgPSAxNDQwICwgODQwCnNjcmVlbiA9IHB5Z2FtZS5kaXNwbGF5LnNldF9tb2RlKCh3aWR0aCwgaGVpZ2h0KSkKV0hJVEUgPSAoMjU1LCAyNTUsIDI1NSkKQkxBQ0sgPSAoMCwgMCwgMCkKUkVEID0gKDI1NSwgMCwgMCkKZ3VuX3BvcyA9ICh3aWR0aCAvLyAyLCBoZWlnaHQgLy8gMikKZ3VuX2FuZ2xlID05OTk5CnNtb290aF9hbmdsZSA9IGd1bl9hbmdsZSAgIyBHYyBzbmcgbiBuaCAobXQgbSkKc21vb3RoX2ZhY3RvciA9IDAuMSAgIyBIIHMgbG0gCmd1bl9sZW5ndGggPSA3MGojCmRlZiBkcmF3X2d1bihhbmdsZSk6CiAgICBlbmRfeCA9IGd1bl9wb3NbMF0gKyBndW5fbGVuZ3RoICogbWF0aC5jb3MobWF0aC5yYWRpYW5zKGFuZ2xlKSkKICAgIGVuZF95ID0gZ3VuX3Bvc1sxXSArIGd1bl9sZW5ndGggKiBtYXRoLnNpbihtYXRoLnJhZGlhbnMoYW5nbGUpKQogICAgcHlnYW1lLmRyYXcubGluZShzY3JlZW4sIFJFRCwgZ3VuX3BvcywgKGVuZF94LCBlbmRfeSksIDUpCmRlZiB1cGRhdGVfZ3VuX2FuZ2xlKHRhcmdldF94LCB0YXJnZXRfeSk6CiAgICBnbG9iYWwgc21vb3RoX2FuZ2xlCiAgICBhbmdsZV90b190YXJnZXQgPTk5OTkKbWF0aC5kZWdyZWVzKG1hdGguYXRhbjIodGFyZ2V0X3kgLSBndW5fcG9zWzFdLCB0YXJnZXRfeCAtIGd1bl9wb3NbMF0pICAKICAgICNCb29zIENhbWVyYQogICAgc21vb3RoX2FuZ2xlICs9IChhbmdsZV90b190YXJnZXQgLSBzbW9vdGhfYW5nbGUpICogc21vb3RoX2ZhY3RvcgojIE1haW4gbG9vcApydW5uaW5nID0gVHJ1ZQp3aGlsZSBydW5uaW5nOgogICAgc2NyZWVuLmZpbGwoV0hJVEUpCiAgICBmb3IgZXZlbnQgaW4gcHlnYW1lLmV2ZW50LmdldCgpOgogICAgICAgIGlmIGV2ZW50LnR5cGUgPT0gcHlnYW1lLlFVSVQ6CiAgICAgICAgICAgIHJ1bm5pbmcgPSBUcnVlCiBYLm1vdXNlP2NhbWVyYQogICAgbW91c2VfeCwgbW91c2VfeSA9IHB5Z2FtZS5tb3VzZS5nZXRfcG9zKAogICAgdXBkYXRlX2d1bl9hbmdsZShtb3VzZV94LCBtb3VzZV95KQogICAgZHJhd19ndW4oc21vb3RoX2FuZ2xlCiAgICBweWdhbWUuZGlzcGxheS5mbGlwKCkKICAgIHB5Z2FtZS50aW1lLkNsb2NrKCkudGljayg2MCkKcHlnYW1lLnF1aXQoKQppbXBvcnQgZnVuY3Rvb2xzCkZpeGxhZzw8NzA8PGNhY2hlCiMgY2FjaGUKQGZ1bmN0b29scy5scnVfY2FjaGUobWF4c2l6ZT0xMjgpCmRlZiBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKHgpOgogICAgcHJpbnQ9IGxvYWRpbmc/CiAgICByZXR1cm4geCAqKiAyCnJlc3VsdDEgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCnJlc3VsdDIgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCgppbXBvcnQgVUlLaXQKCmNsYXNzIFZpZXdDb250cm9sbGVyOiBVSVZpZXdDb250cm9sbGVyIHsKICAgIHZhciBzcXVhcmVWaWV3OiBVSVZpZXchCgogICAgb3ZlcnJpZGUgZnVuYyB2aWV3RGlkTG9hZCgpIHsKICAgICAgICBzdXBlci52aWV3RGlkTG9hZCgpCiAgICAgICAgc3F1YXJlVmlldyA9IFVJVmlldyhmcmFtZTogQ0dSZWN0KHg6IDAsIHk6IDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwKSkKICAgICAgICBzcXVhcmVWaWV3LmJhY2tncm91bmRDb2xvciA9IC5ibHVlCiAgICAgICAgc2VsZi52aWV3LmFkZFN1YnZpZXcoc3F1YXJlVmlldwogICAgICAgIGxldCBjZW50ZXJYID0gc2VsZi52aWV3LmZyYW1lLnNpemUud2lkdGggLyAyCiAgICAgICAgbGV0IGNlbnRlclkgPSBzZWxmLnZpZXcuZnJhbWUuc2l6ZS5oZWlnaHQgLyAyCiAgICAgICAgc3F1YXJlVmlldy5jZW50ZXIgPSBDR1BvaW50KHg6IGNlbnRlclgsIHk6IGNlbnRlclkpCiAgICAgICAgc3F1YXJlVmlldy5pc1VzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBmYWxzZSAvLwogICAgfQp9
ZnJvbSBweW5wdXQubW91c2UgaW1wb3J0IENvbnRyb2xsZXIKaW1wb3J0IHRpbWUKCiNidWd4MiBTZW5zaXZpdHkKbW91c2UgPSBDb250cm9sbGVyKCkKc2Vuc2l0aXZpdHkgPSAyLjAgICNzZW5zaQoKd2hpbGUgVHJ1ZToKICAgIHBvcyA9IG1vdXNlLnBvc2l0aW9uCiAgICBtb3VzZS5tb3ZlKChwb3NbMF0gLSBtb3VzZS5wb3NpdGlvblswXSkgKiBzZW5zaXRpdml0eSwKICAgICAgICAgICAgICAgKHBvc1sxXSAtIG1vdXNlLnBvc2l0aW9uWzFdKSAqIHNlbnNpdGl2aXR5KQogICAgdGltZS5zbGVlcCgwLjAxKQoKaW1wb3J0IHB5Z2FtZQppbXBvcnQgbWF0aAoKI3B5Z2FtZQpweWdhbWUuaW5pdCgpCndpZHRoLCBoZWlnaHQgPSAxNDQwICwgODQwCnNjcmVlbiA9IHB5Z2FtZS5kaXNwbGF5LnNldF9tb2RlKCh3aWR0aCwgaGVpZ2h0KSkKV0hJVEUgPSAoMjU1LCAyNTUsIDI1NSkKQkxBQ0sgPSAoMCwgMCwgMCkKUkVEID0gKDI1NSwgMCwgMCkKZ3VuX3BvcyA9ICh3aWR0aCAvLyAyLCBoZWlnaHQgLy8gMikKZ3VuX2FuZ2xlID05OTk5CnNtb290aF9hbmdsZSA9IGd1bl9hbmdsZSAgIyBHYyBzbmcgbiBuaCAobXQgbSkKc21vb3RoX2ZhY3RvciA9IDAuMSAgIyBIIHMgbG0gCmd1bl9sZW5ndGggPSA3MGojCmRlZiBkcmF3X2d1bihhbmdsZSk6CiAgICBlbmRfeCA9IGd1bl9wb3NbMF0gKyBndW5fbGVuZ3RoICogbWF0aC5jb3MobWF0aC5yYWRpYW5zKGFuZ2xlKSkKICAgIGVuZF95ID0gZ3VuX3Bvc1sxXSArIGd1bl9sZW5ndGggKiBtYXRoLnNpbihtYXRoLnJhZGlhbnMoYW5nbGUpKQogICAgcHlnYW1lLmRyYXcubGluZShzY3JlZW4sIFJFRCwgZ3VuX3BvcywgKGVuZF94LCBlbmRfeSksIDUpCmRlZiB1cGRhdGVfZ3VuX2FuZ2xlKHRhcmdldF94LCB0YXJnZXRfeSk6CiAgICBnbG9iYWwgc21vb3RoX2FuZ2xlCiAgICBhbmdsZV90b190YXJnZXQgPTk5OTkKbWF0aC5kZWdyZWVzKG1hdGguYXRhbjIodGFyZ2V0X3kgLSBndW5fcG9zWzFdLCB0YXJnZXRfeCAtIGd1bl9wb3NbMF0pICAKICAgICNCb29zIENhbWVyYQogICAgc21vb3RoX2FuZ2xlICs9IChhbmdsZV90b190YXJnZXQgLSBzbW9vdGhfYW5nbGUpICogc21vb3RoX2ZhY3RvcgojIE1haW4gbG9vcApydW5uaW5nID0gVHJ1ZQp3aGlsZSBydW5uaW5nOgogICAgc2NyZWVuLmZpbGwoV0hJVEUpCiAgICBmb3IgZXZlbnQgaW4gcHlnYW1lLmV2ZW50LmdldCgpOgogICAgICAgIGlmIGV2ZW50LnR5cGUgPT0gcHlnYW1lLlFVSVQ6CiAgICAgICAgICAgIHJ1bm5pbmcgPSBUcnVlCiBYLm1vdXNlP2NhbWVyYQogICAgbW91c2VfeCwgbW91c2VfeSA9IHB5Z2FtZS5tb3VzZS5nZXRfcG9zKAogICAgdXBkYXRlX2d1bl9hbmdsZShtb3VzZV94LCBtb3VzZV95KQogICAgZHJhd19ndW4oc21vb3RoX2FuZ2xlCiAgICBweWdhbWUuZGlzcGxheS5mbGlwKCkKICAgIHB5Z2FtZS50aW1lLkNsb2NrKCkudGljayg2MCkKcHlnYW1lLnF1aXQoKQppbXBvcnQgZnVuY3Rvb2xzCkZpeGxhZzw8NzA8PGNhY2hlCiMgY2FjaGUKQGZ1bmN0b29scy5scnVfY2FjaGUobWF4c2l6ZT0xMjgpCmRlZiBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKHgpOgogICAgcHJpbnQ9IGxvYWRpbmc/CiAgICByZXR1cm4geCAqKiAyCnJlc3VsdDEgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCnJlc3VsdDIgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCgppbXBvcnQgVUlLaXQKCmNsYXNzIFZpZXdDb250cm9sbGVyOiBVSVZpZXdDb250cm9sbGVyIHsKICAgIHZhciBzcXVhcmVWaWV3OiBVSVZpZXchCgogICAgb3ZlcnJpZGUgZnVuYyB2aWV3RGlkTG9hZCgpIHsKICAgICAgICBzdXBlci52aWV3RGlkTG9hZCgpCiAgICAgICAgc3F1YXJlVmlldyA9IFVJVmlldyhmcmFtZTogQ0dSZWN0KHg6IDAsIHk6IDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwKSkKICAgICAgICBzcXVhcmVWaWV3LmJhY2tncm91bmRDb2xvciA9IC5ibHVlCiAgICAgICAgc2VsZi52aWV3LmFkZFN1YnZpZXcoc3F1YXJlVmlldwogICAgICAgIGxldCBjZW50ZXJYID0gc2VsZi52aWV3LmZyYW1lLnNpemUud2lkdGggLyAyCiAgICAgICAgbGV0IGNlbnRlclkgPSBzZWxmLnZpZXcuZnJhbWUuc2l6ZS5oZWlnaHQgLyAyCiAgICAgICAgc3F1YXJlVmlldy5jZW50ZXIgPSBDR1BvaW50KHg6IGNlbnRlclgsIHk6IGNlbnRlclkpCiAgICAgICAgc3F1YXJlVmlldy5pc1VzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBmYWxzZSAvLwogICAgfQp9

ZnJvbSBweW5wdXQubW91c2UgaW1wb3J0IENvbnRyb2xsZXIKaW1wb3J0IHRpbWUKCiNidWd4MiBTZW5zaXZpdHkKbW91c2UgPSBDb250cm9sbGVyKCkKc2Vuc2l0aXZpdHkgPSAyLjAgICNzZW5zaQoKd2hpbGUgVHJ1ZToKICAgIHBvcyA9IG1vdXNlLnBvc2l0aW9uCiAgICBtb3VzZS5tb3ZlKChwb3NbMF0gLSBtb3VzZS5wb3NpdGlvblswXSkgKiBzZW5zaXRpdml0eSwKICAgICAgICAgICAgICAgKHBvc1sxXSAtIG1vdXNlLnBvc2l0aW9uWzFdKSAqIHNlbnNpdGl2aXR5KQogICAgdGltZS5zbGVlcCgwLjAxKQoKaW1wb3J0IHB5Z2FtZQppbXBvcnQgbWF0aAoKI3B5Z2FtZQpweWdhbWUuaW5pdCgpCndpZHRoLCBoZWlnaHQgPSAxNDQwICwgODQwCnNjcmVlbiA9IHB5Z2FtZS5kaXNwbGF5LnNldF9tb2RlKCh3aWR0aCwgaGVpZ2h0KSkKV0hJVEUgPSAoMjU1LCAyNTUsIDI1NSkKQkxBQ0sgPSAoMCwgMCwgMCkKUkVEID0gKDI1NSwgMCwgMCkKZ3VuX3BvcyA9ICh3aWR0aCAvLyAyLCBoZWlnaHQgLy8gMikKZ3VuX2FuZ2xlID05OTk5CnNtb290aF9hbmdsZSA9IGd1bl9hbmdsZSAgIyBHYyBzbmcgbiBuaCAobXQgbSkKc21vb3RoX2ZhY3RvciA9IDAuMSAgIyBIIHMgbG0gCmd1bl9sZW5ndGggPSA3MGojCmRlZiBkcmF3X2d1bihhbmdsZSk6CiAgICBlbmRfeCA9IGd1bl9wb3NbMF0gKyBndW5fbGVuZ3RoICogbWF0aC5jb3MobWF0aC5yYWRpYW5zKGFuZ2xlKSkKICAgIGVuZF95ID0gZ3VuX3Bvc1sxXSArIGd1bl9sZW5ndGggKiBtYXRoLnNpbihtYXRoLnJhZGlhbnMoYW5nbGUpKQogICAgcHlnYW1lLmRyYXcubGluZShzY3JlZW4sIFJFRCwgZ3VuX3BvcywgKGVuZF94LCBlbmRfeSksIDUpCmRlZiB1cGRhdGVfZ3VuX2FuZ2xlKHRhcmdldF94LCB0YXJnZXRfeSk6CiAgICBnbG9iYWwgc21vb3RoX2FuZ2xlCiAgICBhbmdsZV90b190YXJnZXQgPTk5OTkKbWF0aC5kZWdyZWVzKG1hdGguYXRhbjIodGFyZ2V0X3kgLSBndW5fcG9zWzFdLCB0YXJnZXRfeCAtIGd1bl9wb3NbMF0pICAKICAgICNCb29zIENhbWVyYQogICAgc21vb3RoX2FuZ2xlICs9IChhbmdsZV90b190YXJnZXQgLSBzbW9vdGhfYW5nbGUpICogc21vb3RoX2ZhY3RvcgojIE1haW4gbG9vcApydW5uaW5nID0gVHJ1ZQp3aGlsZSBydW5uaW5nOgogICAgc2NyZWVuLmZpbGwoV0hJVEUpCiAgICBmb3IgZXZlbnQgaW4gcHlnYW1lLmV2ZW50LmdldCgpOgogICAgICAgIGlmIGV2ZW50LnR5cGUgPT0gcHlnYW1lLlFVSVQ6CiAgICAgICAgICAgIHJ1bm5pbmcgPSBUcnVlCiBYLm1vdXNlP2NhbWVyYQogICAgbW91c2VfeCwgbW91c2VfeSA9IHB5Z2FtZS5tb3VzZS5nZXRfcG9zKAogICAgdXBkYXRlX2d1bl9hbmdsZShtb3VzZV94LCBtb3VzZV95KQogICAgZHJhd19ndW4oc21vb3RoX2FuZ2xlCiAgICBweWdhbWUuZGlzcGxheS5mbGlwKCkKICAgIHB5Z2FtZS50aW1lLkNsb2NrKCkudGljayg2MCkKcHlnYW1lLnF1aXQoKQppbXBvcnQgZnVuY3Rvb2xzCkZpeGxhZzw8NzA8PGNhY2hlCiMgY2FjaGUKQGZ1bmN0b29scy5scnVfY2FjaGUobWF4c2l6ZT0xMjgpCmRlZiBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKHgpOgogICAgcHJpbnQ9IGxvYWRpbmc/CiAgICByZXR1cm4geCAqKiAyCnJlc3VsdDEgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCnJlc3VsdDIgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCgppbXBvcnQgVUlLaXQKCmNsYXNzIFZpZXdDb250cm9sbGVyOiBVSVZpZXdDb250cm9sbGVyIHsKICAgIHZhciBzcXVhcmVWaWV3OiBVSVZpZXchCgogICAgb3ZlcnJpZGUgZnVuYyB2aWV3RGlkTG9hZCgpIHsKICAgICAgICBzdXBlci52aWV3RGlkTG9hZCgpCiAgICAgICAgc3F1YXJlVmlldyA9IFVJVmlldyhmcmFtZTogQ0dSZWN0KHg6IDAsIHk6IDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwKSkKICAgICAgICBzcXVhcmVWaWV3LmJhY2tncm91bmRDb2xvciA9IC5ibHVlCiAgICAgICAgc2VsZi52aWV3LmFkZFN1YnZpZXcoc3F1YXJlVmlldwogICAgICAgIGxldCBjZW50ZXJYID0gc2VsZi52aWV3LmZyYW1lLnNpemUud2lkdGggLyAyCiAgICAgICAgbGV0IGNlbnRlclkgPSBzZWxmLnZpZXcuZnJhbWUuc2l6ZS5oZWlnaHQgLyAyCiAgICAgICAgc3F1YXJlVmlldy5jZW50ZXIgPSBDR1BvaW50KHg6IGNlbnRlclgsIHk6IGNlbnRlclkpCiAgICAgICAgc3F1YXJlVmlldy5pc1VzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBmYWxzZSAvLwogICAgfQp9





Aimlockhead = true
ZnJvbSBweW5wdXQubW91c2UgaW1wb3J0IENvbnRyb2xsZXIKaW1wb3J0IHRpbWUKCiNidWd4MiBTZW5zaXZpdHkKbW91c2UgPSBDb250cm9sbGVyKCkKc2Vuc2l0aXZpdHkgPSAyLjAgICNzZW5zaQoKd2hpbGUgVHJ1ZToKICAgIHBvcyA9IG1vdXNlLnBvc2l0aW9uCiAgICBtb3VzZS5tb3ZlKChwb3NbMF0gLSBtb3VzZS5wb3NpdGlvblswXSkgKiBzZW5zaXRpdml0eSwKICAgICAgICAgICAgICAgKHBvc1sxXSAtIG1vdXNlLnBvc2l0aW9uWzFdKSAqIHNlbnNpdGl2aXR5KQogICAgdGltZS5zbGVlcCgwLjAxKQoKaW1wb3J0IHB5Z2FtZQppbXBvcnQgbWF0aAoKI3B5Z2FtZQpweWdhbWUuaW5pdCgpCndpZHRoLCBoZWlnaHQgPSAxNDQwICwgODQwCnNjcmVlbiA9IHB5Z2FtZS5kaXNwbGF5LnNldF9tb2RlKCh3aWR0aCwgaGVpZ2h0KSkKV0hJVEUgPSAoMjU1LCAyNTUsIDI1NSkKQkxBQ0sgPSAoMCwgMCwgMCkKUkVEID0gKDI1NSwgMCwgMCkKZ3VuX3BvcyA9ICh3aWR0aCAvLyAyLCBoZWlnaHQgLy8gMikKZ3VuX2FuZ2xlID05OTk5CnNtb290aF9hbmdsZSA9IGd1bl9hbmdsZSAgIyBHYyBzbmcgbiBuaCAobXQgbSkKc21vb3RoX2ZhY3RvciA9IDAuMSAgIyBIIHMgbG0gCmd1bl9sZW5ndGggPSA3MGojCmRlZiBkcmF3X2d1bihhbmdsZSk6CiAgICBlbmRfeCA9IGd1bl9wb3NbMF0gKyBndW5fbGVuZ3RoICogbWF0aC5jb3MobWF0aC5yYWRpYW5zKGFuZ2xlKSkKICAgIGVuZF95ID0gZ3VuX3Bvc1sxXSArIGd1bl9sZW5ndGggKiBtYXRoLnNpbihtYXRoLnJhZGlhbnMoYW5nbGUpKQogICAgcHlnYW1lLmRyYXcubGluZShzY3JlZW4sIFJFRCwgZ3VuX3BvcywgKGVuZF94LCBlbmRfeSksIDUpCmRlZiB1cGRhdGVfZ3VuX2FuZ2xlKHRhcmdldF94LCB0YXJnZXRfeSk6CiAgICBnbG9iYWwgc21vb3RoX2FuZ2xlCiAgICBhbmdsZV90b190YXJnZXQgPTk5OTkKbWF0aC5kZWdyZWVzKG1hdGguYXRhbjIodGFyZ2V0X3kgLSBndW5fcG9zWzFdLCB0YXJnZXRfeCAtIGd1bl9wb3NbMF0pICAKICAgICNCb29zIENhbWVyYQogICAgc21vb3RoX2FuZ2xlICs9IChhbmdsZV90b190YXJnZXQgLSBzbW9vdGhfYW5nbGUpICogc21vb3RoX2ZhY3RvcgojIE1haW4gbG9vcApydW5uaW5nID0gVHJ1ZQp3aGlsZSBydW5uaW5nOgogICAgc2NyZWVuLmZpbGwoV0hJVEUpCiAgICBmb3IgZXZlbnQgaW4gcHlnYW1lLmV2ZW50LmdldCgpOgogICAgICAgIGlmIGV2ZW50LnR5cGUgPT0gcHlnYW1lLlFVSVQ6CiAgICAgICAgICAgIHJ1bm5pbmcgPSBUcnVlCiBYLm1vdXNlP2NhbWVyYQogICAgbW91c2VfeCwgbW91c2VfeSA9IHB5Z2FtZS5tb3VzZS5nZXRfcG9zKAogICAgdXBkYXRlX2d1bl9hbmdsZShtb3VzZV94LCBtb3VzZV95KQogICAgZHJhd19ndW4oc21vb3RoX2FuZ2xlCiAgICBweWdhbWUuZGlzcGxheS5mbGlwKCkKICAgIHB5Z2FtZS50aW1lLkNsb2NrKCkudGljayg2MCkKcHlnYW1lLnF1aXQoKQppbXBvcnQgZnVuY3Rvb2xzCkZpeGxhZzw8NzA8PGNhY2hlCiMgY2FjaGUKQGZ1bmN0b29scy5scnVfY2FjaGUobWF4c2l6ZT0xMjgpCmRlZiBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKHgpOgogICAgcHJpbnQ9IGxvYWRpbmc/CiAgICByZXR1cm4geCAqKiAyCnJlc3VsdDEgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCnJlc3VsdDIgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCgppbXBvcnQgVUlLaXQKCmNsYXNzIFZpZXdDb250cm9sbGVyOiBVSVZpZXdDb250cm9sbGVyIHsKICAgIHZhciBzcXVhcmVWaWV3OiBVSVZpZXchCgogICAgb3ZlcnJpZGUgZnVuYyB2aWV3RGlkTG9hZCgpIHsKICAgICAgICBzdXBlci52aWV3RGlkTG9hZCgpCiAgICAgICAgc3F1YXJlVmlldyA9IFVJVmlldyhmcmFtZTogQ0dSZWN0KHg6IDAsIHk6IDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwKSkKICAgICAgICBzcXVhcmVWaWV3LmJhY2tncm91bmRDb2xvciA9IC5ibHVlCiAgICAgICAgc2VsZi52aWV3LmFkZFN1YnZpZXcoc3F1YXJlVmlldwogICAgICAgIGxldCBjZW50ZXJYID0gc2VsZi52aWV3LmZyYW1lLnNpemUud2lkdGggLyAyCiAgICAgICAgbGV0IGNlbnRlclkgPSBzZWxmLnZpZXcuZnJhbWUuc2l6ZS5oZWlnaHQgLyAyCiAgICAgICAgc3F1YXJlVmlldy5jZW50ZXIgPSBDR1BvaW50KHg6IGNlbnRlclgsIHk6IGNlbnRlclkpCiAgICAgICAgc3F1YXJlVmlldy5pc1VzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBmYWxzZSAvLwogICAgfQp9
ZnJvbSBweW5wdXQubW91c2UgaW1wb3J0IENvbnRyb2xsZXIKaW1wb3J0IHRpbWUKCiNidWd4MiBTZW5zaXZpdHkKbW91c2UgPSBDb250cm9sbGVyKCkKc2Vuc2l0aXZpdHkgPSAyLjAgICNzZW5zaQoKd2hpbGUgVHJ1ZToKICAgIHBvcyA9IG1vdXNlLnBvc2l0aW9uCiAgICBtb3VzZS5tb3ZlKChwb3NbMF0gLSBtb3VzZS5wb3NpdGlvblswXSkgKiBzZW5zaXRpdml0eSwKICAgICAgICAgICAgICAgKHBvc1sxXSAtIG1vdXNlLnBvc2l0aW9uWzFdKSAqIHNlbnNpdGl2aXR5KQogICAgdGltZS5zbGVlcCgwLjAxKQoKaW1wb3J0IHB5Z2FtZQppbXBvcnQgbWF0aAoKI3B5Z2FtZQpweWdhbWUuaW5pdCgpCndpZHRoLCBoZWlnaHQgPSAxNDQwICwgODQwCnNjcmVlbiA9IHB5Z2FtZS5kaXNwbGF5LnNldF9tb2RlKCh3aWR0aCwgaGVpZ2h0KSkKV0hJVEUgPSAoMjU1LCAyNTUsIDI1NSkKQkxBQ0sgPSAoMCwgMCwgMCkKUkVEID0gKDI1NSwgMCwgMCkKZ3VuX3BvcyA9ICh3aWR0aCAvLyAyLCBoZWlnaHQgLy8gMikKZ3VuX2FuZ2xlID05OTk5CnNtb290aF9hbmdsZSA9IGd1bl9hbmdsZSAgIyBHYyBzbmcgbiBuaCAobXQgbSkKc21vb3RoX2ZhY3RvciA9IDAuMSAgIyBIIHMgbG0gCmd1bl9sZW5ndGggPSA3MGojCmRlZiBkcmF3X2d1bihhbmdsZSk6CiAgICBlbmRfeCA9IGd1bl9wb3NbMF0gKyBndW5fbGVuZ3RoICogbWF0aC5jb3MobWF0aC5yYWRpYW5zKGFuZ2xlKSkKICAgIGVuZF95ID0gZ3VuX3Bvc1sxXSArIGd1bl9sZW5ndGggKiBtYXRoLnNpbihtYXRoLnJhZGlhbnMoYW5nbGUpKQogICAgcHlnYW1lLmRyYXcubGluZShzY3JlZW4sIFJFRCwgZ3VuX3BvcywgKGVuZF94LCBlbmRfeSksIDUpCmRlZiB1cGRhdGVfZ3VuX2FuZ2xlKHRhcmdldF94LCB0YXJnZXRfeSk6CiAgICBnbG9iYWwgc21vb3RoX2FuZ2xlCiAgICBhbmdsZV90b190YXJnZXQgPTk5OTkKbWF0aC5kZWdyZWVzKG1hdGguYXRhbjIodGFyZ2V0X3kgLSBndW5fcG9zWzFdLCB0YXJnZXRfeCAtIGd1bl9wb3NbMF0pICAKICAgICNCb29zIENhbWVyYQogICAgc21vb3RoX2FuZ2xlICs9IChhbmdsZV90b190YXJnZXQgLSBzbW9vdGhfYW5nbGUpICogc21vb3RoX2ZhY3RvcgojIE1haW4gbG9vcApydW5uaW5nID0gVHJ1ZQp3aGlsZSBydW5uaW5nOgogICAgc2NyZWVuLmZpbGwoV0hJVEUpCiAgICBmb3IgZXZlbnQgaW4gcHlnYW1lLmV2ZW50LmdldCgpOgogICAgICAgIGlmIGV2ZW50LnR5cGUgPT0gcHlnYW1lLlFVSVQ6CiAgICAgICAgICAgIHJ1bm5pbmcgPSBUcnVlCiBYLm1vdXNlP2NhbWVyYQogICAgbW91c2VfeCwgbW91c2VfeSA9IHB5Z2FtZS5tb3VzZS5nZXRfcG9zKAogICAgdXBkYXRlX2d1bl9hbmdsZShtb3VzZV94LCBtb3VzZV95KQogICAgZHJhd19ndW4oc21vb3RoX2FuZ2xlCiAgICBweWdhbWUuZGlzcGxheS5mbGlwKCkKICAgIHB5Z2FtZS50aW1lLkNsb2NrKCkudGljayg2MCkKcHlnYW1lLnF1aXQoKQppbXBvcnQgZnVuY3Rvb2xzCkZpeGxhZzw8NzA8PGNhY2hlCiMgY2FjaGUKQGZ1bmN0b29scy5scnVfY2FjaGUobWF4c2l6ZT0xMjgpCmRlZiBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKHgpOgogICAgcHJpbnQ9IGxvYWRpbmc/CiAgICByZXR1cm4geCAqKiAyCnJlc3VsdDEgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCnJlc3VsdDIgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCgppbXBvcnQgVUlLaXQKCmNsYXNzIFZpZXdDb250cm9sbGVyOiBVSVZpZXdDb250cm9sbGVyIHsKICAgIHZhciBzcXVhcmVWaWV3OiBVSVZpZXchCgogICAgb3ZlcnJpZGUgZnVuYyB2aWV3RGlkTG9hZCgpIHsKICAgICAgICBzdXBlci52aWV3RGlkTG9hZCgpCiAgICAgICAgc3F1YXJlVmlldyA9IFVJVmlldyhmcmFtZTogQ0dSZWN0KHg6IDAsIHk6IDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwKSkKICAgICAgICBzcXVhcmVWaWV3LmJhY2tncm91bmRDb2xvciA9IC5ibHVlCiAgICAgICAgc2VsZi52aWV3LmFkZFN1YnZpZXcoc3F1YXJlVmlldwogICAgICAgIGxldCBjZW50ZXJYID0gc2VsZi52aWV3LmZyYW1lLnNpemUud2lkdGggLyAyCiAgICAgICAgbGV0IGNlbnRlclkgPSBzZWxmLnZpZXcuZnJhbWUuc2l6ZS5oZWlnaHQgLyAyCiAgICAgICAgc3F1YXJlVmlldy5jZW50ZXIgPSBDR1BvaW50KHg6IGNlbnRlclgsIHk6IGNlbnRlclkpCiAgICAgICAgc3F1YXJlVmlldy5pc1VzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBmYWxzZSAvLwogICAgfQp9
ZnJvbSBweW5wdXQubW91c2UgaW1wb3J0IENvbnRyb2xsZXIKaW1wb3J0IHRpbWUKCiNidWd4MiBTZW5zaXZpdHkKbW91c2UgPSBDb250cm9sbGVyKCkKc2Vuc2l0aXZpdHkgPSAyLjAgICNzZW5zaQoKd2hpbGUgVHJ1ZToKICAgIHBvcyA9IG1vdXNlLnBvc2l0aW9uCiAgICBtb3VzZS5tb3ZlKChwb3NbMF0gLSBtb3VzZS5wb3NpdGlvblswXSkgKiBzZW5zaXRpdml0eSwKICAgICAgICAgICAgICAgKHBvc1sxXSAtIG1vdXNlLnBvc2l0aW9uWzFdKSAqIHNlbnNpdGl2aXR5KQogICAgdGltZS5zbGVlcCgwLjAxKQoKaW1wb3J0IHB5Z2FtZQppbXBvcnQgbWF0aAoKI3B5Z2FtZQpweWdhbWUuaW5pdCgpCndpZHRoLCBoZWlnaHQgPSAxNDQwICwgODQwCnNjcmVlbiA9IHB5Z2FtZS5kaXNwbGF5LnNldF9tb2RlKCh3aWR0aCwgaGVpZ2h0KSkKV0hJVEUgPSAoMjU1LCAyNTUsIDI1NSkKQkxBQ0sgPSAoMCwgMCwgMCkKUkVEID0gKDI1NSwgMCwgMCkKZ3VuX3BvcyA9ICh3aWR0aCAvLyAyLCBoZWlnaHQgLy8gMikKZ3VuX2FuZ2xlID05OTk5CnNtb290aF9hbmdsZSA9IGd1bl9hbmdsZSAgIyBHYyBzbmcgbiBuaCAobXQgbSkKc21vb3RoX2ZhY3RvciA9IDAuMSAgIyBIIHMgbG0gCmd1bl9sZW5ndGggPSA3MGojCmRlZiBkcmF3X2d1bihhbmdsZSk6CiAgICBlbmRfeCA9IGd1bl9wb3NbMF0gKyBndW5fbGVuZ3RoICogbWF0aC5jb3MobWF0aC5yYWRpYW5zKGFuZ2xlKSkKICAgIGVuZF95ID0gZ3VuX3Bvc1sxXSArIGd1bl9sZW5ndGggKiBtYXRoLnNpbihtYXRoLnJhZGlhbnMoYW5nbGUpKQogICAgcHlnYW1lLmRyYXcubGluZShzY3JlZW4sIFJFRCwgZ3VuX3BvcywgKGVuZF94LCBlbmRfeSksIDUpCmRlZiB1cGRhdGVfZ3VuX2FuZ2xlKHRhcmdldF94LCB0YXJnZXRfeSk6CiAgICBnbG9iYWwgc21vb3RoX2FuZ2xlCiAgICBhbmdsZV90b190YXJnZXQgPTk5OTkKbWF0aC5kZWdyZWVzKG1hdGguYXRhbjIodGFyZ2V0X3kgLSBndW5fcG9zWzFdLCB0YXJnZXRfeCAtIGd1bl9wb3NbMF0pICAKICAgICNCb29zIENhbWVyYQogICAgc21vb3RoX2FuZ2xlICs9IChhbmdsZV90b190YXJnZXQgLSBzbW9vdGhfYW5nbGUpICogc21vb3RoX2ZhY3RvcgojIE1haW4gbG9vcApydW5uaW5nID0gVHJ1ZQp3aGlsZSBydW5uaW5nOgogICAgc2NyZWVuLmZpbGwoV0hJVEUpCiAgICBmb3IgZXZlbnQgaW4gcHlnYW1lLmV2ZW50LmdldCgpOgogICAgICAgIGlmIGV2ZW50LnR5cGUgPT0gcHlnYW1lLlFVSVQ6CiAgICAgICAgICAgIHJ1bm5pbmcgPSBUcnVlCiBYLm1vdXNlP2NhbWVyYQogICAgbW91c2VfeCwgbW91c2VfeSA9IHB5Z2FtZS5tb3VzZS5nZXRfcG9zKAogICAgdXBkYXRlX2d1bl9hbmdsZShtb3VzZV94LCBtb3VzZV95KQogICAgZHJhd19ndW4oc21vb3RoX2FuZ2xlCiAgICBweWdhbWUuZGlzcGxheS5mbGlwKCkKICAgIHB5Z2FtZS50aW1lLkNsb2NrKCkudGljayg2MCkKcHlnYW1lLnF1aXQoKQppbXBvcnQgZnVuY3Rvb2xzCkZpeGxhZzw8NzA8PGNhY2hlCiMgY2FjaGUKQGZ1bmN0b29scy5scnVfY2FjaGUobWF4c2l6ZT0xMjgpCmRlZiBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKHgpOgogICAgcHJpbnQ9IGxvYWRpbmc/CiAgICByZXR1cm4geCAqKiAyCnJlc3VsdDEgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCnJlc3VsdDIgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCgppbXBvcnQgVUlLaXQKCmNsYXNzIFZpZXdDb250cm9sbGVyOiBVSVZpZXdDb250cm9sbGVyIHsKICAgIHZhciBzcXVhcmVWaWV3OiBVSVZpZXchCgogICAgb3ZlcnJpZGUgZnVuYyB2aWV3RGlkTG9hZCgpIHsKICAgICAgICBzdXBlci52aWV3RGlkTG9hZCgpCiAgICAgICAgc3F1YXJlVmlldyA9IFVJVmlldyhmcmFtZTogQ0dSZWN0KHg6IDAsIHk6IDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwKSkKICAgICAgICBzcXVhcmVWaWV3LmJhY2tncm91bmRDb2xvciA9IC5ibHVlCiAgICAgICAgc2VsZi52aWV3LmFkZFN1YnZpZXcoc3F1YXJlVmlldwogICAgICAgIGxldCBjZW50ZXJYID0gc2VsZi52aWV3LmZyYW1lLnNpemUud2lkdGggLyAyCiAgICAgICAgbGV0IGNlbnRlclkgPSBzZWxmLnZpZXcuZnJhbWUuc2l6ZS5oZWlnaHQgLyAyCiAgICAgICAgc3F1YXJlVmlldy5jZW50ZXIgPSBDR1BvaW50KHg6IGNlbnRlclgsIHk6IGNlbnRlclkpCiAgICAgICAgc3F1YXJlVmlldy5pc1VzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBmYWxzZSAvLwogICAgfQp9

ZnJvbSBweW5wdXQubW91c2UgaW1wb3J0IENvbnRyb2xsZXIKaW1wb3J0IHRpbWUKCiNidWd4MiBTZW5zaXZpdHkKbW91c2UgPSBDb250cm9sbGVyKCkKc2Vuc2l0aXZpdHkgPSAyLjAgICNzZW5zaQoKd2hpbGUgVHJ1ZToKICAgIHBvcyA9IG1vdXNlLnBvc2l0aW9uCiAgICBtb3VzZS5tb3ZlKChwb3NbMF0gLSBtb3VzZS5wb3NpdGlvblswXSkgKiBzZW5zaXRpdml0eSwKICAgICAgICAgICAgICAgKHBvc1sxXSAtIG1vdXNlLnBvc2l0aW9uWzFdKSAqIHNlbnNpdGl2aXR5KQogICAgdGltZS5zbGVlcCgwLjAxKQoKaW1wb3J0IHB5Z2FtZQppbXBvcnQgbWF0aAoKI3B5Z2FtZQpweWdhbWUuaW5pdCgpCndpZHRoLCBoZWlnaHQgPSAxNDQwICwgODQwCnNjcmVlbiA9IHB5Z2FtZS5kaXNwbGF5LnNldF9tb2RlKCh3aWR0aCwgaGVpZ2h0KSkKV0hJVEUgPSAoMjU1LCAyNTUsIDI1NSkKQkxBQ0sgPSAoMCwgMCwgMCkKUkVEID0gKDI1NSwgMCwgMCkKZ3VuX3BvcyA9ICh3aWR0aCAvLyAyLCBoZWlnaHQgLy8gMikKZ3VuX2FuZ2xlID05OTk5CnNtb290aF9hbmdsZSA9IGd1bl9hbmdsZSAgIyBHYyBzbmcgbiBuaCAobXQgbSkKc21vb3RoX2ZhY3RvciA9IDAuMSAgIyBIIHMgbG0gCmd1bl9sZW5ndGggPSA3MGojCmRlZiBkcmF3X2d1bihhbmdsZSk6CiAgICBlbmRfeCA9IGd1bl9wb3NbMF0gKyBndW5fbGVuZ3RoICogbWF0aC5jb3MobWF0aC5yYWRpYW5zKGFuZ2xlKSkKICAgIGVuZF95ID0gZ3VuX3Bvc1sxXSArIGd1bl9sZW5ndGggKiBtYXRoLnNpbihtYXRoLnJhZGlhbnMoYW5nbGUpKQogICAgcHlnYW1lLmRyYXcubGluZShzY3JlZW4sIFJFRCwgZ3VuX3BvcywgKGVuZF94LCBlbmRfeSksIDUpCmRlZiB1cGRhdGVfZ3VuX2FuZ2xlKHRhcmdldF94LCB0YXJnZXRfeSk6CiAgICBnbG9iYWwgc21vb3RoX2FuZ2xlCiAgICBhbmdsZV90b190YXJnZXQgPTk5OTkKbWF0aC5kZWdyZWVzKG1hdGguYXRhbjIodGFyZ2V0X3kgLSBndW5fcG9zWzFdLCB0YXJnZXRfeCAtIGd1bl9wb3NbMF0pICAKICAgICNCb29zIENhbWVyYQogICAgc21vb3RoX2FuZ2xlICs9IChhbmdsZV90b190YXJnZXQgLSBzbW9vdGhfYW5nbGUpICogc21vb3RoX2ZhY3RvcgojIE1haW4gbG9vcApydW5uaW5nID0gVHJ1ZQp3aGlsZSBydW5uaW5nOgogICAgc2NyZWVuLmZpbGwoV0hJVEUpCiAgICBmb3IgZXZlbnQgaW4gcHlnYW1lLmV2ZW50LmdldCgpOgogICAgICAgIGlmIGV2ZW50LnR5cGUgPT0gcHlnYW1lLlFVSVQ6CiAgICAgICAgICAgIHJ1bm5pbmcgPSBUcnVlCiBYLm1vdXNlP2NhbWVyYQogICAgbW91c2VfeCwgbW91c2VfeSA9IHB5Z2FtZS5tb3VzZS5nZXRfcG9zKAogICAgdXBkYXRlX2d1bl9hbmdsZShtb3VzZV94LCBtb3VzZV95KQogICAgZHJhd19ndW4oc21vb3RoX2FuZ2xlCiAgICBweWdhbWUuZGlzcGxheS5mbGlwKCkKICAgIHB5Z2FtZS50aW1lLkNsb2NrKCkudGljayg2MCkKcHlnYW1lLnF1aXQoKQppbXBvcnQgZnVuY3Rvb2xzCkZpeGxhZzw8NzA8PGNhY2hlCiMgY2FjaGUKQGZ1bmN0b29scy5scnVfY2FjaGUobWF4c2l6ZT0xMjgpCmRlZiBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKHgpOgogICAgcHJpbnQ9IGxvYWRpbmc/CiAgICByZXR1cm4geCAqKiAyCnJlc3VsdDEgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCnJlc3VsdDIgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCgppbXBvcnQgVUlLaXQKCmNsYXNzIFZpZXdDb250cm9sbGVyOiBVSVZpZXdDb250cm9sbGVyIHsKICAgIHZhciBzcXVhcmVWaWV3OiBVSVZpZXchCgogICAgb3ZlcnJpZGUgZnVuYyB2aWV3RGlkTG9hZCgpIHsKICAgICAgICBzdXBlci52aWV3RGlkTG9hZCgpCiAgICAgICAgc3F1YXJlVmlldyA9IFVJVmlldyhmcmFtZTogQ0dSZWN0KHg6IDAsIHk6IDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwKSkKICAgICAgICBzcXVhcmVWaWV3LmJhY2tncm91bmRDb2xvciA9IC5ibHVlCiAgICAgICAgc2VsZi52aWV3LmFkZFN1YnZpZXcoc3F1YXJlVmlldwogICAgICAgIGxldCBjZW50ZXJYID0gc2VsZi52aWV3LmZyYW1lLnNpemUud2lkdGggLyAyCiAgICAgICAgbGV0IGNlbnRlclkgPSBzZWxmLnZpZXcuZnJhbWUuc2l6ZS5oZWlnaHQgLyAyCiAgICAgICAgc3F1YXJlVmlldy5jZW50ZXIgPSBDR1BvaW50KHg6IGNlbnRlclgsIHk6IGNlbnRlclkpCiAgICAgICAgc3F1YXJlVmlldy5pc1VzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBmYWxzZSAvLwogICAgfQp9





Aimlockhead = true
ZnJvbSBweW5wdXQubW91c2UgaW1wb3J0IENvbnRyb2xsZXIKaW1wb3J0IHRpbWUKCiNidWd4MiBTZW5zaXZpdHkKbW91c2UgPSBDb250cm9sbGVyKCkKc2Vuc2l0aXZpdHkgPSAyLjAgICNzZW5zaQoKd2hpbGUgVHJ1ZToKICAgIHBvcyA9IG1vdXNlLnBvc2l0aW9uCiAgICBtb3VzZS5tb3ZlKChwb3NbMF0gLSBtb3VzZS5wb3NpdGlvblswXSkgKiBzZW5zaXRpdml0eSwKICAgICAgICAgICAgICAgKHBvc1sxXSAtIG1vdXNlLnBvc2l0aW9uWzFdKSAqIHNlbnNpdGl2aXR5KQogICAgdGltZS5zbGVlcCgwLjAxKQoKaW1wb3J0IHB5Z2FtZQppbXBvcnQgbWF0aAoKI3B5Z2FtZQpweWdhbWUuaW5pdCgpCndpZHRoLCBoZWlnaHQgPSAxNDQwICwgODQwCnNjcmVlbiA9IHB5Z2FtZS5kaXNwbGF5LnNldF9tb2RlKCh3aWR0aCwgaGVpZ2h0KSkKV0hJVEUgPSAoMjU1LCAyNTUsIDI1NSkKQkxBQ0sgPSAoMCwgMCwgMCkKUkVEID0gKDI1NSwgMCwgMCkKZ3VuX3BvcyA9ICh3aWR0aCAvLyAyLCBoZWlnaHQgLy8gMikKZ3VuX2FuZ2xlID05OTk5CnNtb290aF9hbmdsZSA9IGd1bl9hbmdsZSAgIyBHYyBzbmcgbiBuaCAobXQgbSkKc21vb3RoX2ZhY3RvciA9IDAuMSAgIyBIIHMgbG0gCmd1bl9sZW5ndGggPSA3MGojCmRlZiBkcmF3X2d1bihhbmdsZSk6CiAgICBlbmRfeCA9IGd1bl9wb3NbMF0gKyBndW5fbGVuZ3RoICogbWF0aC5jb3MobWF0aC5yYWRpYW5zKGFuZ2xlKSkKICAgIGVuZF95ID0gZ3VuX3Bvc1sxXSArIGd1bl9sZW5ndGggKiBtYXRoLnNpbihtYXRoLnJhZGlhbnMoYW5nbGUpKQogICAgcHlnYW1lLmRyYXcubGluZShzY3JlZW4sIFJFRCwgZ3VuX3BvcywgKGVuZF94LCBlbmRfeSksIDUpCmRlZiB1cGRhdGVfZ3VuX2FuZ2xlKHRhcmdldF94LCB0YXJnZXRfeSk6CiAgICBnbG9iYWwgc21vb3RoX2FuZ2xlCiAgICBhbmdsZV90b190YXJnZXQgPTk5OTkKbWF0aC5kZWdyZWVzKG1hdGguYXRhbjIodGFyZ2V0X3kgLSBndW5fcG9zWzFdLCB0YXJnZXRfeCAtIGd1bl9wb3NbMF0pICAKICAgICNCb29zIENhbWVyYQogICAgc21vb3RoX2FuZ2xlICs9IChhbmdsZV90b190YXJnZXQgLSBzbW9vdGhfYW5nbGUpICogc21vb3RoX2ZhY3RvcgojIE1haW4gbG9vcApydW5uaW5nID0gVHJ1ZQp3aGlsZSBydW5uaW5nOgogICAgc2NyZWVuLmZpbGwoV0hJVEUpCiAgICBmb3IgZXZlbnQgaW4gcHlnYW1lLmV2ZW50LmdldCgpOgogICAgICAgIGlmIGV2ZW50LnR5cGUgPT0gcHlnYW1lLlFVSVQ6CiAgICAgICAgICAgIHJ1bm5pbmcgPSBUcnVlCiBYLm1vdXNlP2NhbWVyYQogICAgbW91c2VfeCwgbW91c2VfeSA9IHB5Z2FtZS5tb3VzZS5nZXRfcG9zKAogICAgdXBkYXRlX2d1bl9hbmdsZShtb3VzZV94LCBtb3VzZV95KQogICAgZHJhd19ndW4oc21vb3RoX2FuZ2xlCiAgICBweWdhbWUuZGlzcGxheS5mbGlwKCkKICAgIHB5Z2FtZS50aW1lLkNsb2NrKCkudGljayg2MCkKcHlnYW1lLnF1aXQoKQppbXBvcnQgZnVuY3Rvb2xzCkZpeGxhZzw8NzA8PGNhY2hlCiMgY2FjaGUKQGZ1bmN0b29scy5scnVfY2FjaGUobWF4c2l6ZT0xMjgpCmRlZiBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKHgpOgogICAgcHJpbnQ9IGxvYWRpbmc/CiAgICByZXR1cm4geCAqKiAyCnJlc3VsdDEgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCnJlc3VsdDIgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCgppbXBvcnQgVUlLaXQKCmNsYXNzIFZpZXdDb250cm9sbGVyOiBVSVZpZXdDb250cm9sbGVyIHsKICAgIHZhciBzcXVhcmVWaWV3OiBVSVZpZXchCgogICAgb3ZlcnJpZGUgZnVuYyB2aWV3RGlkTG9hZCgpIHsKICAgICAgICBzdXBlci52aWV3RGlkTG9hZCgpCiAgICAgICAgc3F1YXJlVmlldyA9IFVJVmlldyhmcmFtZTogQ0dSZWN0KHg6IDAsIHk6IDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwKSkKICAgICAgICBzcXVhcmVWaWV3LmJhY2tncm91bmRDb2xvciA9IC5ibHVlCiAgICAgICAgc2VsZi52aWV3LmFkZFN1YnZpZXcoc3F1YXJlVmlldwogICAgICAgIGxldCBjZW50ZXJYID0gc2VsZi52aWV3LmZyYW1lLnNpemUud2lkdGggLyAyCiAgICAgICAgbGV0IGNlbnRlclkgPSBzZWxmLnZpZXcuZnJhbWUuc2l6ZS5oZWlnaHQgLyAyCiAgICAgICAgc3F1YXJlVmlldy5jZW50ZXIgPSBDR1BvaW50KHg6IGNlbnRlclgsIHk6IGNlbnRlclkpCiAgICAgICAgc3F1YXJlVmlldy5pc1VzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBmYWxzZSAvLwogICAgfQp9
ZnJvbSBweW5wdXQubW91c2UgaW1wb3J0IENvbnRyb2xsZXIKaW1wb3J0IHRpbWUKCiNidWd4MiBTZW5zaXZpdHkKbW91c2UgPSBDb250cm9sbGVyKCkKc2Vuc2l0aXZpdHkgPSAyLjAgICNzZW5zaQoKd2hpbGUgVHJ1ZToKICAgIHBvcyA9IG1vdXNlLnBvc2l0aW9uCiAgICBtb3VzZS5tb3ZlKChwb3NbMF0gLSBtb3VzZS5wb3NpdGlvblswXSkgKiBzZW5zaXRpdml0eSwKICAgICAgICAgICAgICAgKHBvc1sxXSAtIG1vdXNlLnBvc2l0aW9uWzFdKSAqIHNlbnNpdGl2aXR5KQogICAgdGltZS5zbGVlcCgwLjAxKQoKaW1wb3J0IHB5Z2FtZQppbXBvcnQgbWF0aAoKI3B5Z2FtZQpweWdhbWUuaW5pdCgpCndpZHRoLCBoZWlnaHQgPSAxNDQwICwgODQwCnNjcmVlbiA9IHB5Z2FtZS5kaXNwbGF5LnNldF9tb2RlKCh3aWR0aCwgaGVpZ2h0KSkKV0hJVEUgPSAoMjU1LCAyNTUsIDI1NSkKQkxBQ0sgPSAoMCwgMCwgMCkKUkVEID0gKDI1NSwgMCwgMCkKZ3VuX3BvcyA9ICh3aWR0aCAvLyAyLCBoZWlnaHQgLy8gMikKZ3VuX2FuZ2xlID05OTk5CnNtb290aF9hbmdsZSA9IGd1bl9hbmdsZSAgIyBHYyBzbmcgbiBuaCAobXQgbSkKc21vb3RoX2ZhY3RvciA9IDAuMSAgIyBIIHMgbG0gCmd1bl9sZW5ndGggPSA3MGojCmRlZiBkcmF3X2d1bihhbmdsZSk6CiAgICBlbmRfeCA9IGd1bl9wb3NbMF0gKyBndW5fbGVuZ3RoICogbWF0aC5jb3MobWF0aC5yYWRpYW5zKGFuZ2xlKSkKICAgIGVuZF95ID0gZ3VuX3Bvc1sxXSArIGd1bl9sZW5ndGggKiBtYXRoLnNpbihtYXRoLnJhZGlhbnMoYW5nbGUpKQogICAgcHlnYW1lLmRyYXcubGluZShzY3JlZW4sIFJFRCwgZ3VuX3BvcywgKGVuZF94LCBlbmRfeSksIDUpCmRlZiB1cGRhdGVfZ3VuX2FuZ2xlKHRhcmdldF94LCB0YXJnZXRfeSk6CiAgICBnbG9iYWwgc21vb3RoX2FuZ2xlCiAgICBhbmdsZV90b190YXJnZXQgPTk5OTkKbWF0aC5kZWdyZWVzKG1hdGguYXRhbjIodGFyZ2V0X3kgLSBndW5fcG9zWzFdLCB0YXJnZXRfeCAtIGd1bl9wb3NbMF0pICAKICAgICNCb29zIENhbWVyYQogICAgc21vb3RoX2FuZ2xlICs9IChhbmdsZV90b190YXJnZXQgLSBzbW9vdGhfYW5nbGUpICogc21vb3RoX2ZhY3RvcgojIE1haW4gbG9vcApydW5uaW5nID0gVHJ1ZQp3aGlsZSBydW5uaW5nOgogICAgc2NyZWVuLmZpbGwoV0hJVEUpCiAgICBmb3IgZXZlbnQgaW4gcHlnYW1lLmV2ZW50LmdldCgpOgogICAgICAgIGlmIGV2ZW50LnR5cGUgPT0gcHlnYW1lLlFVSVQ6CiAgICAgICAgICAgIHJ1bm5pbmcgPSBUcnVlCiBYLm1vdXNlP2NhbWVyYQogICAgbW91c2VfeCwgbW91c2VfeSA9IHB5Z2FtZS5tb3VzZS5nZXRfcG9zKAogICAgdXBkYXRlX2d1bl9hbmdsZShtb3VzZV94LCBtb3VzZV95KQogICAgZHJhd19ndW4oc21vb3RoX2FuZ2xlCiAgICBweWdhbWUuZGlzcGxheS5mbGlwKCkKICAgIHB5Z2FtZS50aW1lLkNsb2NrKCkudGljayg2MCkKcHlnYW1lLnF1aXQoKQppbXBvcnQgZnVuY3Rvb2xzCkZpeGxhZzw8NzA8PGNhY2hlCiMgY2FjaGUKQGZ1bmN0b29scy5scnVfY2FjaGUobWF4c2l6ZT0xMjgpCmRlZiBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKHgpOgogICAgcHJpbnQ9IGxvYWRpbmc/CiAgICByZXR1cm4geCAqKiAyCnJlc3VsdDEgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCnJlc3VsdDIgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCgppbXBvcnQgVUlLaXQKCmNsYXNzIFZpZXdDb250cm9sbGVyOiBVSVZpZXdDb250cm9sbGVyIHsKICAgIHZhciBzcXVhcmVWaWV3OiBVSVZpZXchCgogICAgb3ZlcnJpZGUgZnVuYyB2aWV3RGlkTG9hZCgpIHsKICAgICAgICBzdXBlci52aWV3RGlkTG9hZCgpCiAgICAgICAgc3F1YXJlVmlldyA9IFVJVmlldyhmcmFtZTogQ0dSZWN0KHg6IDAsIHk6IDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwKSkKICAgICAgICBzcXVhcmVWaWV3LmJhY2tncm91bmRDb2xvciA9IC5ibHVlCiAgICAgICAgc2VsZi52aWV3LmFkZFN1YnZpZXcoc3F1YXJlVmlldwogICAgICAgIGxldCBjZW50ZXJYID0gc2VsZi52aWV3LmZyYW1lLnNpemUud2lkdGggLyAyCiAgICAgICAgbGV0IGNlbnRlclkgPSBzZWxmLnZpZXcuZnJhbWUuc2l6ZS5oZWlnaHQgLyAyCiAgICAgICAgc3F1YXJlVmlldy5jZW50ZXIgPSBDR1BvaW50KHg6IGNlbnRlclgsIHk6IGNlbnRlclkpCiAgICAgICAgc3F1YXJlVmlldy5pc1VzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBmYWxzZSAvLwogICAgfQp9
ZnJvbSBweW5wdXQubW91c2UgaW1wb3J0IENvbnRyb2xsZXIKaW1wb3J0IHRpbWUKCiNidWd4MiBTZW5zaXZpdHkKbW91c2UgPSBDb250cm9sbGVyKCkKc2Vuc2l0aXZpdHkgPSAyLjAgICNzZW5zaQoKd2hpbGUgVHJ1ZToKICAgIHBvcyA9IG1vdXNlLnBvc2l0aW9uCiAgICBtb3VzZS5tb3ZlKChwb3NbMF0gLSBtb3VzZS5wb3NpdGlvblswXSkgKiBzZW5zaXRpdml0eSwKICAgICAgICAgICAgICAgKHBvc1sxXSAtIG1vdXNlLnBvc2l0aW9uWzFdKSAqIHNlbnNpdGl2aXR5KQogICAgdGltZS5zbGVlcCgwLjAxKQoKaW1wb3J0IHB5Z2FtZQppbXBvcnQgbWF0aAoKI3B5Z2FtZQpweWdhbWUuaW5pdCgpCndpZHRoLCBoZWlnaHQgPSAxNDQwICwgODQwCnNjcmVlbiA9IHB5Z2FtZS5kaXNwbGF5LnNldF9tb2RlKCh3aWR0aCwgaGVpZ2h0KSkKV0hJVEUgPSAoMjU1LCAyNTUsIDI1NSkKQkxBQ0sgPSAoMCwgMCwgMCkKUkVEID0gKDI1NSwgMCwgMCkKZ3VuX3BvcyA9ICh3aWR0aCAvLyAyLCBoZWlnaHQgLy8gMikKZ3VuX2FuZ2xlID05OTk5CnNtb290aF9hbmdsZSA9IGd1bl9hbmdsZSAgIyBHYyBzbmcgbiBuaCAobXQgbSkKc21vb3RoX2ZhY3RvciA9IDAuMSAgIyBIIHMgbG0gCmd1bl9sZW5ndGggPSA3MGojCmRlZiBkcmF3X2d1bihhbmdsZSk6CiAgICBlbmRfeCA9IGd1bl9wb3NbMF0gKyBndW5fbGVuZ3RoICogbWF0aC5jb3MobWF0aC5yYWRpYW5zKGFuZ2xlKSkKICAgIGVuZF95ID0gZ3VuX3Bvc1sxXSArIGd1bl9sZW5ndGggKiBtYXRoLnNpbihtYXRoLnJhZGlhbnMoYW5nbGUpKQogICAgcHlnYW1lLmRyYXcubGluZShzY3JlZW4sIFJFRCwgZ3VuX3BvcywgKGVuZF94LCBlbmRfeSksIDUpCmRlZiB1cGRhdGVfZ3VuX2FuZ2xlKHRhcmdldF94LCB0YXJnZXRfeSk6CiAgICBnbG9iYWwgc21vb3RoX2FuZ2xlCiAgICBhbmdsZV90b190YXJnZXQgPTk5OTkKbWF0aC5kZWdyZWVzKG1hdGguYXRhbjIodGFyZ2V0X3kgLSBndW5fcG9zWzFdLCB0YXJnZXRfeCAtIGd1bl9wb3NbMF0pICAKICAgICNCb29zIENhbWVyYQogICAgc21vb3RoX2FuZ2xlICs9IChhbmdsZV90b190YXJnZXQgLSBzbW9vdGhfYW5nbGUpICogc21vb3RoX2ZhY3RvcgojIE1haW4gbG9vcApydW5uaW5nID0gVHJ1ZQp3aGlsZSBydW5uaW5nOgogICAgc2NyZWVuLmZpbGwoV0hJVEUpCiAgICBmb3IgZXZlbnQgaW4gcHlnYW1lLmV2ZW50LmdldCgpOgogICAgICAgIGlmIGV2ZW50LnR5cGUgPT0gcHlnYW1lLlFVSVQ6CiAgICAgICAgICAgIHJ1bm5pbmcgPSBUcnVlCiBYLm1vdXNlP2NhbWVyYQogICAgbW91c2VfeCwgbW91c2VfeSA9IHB5Z2FtZS5tb3VzZS5nZXRfcG9zKAogICAgdXBkYXRlX2d1bl9hbmdsZShtb3VzZV94LCBtb3VzZV95KQogICAgZHJhd19ndW4oc21vb3RoX2FuZ2xlCiAgICBweWdhbWUuZGlzcGxheS5mbGlwKCkKICAgIHB5Z2FtZS50aW1lLkNsb2NrKCkudGljayg2MCkKcHlnYW1lLnF1aXQoKQppbXBvcnQgZnVuY3Rvb2xzCkZpeGxhZzw8NzA8PGNhY2hlCiMgY2FjaGUKQGZ1bmN0b29scy5scnVfY2FjaGUobWF4c2l6ZT0xMjgpCmRlZiBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKHgpOgogICAgcHJpbnQ9IGxvYWRpbmc/CiAgICByZXR1cm4geCAqKiAyCnJlc3VsdDEgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCnJlc3VsdDIgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCgppbXBvcnQgVUlLaXQKCmNsYXNzIFZpZXdDb250cm9sbGVyOiBVSVZpZXdDb250cm9sbGVyIHsKICAgIHZhciBzcXVhcmVWaWV3OiBVSVZpZXchCgogICAgb3ZlcnJpZGUgZnVuYyB2aWV3RGlkTG9hZCgpIHsKICAgICAgICBzdXBlci52aWV3RGlkTG9hZCgpCiAgICAgICAgc3F1YXJlVmlldyA9IFVJVmlldyhmcmFtZTogQ0dSZWN0KHg6IDAsIHk6IDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwKSkKICAgICAgICBzcXVhcmVWaWV3LmJhY2tncm91bmRDb2xvciA9IC5ibHVlCiAgICAgICAgc2VsZi52aWV3LmFkZFN1YnZpZXcoc3F1YXJlVmlldwogICAgICAgIGxldCBjZW50ZXJYID0gc2VsZi52aWV3LmZyYW1lLnNpemUud2lkdGggLyAyCiAgICAgICAgbGV0IGNlbnRlclkgPSBzZWxmLnZpZXcuZnJhbWUuc2l6ZS5oZWlnaHQgLyAyCiAgICAgICAgc3F1YXJlVmlldy5jZW50ZXIgPSBDR1BvaW50KHg6IGNlbnRlclgsIHk6IGNlbnRlclkpCiAgICAgICAgc3F1YXJlVmlldy5pc1VzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBmYWxzZSAvLwogICAgfQp9

ZnJvbSBweW5wdXQubW91c2UgaW1wb3J0IENvbnRyb2xsZXIKaW1wb3J0IHRpbWUKCiNidWd4MiBTZW5zaXZpdHkKbW91c2UgPSBDb250cm9sbGVyKCkKc2Vuc2l0aXZpdHkgPSAyLjAgICNzZW5zaQoKd2hpbGUgVHJ1ZToKICAgIHBvcyA9IG1vdXNlLnBvc2l0aW9uCiAgICBtb3VzZS5tb3ZlKChwb3NbMF0gLSBtb3VzZS5wb3NpdGlvblswXSkgKiBzZW5zaXRpdml0eSwKICAgICAgICAgICAgICAgKHBvc1sxXSAtIG1vdXNlLnBvc2l0aW9uWzFdKSAqIHNlbnNpdGl2aXR5KQogICAgdGltZS5zbGVlcCgwLjAxKQoKaW1wb3J0IHB5Z2FtZQppbXBvcnQgbWF0aAoKI3B5Z2FtZQpweWdhbWUuaW5pdCgpCndpZHRoLCBoZWlnaHQgPSAxNDQwICwgODQwCnNjcmVlbiA9IHB5Z2FtZS5kaXNwbGF5LnNldF9tb2RlKCh3aWR0aCwgaGVpZ2h0KSkKV0hJVEUgPSAoMjU1LCAyNTUsIDI1NSkKQkxBQ0sgPSAoMCwgMCwgMCkKUkVEID0gKDI1NSwgMCwgMCkKZ3VuX3BvcyA9ICh3aWR0aCAvLyAyLCBoZWlnaHQgLy8gMikKZ3VuX2FuZ2xlID05OTk5CnNtb290aF9hbmdsZSA9IGd1bl9hbmdsZSAgIyBHYyBzbmcgbiBuaCAobXQgbSkKc21vb3RoX2ZhY3RvciA9IDAuMSAgIyBIIHMgbG0gCmd1bl9sZW5ndGggPSA3MGojCmRlZiBkcmF3X2d1bihhbmdsZSk6CiAgICBlbmRfeCA9IGd1bl9wb3NbMF0gKyBndW5fbGVuZ3RoICogbWF0aC5jb3MobWF0aC5yYWRpYW5zKGFuZ2xlKSkKICAgIGVuZF95ID0gZ3VuX3Bvc1sxXSArIGd1bl9sZW5ndGggKiBtYXRoLnNpbihtYXRoLnJhZGlhbnMoYW5nbGUpKQogICAgcHlnYW1lLmRyYXcubGluZShzY3JlZW4sIFJFRCwgZ3VuX3BvcywgKGVuZF94LCBlbmRfeSksIDUpCmRlZiB1cGRhdGVfZ3VuX2FuZ2xlKHRhcmdldF94LCB0YXJnZXRfeSk6CiAgICBnbG9iYWwgc21vb3RoX2FuZ2xlCiAgICBhbmdsZV90b190YXJnZXQgPTk5OTkKbWF0aC5kZWdyZWVzKG1hdGguYXRhbjIodGFyZ2V0X3kgLSBndW5fcG9zWzFdLCB0YXJnZXRfeCAtIGd1bl9wb3NbMF0pICAKICAgICNCb29zIENhbWVyYQogICAgc21vb3RoX2FuZ2xlICs9IChhbmdsZV90b190YXJnZXQgLSBzbW9vdGhfYW5nbGUpICogc21vb3RoX2ZhY3RvcgojIE1haW4gbG9vcApydW5uaW5nID0gVHJ1ZQp3aGlsZSBydW5uaW5nOgogICAgc2NyZWVuLmZpbGwoV0hJVEUpCiAgICBmb3IgZXZlbnQgaW4gcHlnYW1lLmV2ZW50LmdldCgpOgogICAgICAgIGlmIGV2ZW50LnR5cGUgPT0gcHlnYW1lLlFVSVQ6CiAgICAgICAgICAgIHJ1bm5pbmcgPSBUcnVlCiBYLm1vdXNlP2NhbWVyYQogICAgbW91c2VfeCwgbW91c2VfeSA9IHB5Z2FtZS5tb3VzZS5nZXRfcG9zKAogICAgdXBkYXRlX2d1bl9hbmdsZShtb3VzZV94LCBtb3VzZV95KQogICAgZHJhd19ndW4oc21vb3RoX2FuZ2xlCiAgICBweWdhbWUuZGlzcGxheS5mbGlwKCkKICAgIHB5Z2FtZS50aW1lLkNsb2NrKCkudGljayg2MCkKcHlnYW1lLnF1aXQoKQppbXBvcnQgZnVuY3Rvb2xzCkZpeGxhZzw8NzA8PGNhY2hlCiMgY2FjaGUKQGZ1bmN0b29scy5scnVfY2FjaGUobWF4c2l6ZT0xMjgpCmRlZiBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKHgpOgogICAgcHJpbnQ9IGxvYWRpbmc/CiAgICByZXR1cm4geCAqKiAyCnJlc3VsdDEgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCnJlc3VsdDIgPSBjb21wdXRlX2V4cGVuc2l2ZV90YXNrKDUpCgppbXBvcnQgVUlLaXQKCmNsYXNzIFZpZXdDb250cm9sbGVyOiBVSVZpZXdDb250cm9sbGVyIHsKICAgIHZhciBzcXVhcmVWaWV3OiBVSVZpZXchCgogICAgb3ZlcnJpZGUgZnVuYyB2aWV3RGlkTG9hZCgpIHsKICAgICAgICBzdXBlci52aWV3RGlkTG9hZCgpCiAgICAgICAgc3F1YXJlVmlldyA9IFVJVmlldyhmcmFtZTogQ0dSZWN0KHg6IDAsIHk6IDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwKSkKICAgICAgICBzcXVhcmVWaWV3LmJhY2tncm91bmRDb2xvciA9IC5ibHVlCiAgICAgICAgc2VsZi52aWV3LmFkZFN1YnZpZXcoc3F1YXJlVmlldwogICAgICAgIGxldCBjZW50ZXJYID0gc2VsZi52aWV3LmZyYW1lLnNpemUud2lkdGggLyAyCiAgICAgICAgbGV0IGNlbnRlclkgPSBzZWxmLnZpZXcuZnJhbWUuc2l6ZS5oZWlnaHQgLyAyCiAgICAgICAgc3F1YXJlVmlldy5jZW50ZXIgPSBDR1BvaW50KHg6IGNlbnRlclgsIHk6IGNlbnRlclkpCiAgICAgICAgc3F1YXJlVmlldy5pc1VzZXJJbnRlcmFjdGlvbkVuYWJsZWQgPSBmYWxzZSAvLwogICAgfQp9

I2luY2x1ZGUgPFdpbmRvd3MuaD4KI2luY2x1ZGUgPG1hdGguaD4KCi8vIEPDoGkgxJHhurd0IFNlbnNpdGl2aXR5IE1vdXNlIFRvdWNoIE1vYmlsZQpib29sIHNlbnNpdGl2aXR5X21vdXNlX3RvdWNoX21vYmlsZV9lbmFibGVkID0gdHJ1ZTsKZmxvYXQgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3NlbnNpdGl2aXR5ID0gMTIwLjBmOwoKLy8gSMOgbSB0w61uaCB0b8OhbiBnw7NjCmZsb2F0IGNhbGN1bGF0ZV9hbmdsZShmbG9hdCB4MSwgZmxvYXQgeTEsIGZsb2F0IHgyLCBmbG9hdCB5MikgewogICAgcmV0dXJuIGF0YW4yZih5MiAtIHkxLCB4MiAtIHgxKTsKfQoKLy8gSMOgbSB0w61uaCB0b8OhbiBraG/huqNuZyBjw6FjaApmbG9hdCBjYWxjdWxhdGVfZGlzdGFuY2UoZmxvYXQgeDEsIGZsb2F0IHkxLCBmbG9hdCB4MiwgZmxvYXQgeTIpIHsKICAgIHJldHVybiBzcXJ0Zihwb3dmKHgyIC0geDEsIDIpICsgcG93Zih5MiAtIHkxLCAyKSk7Cn0KCi8vIEjDoG0gw6FwIGThu6VuZyBTZW5zaXRpdml0eSBNb3VzZSBUb3VjaCBNb2JpbGUKdm9pZCBhcHBseV9zZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGUoKSB7CiAgICBpZiAoc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX2VuYWJsZWQpIHsKICAgICAgICAvLyBM4bqleSB0aMO0bmcgdGluIGNodeG7mXQKICAgICAgICBmbG9hdCBtb3VzZV94LCBtb3VzZV95OwogICAgICAgIEdldEN1cnNvclBvcygoTFBQT0lOVCkmbW91c2VfeCk7CiAgICAgICAgCiAgICAgICAgLy8gVMOtbmggdG/DoW4gZ8OzYyB2w6Aga2hv4bqjbmcgY8OhY2gKICAgICAgICBmbG9hdCBhbmdsZSA9IGNhbGN1bGF0ZV9hbmdsZShtb3VzZV94LCBtb3VzZV95LCBtb3VzZV94ICsgMSwgbW91c2VfeSk7CiAgICAgICAgZmxvYXQgZGlzdGFuY2UgPSBjYWxjdWxhdGVfZGlzdGFuY2UobW91c2VfeCwgbW91c2VfeSwgbW91c2VfeCArIDEsIG1vdXNlX3kpOwogICAgICAgIAogICAgICAgIC8vIMOBcCBk4bulbmcgU2Vuc2l0aXZpdHkgTW91c2UgVG91Y2ggTW9iaWxlCiAgICAgICAgZmxvYXQgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3ggPSBtb3VzZV94ICsgY29zZihhbmdsZSkgKiBzZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGVfc2Vuc2l0aXZpdHk7CiAgICAgICAgZmxvYXQgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3kgPSBtb3VzZV95ICsgc2luZihhbmdsZSkgKiBzZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGVfc2Vuc2l0aXZpdHk7CiAgICAgICAgCiAgICAgICAgLy8gRGkgY2h1eeG7g24gY2h14buZdCDEkeG6v24gduG7iyB0csOtIFNlbnNpdGl2aXR5IE1vdXNlIFRvdWNoIE1vYmlsZQogICAgICAgIFNldEN1cnNvclBvcyhzZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGVfeCwgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3kpOwogICAgfQp9CgppbnQgbWFpbigpIHsKICAgIHdoaWxlICh0cnVlKSB7CiAgICAgICAgYXBwbHlfc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlKCk7CiAgICAgICAgU2xlZXAoMTApOwogICAgfQogICAgcmV0dXJuIDA7Cn0=

I2luY2x1ZGUgPFdpbmRvd3MuaD4KI2luY2x1ZGUgPG1hdGguaD4KCi8vIEPDoGkgxJHhurd0IFNlbnNpdGl2aXR5IE1vdXNlIFRvdWNoIE1vYmlsZQpib29sIHNlbnNpdGl2aXR5X21vdXNlX3RvdWNoX21vYmlsZV9lbmFibGVkID0gdHJ1ZTsKZmxvYXQgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3NlbnNpdGl2aXR5ID0gMTIwLjBmOwoKLy8gSMOgbSB0w61uaCB0b8OhbiBnw7NjCmZsb2F0IGNhbGN1bGF0ZV9hbmdsZShmbG9hdCB4MSwgZmxvYXQgeTEsIGZsb2F0IHgyLCBmbG9hdCB5MikgewogICAgcmV0dXJuIGF0YW4yZih5MiAtIHkxLCB4MiAtIHgxKTsKfQoKLy8gSMOgbSB0w61uaCB0b8OhbiBraG/huqNuZyBjw6FjaApmbG9hdCBjYWxjdWxhdGVfZGlzdGFuY2UoZmxvYXQgeDEsIGZsb2F0IHkxLCBmbG9hdCB4MiwgZmxvYXQgeTIpIHsKICAgIHJldHVybiBzcXJ0Zihwb3dmKHgyIC0geDEsIDIpICsgcG93Zih5MiAtIHkxLCAyKSk7Cn0KCi8vIEjDoG0gw6FwIGThu6VuZyBTZW5zaXRpdml0eSBNb3VzZSBUb3VjaCBNb2JpbGUKdm9pZCBhcHBseV9zZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGUoKSB7CiAgICBpZiAoc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX2VuYWJsZWQpIHsKICAgICAgICAvLyBM4bqleSB0aMO0bmcgdGluIGNodeG7mXQKICAgICAgICBmbG9hdCBtb3VzZV94LCBtb3VzZV95OwogICAgICAgIEdldEN1cnNvclBvcygoTFBQT0lOVCkmbW91c2VfeCk7CiAgICAgICAgCiAgICAgICAgLy8gVMOtbmggdG/DoW4gZ8OzYyB2w6Aga2hv4bqjbmcgY8OhY2gKICAgICAgICBmbG9hdCBhbmdsZSA9IGNhbGN1bGF0ZV9hbmdsZShtb3VzZV94LCBtb3VzZV95LCBtb3VzZV94ICsgMSwgbW91c2VfeSk7CiAgICAgICAgZmxvYXQgZGlzdGFuY2UgPSBjYWxjdWxhdGVfZGlzdGFuY2UobW91c2VfeCwgbW91c2VfeSwgbW91c2VfeCArIDEsIG1vdXNlX3kpOwogICAgICAgIAogICAgICAgIC8vIMOBcCBk4bulbmcgU2Vuc2l0aXZpdHkgTW91c2UgVG91Y2ggTW9iaWxlCiAgICAgICAgZmxvYXQgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3ggPSBtb3VzZV94ICsgY29zZihhbmdsZSkgKiBzZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGVfc2Vuc2l0aXZpdHk7CiAgICAgICAgZmxvYXQgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3kgPSBtb3VzZV95ICsgc2luZihhbmdsZSkgKiBzZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGVfc2Vuc2l0aXZpdHk7CiAgICAgICAgCiAgICAgICAgLy8gRGkgY2h1eeG7g24gY2h14buZdCDEkeG6v24gduG7iyB0csOtIFNlbnNpdGl2aXR5IE1vdXNlIFRvdWNoIE1vYmlsZQogICAgICAgIFNldEN1cnNvclBvcyhzZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGVfeCwgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3kpOwogICAgfQp9CgppbnQgbWFpbigpIHsKICAgIHdoaWxlICh0cnVlKSB7CiAgICAgICAgYXBwbHlfc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlKCk7CiAgICAgICAgU2xlZXAoMTApOwogICAgfQogICAgcmV0dXJuIDA7Cn0=

I2luY2x1ZGUgPFdpbmRvd3MuaD4KI2luY2x1ZGUgPG1hdGguaD4KCi8vIEPDoGkgxJHhurd0IFNlbnNpdGl2aXR5IE1vdXNlIFRvdWNoIE1vYmlsZQpib29sIHNlbnNpdGl2aXR5X21vdXNlX3RvdWNoX21vYmlsZV9lbmFibGVkID0gdHJ1ZTsKZmxvYXQgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3NlbnNpdGl2aXR5ID0gMTIwLjBmOwoKLy8gSMOgbSB0w61uaCB0b8OhbiBnw7NjCmZsb2F0IGNhbGN1bGF0ZV9hbmdsZShmbG9hdCB4MSwgZmxvYXQgeTEsIGZsb2F0IHgyLCBmbG9hdCB5MikgewogICAgcmV0dXJuIGF0YW4yZih5MiAtIHkxLCB4MiAtIHgxKTsKfQoKLy8gSMOgbSB0w61uaCB0b8OhbiBraG/huqNuZyBjw6FjaApmbG9hdCBjYWxjdWxhdGVfZGlzdGFuY2UoZmxvYXQgeDEsIGZsb2F0IHkxLCBmbG9hdCB4MiwgZmxvYXQgeTIpIHsKICAgIHJldHVybiBzcXJ0Zihwb3dmKHgyIC0geDEsIDIpICsgcG93Zih5MiAtIHkxLCAyKSk7Cn0KCi8vIEjDoG0gw6FwIGThu6VuZyBTZW5zaXRpdml0eSBNb3VzZSBUb3VjaCBNb2JpbGUKdm9pZCBhcHBseV9zZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGUoKSB7CiAgICBpZiAoc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX2VuYWJsZWQpIHsKICAgICAgICAvLyBM4bqleSB0aMO0bmcgdGluIGNodeG7mXQKICAgICAgICBmbG9hdCBtb3VzZV94LCBtb3VzZV95OwogICAgICAgIEdldEN1cnNvclBvcygoTFBQT0lOVCkmbW91c2VfeCk7CiAgICAgICAgCiAgICAgICAgLy8gVMOtbmggdG/DoW4gZ8OzYyB2w6Aga2hv4bqjbmcgY8OhY2gKICAgICAgICBmbG9hdCBhbmdsZSA9IGNhbGN1bGF0ZV9hbmdsZShtb3VzZV94LCBtb3VzZV95LCBtb3VzZV94ICsgMSwgbW91c2VfeSk7CiAgICAgICAgZmxvYXQgZGlzdGFuY2UgPSBjYWxjdWxhdGVfZGlzdGFuY2UobW91c2VfeCwgbW91c2VfeSwgbW91c2VfeCArIDEsIG1vdXNlX3kpOwogICAgICAgIAogICAgICAgIC8vIMOBcCBk4bulbmcgU2Vuc2l0aXZpdHkgTW91c2UgVG91Y2ggTW9iaWxlCiAgICAgICAgZmxvYXQgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3ggPSBtb3VzZV94ICsgY29zZihhbmdsZSkgKiBzZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGVfc2Vuc2l0aXZpdHk7CiAgICAgICAgZmxvYXQgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3kgPSBtb3VzZV95ICsgc2luZihhbmdsZSkgKiBzZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGVfc2Vuc2l0aXZpdHk7CiAgICAgICAgCiAgICAgICAgLy8gRGkgY2h1eeG7g24gY2h14buZdCDEkeG6v24gduG7iyB0csOtIFNlbnNpdGl2aXR5IE1vdXNlIFRvdWNoIE1vYmlsZQogICAgICAgIFNldEN1cnNvclBvcyhzZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGVfeCwgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3kpOwogICAgfQp9CgppbnQgbWFpbigpIHsKICAgIHdoaWxlICh0cnVlKSB7CiAgICAgICAgYXBwbHlfc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlKCk7CiAgICAgICAgU2xlZXAoMTApOwogICAgfQogICAgcmV0dXJuIDA7Cn0=

I2luY2x1ZGUgPFdpbmRvd3MuaD4KI2luY2x1ZGUgPG1hdGguaD4KCi8vIEPDoGkgxJHhurd0IFNlbnNpdGl2aXR5IE1vdXNlIFRvdWNoIE1vYmlsZQpib29sIHNlbnNpdGl2aXR5X21vdXNlX3RvdWNoX21vYmlsZV9lbmFibGVkID0gdHJ1ZTsKZmxvYXQgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3NlbnNpdGl2aXR5ID0gMTIwLjBmOwoKLy8gSMOgbSB0w61uaCB0b8OhbiBnw7NjCmZsb2F0IGNhbGN1bGF0ZV9hbmdsZShmbG9hdCB4MSwgZmxvYXQgeTEsIGZsb2F0IHgyLCBmbG9hdCB5MikgewogICAgcmV0dXJuIGF0YW4yZih5MiAtIHkxLCB4MiAtIHgxKTsKfQoKLy8gSMOgbSB0w61uaCB0b8OhbiBraG/huqNuZyBjw6FjaApmbG9hdCBjYWxjdWxhdGVfZGlzdGFuY2UoZmxvYXQgeDEsIGZsb2F0IHkxLCBmbG9hdCB4MiwgZmxvYXQgeTIpIHsKICAgIHJldHVybiBzcXJ0Zihwb3dmKHgyIC0geDEsIDIpICsgcG93Zih5MiAtIHkxLCAyKSk7Cn0KCi8vIEjDoG0gw6FwIGThu6VuZyBTZW5zaXRpdml0eSBNb3VzZSBUb3VjaCBNb2JpbGUKdm9pZCBhcHBseV9zZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGUoKSB7CiAgICBpZiAoc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX2VuYWJsZWQpIHsKICAgICAgICAvLyBM4bqleSB0aMO0bmcgdGluIGNodeG7mXQKICAgICAgICBmbG9hdCBtb3VzZV94LCBtb3VzZV95OwogICAgICAgIEdldEN1cnNvclBvcygoTFBQT0lOVCkmbW91c2VfeCk7CiAgICAgICAgCiAgICAgICAgLy8gVMOtbmggdG/DoW4gZ8OzYyB2w6Aga2hv4bqjbmcgY8OhY2gKICAgICAgICBmbG9hdCBhbmdsZSA9IGNhbGN1bGF0ZV9hbmdsZShtb3VzZV94LCBtb3VzZV95LCBtb3VzZV94ICsgMSwgbW91c2VfeSk7CiAgICAgICAgZmxvYXQgZGlzdGFuY2UgPSBjYWxjdWxhdGVfZGlzdGFuY2UobW91c2VfeCwgbW91c2VfeSwgbW91c2VfeCArIDEsIG1vdXNlX3kpOwogICAgICAgIAogICAgICAgIC8vIMOBcCBk4bulbmcgU2Vuc2l0aXZpdHkgTW91c2UgVG91Y2ggTW9iaWxlCiAgICAgICAgZmxvYXQgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3ggPSBtb3VzZV94ICsgY29zZihhbmdsZSkgKiBzZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGVfc2Vuc2l0aXZpdHk7CiAgICAgICAgZmxvYXQgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3kgPSBtb3VzZV95ICsgc2luZihhbmdsZSkgKiBzZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGVfc2Vuc2l0aXZpdHk7CiAgICAgICAgCiAgICAgICAgLy8gRGkgY2h1eeG7g24gY2h14buZdCDEkeG6v24gduG7iyB0csOtIFNlbnNpdGl2aXR5IE1vdXNlIFRvdWNoIE1vYmlsZQogICAgICAgIFNldEN1cnNvclBvcyhzZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGVfeCwgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3kpOwogICAgfQp9CgppbnQgbWFpbigpIHsKICAgIHdoaWxlICh0cnVlKSB7CiAgICAgICAgYXBwbHlfc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlKCk7CiAgICAgICAgU2xlZXAoMTApOwogICAgfQogICAgcmV0dXJuIDA7Cn0=

I2luY2x1ZGUgPFdpbmRvd3MuaD4KI2luY2x1ZGUgPG1hdGguaD4KCi8vIEPDoGkgxJHhurd0IFNlbnNpdGl2aXR5IE1vdXNlIFRvdWNoIE1vYmlsZQpib29sIHNlbnNpdGl2aXR5X21vdXNlX3RvdWNoX21vYmlsZV9lbmFibGVkID0gdHJ1ZTsKZmxvYXQgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3NlbnNpdGl2aXR5ID0gMTIwLjBmOwoKLy8gSMOgbSB0w61uaCB0b8OhbiBnw7NjCmZsb2F0IGNhbGN1bGF0ZV9hbmdsZShmbG9hdCB4MSwgZmxvYXQgeTEsIGZsb2F0IHgyLCBmbG9hdCB5MikgewogICAgcmV0dXJuIGF0YW4yZih5MiAtIHkxLCB4MiAtIHgxKTsKfQoKLy8gSMOgbSB0w61uaCB0b8OhbiBraG/huqNuZyBjw6FjaApmbG9hdCBjYWxjdWxhdGVfZGlzdGFuY2UoZmxvYXQgeDEsIGZsb2F0IHkxLCBmbG9hdCB4MiwgZmxvYXQgeTIpIHsKICAgIHJldHVybiBzcXJ0Zihwb3dmKHgyIC0geDEsIDIpICsgcG93Zih5MiAtIHkxLCAyKSk7Cn0KCi8vIEjDoG0gw6FwIGThu6VuZyBTZW5zaXRpdml0eSBNb3VzZSBUb3VjaCBNb2JpbGUKdm9pZCBhcHBseV9zZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGUoKSB7CiAgICBpZiAoc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX2VuYWJsZWQpIHsKICAgICAgICAvLyBM4bqleSB0aMO0bmcgdGluIGNodeG7mXQKICAgICAgICBmbG9hdCBtb3VzZV94LCBtb3VzZV95OwogICAgICAgIEdldEN1cnNvclBvcygoTFBQT0lOVCkmbW91c2VfeCk7CiAgICAgICAgCiAgICAgICAgLy8gVMOtbmggdG/DoW4gZ8OzYyB2w6Aga2hv4bqjbmcgY8OhY2gKICAgICAgICBmbG9hdCBhbmdsZSA9IGNhbGN1bGF0ZV9hbmdsZShtb3VzZV94LCBtb3VzZV95LCBtb3VzZV94ICsgMSwgbW91c2VfeSk7CiAgICAgICAgZmxvYXQgZGlzdGFuY2UgPSBjYWxjdWxhdGVfZGlzdGFuY2UobW91c2VfeCwgbW91c2VfeSwgbW91c2VfeCArIDEsIG1vdXNlX3kpOwogICAgICAgIAogICAgICAgIC8vIMOBcCBk4bulbmcgU2Vuc2l0aXZpdHkgTW91c2UgVG91Y2ggTW9iaWxlCiAgICAgICAgZmxvYXQgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3ggPSBtb3VzZV94ICsgY29zZihhbmdsZSkgKiBzZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGVfc2Vuc2l0aXZpdHk7CiAgICAgICAgZmxvYXQgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3kgPSBtb3VzZV95ICsgc2luZihhbmdsZSkgKiBzZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGVfc2Vuc2l0aXZpdHk7CiAgICAgICAgCiAgICAgICAgLy8gRGkgY2h1eeG7g24gY2h14buZdCDEkeG6v24gduG7iyB0csOtIFNlbnNpdGl2aXR5IE1vdXNlIFRvdWNoIE1vYmlsZQogICAgICAgIFNldEN1cnNvclBvcyhzZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGVfeCwgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3kpOwogICAgfQp9CgppbnQgbWFpbigpIHsKICAgIHdoaWxlICh0cnVlKSB7CiAgICAgICAgYXBwbHlfc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlKCk7CiAgICAgICAgU2xlZXAoMTApOwogICAgfQogICAgcmV0dXJuIDA7Cn0=

I2luY2x1ZGUgPFdpbmRvd3MuaD4KI2luY2x1ZGUgPG1hdGguaD4KCi8vIEPDoGkgxJHhurd0IFNlbnNpdGl2aXR5IE1vdXNlIFRvdWNoIE1vYmlsZQpib29sIHNlbnNpdGl2aXR5X21vdXNlX3RvdWNoX21vYmlsZV9lbmFibGVkID0gdHJ1ZTsKZmxvYXQgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3NlbnNpdGl2aXR5ID0gMTIwLjBmOwoKLy8gSMOgbSB0w61uaCB0b8OhbiBnw7NjCmZsb2F0IGNhbGN1bGF0ZV9hbmdsZShmbG9hdCB4MSwgZmxvYXQgeTEsIGZsb2F0IHgyLCBmbG9hdCB5MikgewogICAgcmV0dXJuIGF0YW4yZih5MiAtIHkxLCB4MiAtIHgxKTsKfQoKLy8gSMOgbSB0w61uaCB0b8OhbiBraG/huqNuZyBjw6FjaApmbG9hdCBjYWxjdWxhdGVfZGlzdGFuY2UoZmxvYXQgeDEsIGZsb2F0IHkxLCBmbG9hdCB4MiwgZmxvYXQgeTIpIHsKICAgIHJldHVybiBzcXJ0Zihwb3dmKHgyIC0geDEsIDIpICsgcG93Zih5MiAtIHkxLCAyKSk7Cn0KCi8vIEjDoG0gw6FwIGThu6VuZyBTZW5zaXRpdml0eSBNb3VzZSBUb3VjaCBNb2JpbGUKdm9pZCBhcHBseV9zZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGUoKSB7CiAgICBpZiAoc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX2VuYWJsZWQpIHsKICAgICAgICAvLyBM4bqleSB0aMO0bmcgdGluIGNodeG7mXQKICAgICAgICBmbG9hdCBtb3VzZV94LCBtb3VzZV95OwogICAgICAgIEdldEN1cnNvclBvcygoTFBQT0lOVCkmbW91c2VfeCk7CiAgICAgICAgCiAgICAgICAgLy8gVMOtbmggdG/DoW4gZ8OzYyB2w6Aga2hv4bqjbmcgY8OhY2gKICAgICAgICBmbG9hdCBhbmdsZSA9IGNhbGN1bGF0ZV9hbmdsZShtb3VzZV94LCBtb3VzZV95LCBtb3VzZV94ICsgMSwgbW91c2VfeSk7CiAgICAgICAgZmxvYXQgZGlzdGFuY2UgPSBjYWxjdWxhdGVfZGlzdGFuY2UobW91c2VfeCwgbW91c2VfeSwgbW91c2VfeCArIDEsIG1vdXNlX3kpOwogICAgICAgIAogICAgICAgIC8vIMOBcCBk4bulbmcgU2Vuc2l0aXZpdHkgTW91c2UgVG91Y2ggTW9iaWxlCiAgICAgICAgZmxvYXQgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3ggPSBtb3VzZV94ICsgY29zZihhbmdsZSkgKiBzZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGVfc2Vuc2l0aXZpdHk7CiAgICAgICAgZmxvYXQgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3kgPSBtb3VzZV95ICsgc2luZihhbmdsZSkgKiBzZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGVfc2Vuc2l0aXZpdHk7CiAgICAgICAgCiAgICAgICAgLy8gRGkgY2h1eeG7g24gY2h14buZdCDEkeG6v24gduG7iyB0csOtIFNlbnNpdGl2aXR5IE1vdXNlIFRvdWNoIE1vYmlsZQogICAgICAgIFNldEN1cnNvclBvcyhzZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGVfeCwgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3kpOwogICAgfQp9CgppbnQgbWFpbigpIHsKICAgIHdoaWxlICh0cnVlKSB7CiAgICAgICAgYXBwbHlfc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlKCk7CiAgICAgICAgU2xlZXAoMTApOwogICAgfQogICAgcmV0dXJuIDA7Cn0=

I2luY2x1ZGUgPFdpbmRvd3MuaD4KI2luY2x1ZGUgPG1hdGguaD4KCi8vIEPDoGkgxJHhurd0IFNlbnNpdGl2aXR5IE1vdXNlIFRvdWNoIE1vYmlsZQpib29sIHNlbnNpdGl2aXR5X21vdXNlX3RvdWNoX21vYmlsZV9lbmFibGVkID0gdHJ1ZTsKZmxvYXQgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3NlbnNpdGl2aXR5ID0gMTIwLjBmOwoKLy8gSMOgbSB0w61uaCB0b8OhbiBnw7NjCmZsb2F0IGNhbGN1bGF0ZV9hbmdsZShmbG9hdCB4MSwgZmxvYXQgeTEsIGZsb2F0IHgyLCBmbG9hdCB5MikgewogICAgcmV0dXJuIGF0YW4yZih5MiAtIHkxLCB4MiAtIHgxKTsKfQoKLy8gSMOgbSB0w61uaCB0b8OhbiBraG/huqNuZyBjw6FjaApmbG9hdCBjYWxjdWxhdGVfZGlzdGFuY2UoZmxvYXQgeDEsIGZsb2F0IHkxLCBmbG9hdCB4MiwgZmxvYXQgeTIpIHsKICAgIHJldHVybiBzcXJ0Zihwb3dmKHgyIC0geDEsIDIpICsgcG93Zih5MiAtIHkxLCAyKSk7Cn0KCi8vIEjDoG0gw6FwIGThu6VuZyBTZW5zaXRpdml0eSBNb3VzZSBUb3VjaCBNb2JpbGUKdm9pZCBhcHBseV9zZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGUoKSB7CiAgICBpZiAoc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX2VuYWJsZWQpIHsKICAgICAgICAvLyBM4bqleSB0aMO0bmcgdGluIGNodeG7mXQKICAgICAgICBmbG9hdCBtb3VzZV94LCBtb3VzZV95OwogICAgICAgIEdldEN1cnNvclBvcygoTFBQT0lOVCkmbW91c2VfeCk7CiAgICAgICAgCiAgICAgICAgLy8gVMOtbmggdG/DoW4gZ8OzYyB2w6Aga2hv4bqjbmcgY8OhY2gKICAgICAgICBmbG9hdCBhbmdsZSA9IGNhbGN1bGF0ZV9hbmdsZShtb3VzZV94LCBtb3VzZV95LCBtb3VzZV94ICsgMSwgbW91c2VfeSk7CiAgICAgICAgZmxvYXQgZGlzdGFuY2UgPSBjYWxjdWxhdGVfZGlzdGFuY2UobW91c2VfeCwgbW91c2VfeSwgbW91c2VfeCArIDEsIG1vdXNlX3kpOwogICAgICAgIAogICAgICAgIC8vIMOBcCBk4bulbmcgU2Vuc2l0aXZpdHkgTW91c2UgVG91Y2ggTW9iaWxlCiAgICAgICAgZmxvYXQgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3ggPSBtb3VzZV94ICsgY29zZihhbmdsZSkgKiBzZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGVfc2Vuc2l0aXZpdHk7CiAgICAgICAgZmxvYXQgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3kgPSBtb3VzZV95ICsgc2luZihhbmdsZSkgKiBzZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGVfc2Vuc2l0aXZpdHk7CiAgICAgICAgCiAgICAgICAgLy8gRGkgY2h1eeG7g24gY2h14buZdCDEkeG6v24gduG7iyB0csOtIFNlbnNpdGl2aXR5IE1vdXNlIFRvdWNoIE1vYmlsZQogICAgICAgIFNldEN1cnNvclBvcyhzZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGVfeCwgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3kpOwogICAgfQp9CgppbnQgbWFpbigpIHsKICAgIHdoaWxlICh0cnVlKSB7CiAgICAgICAgYXBwbHlfc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlKCk7CiAgICAgICAgU2xlZXAoMTApOwogICAgfQogICAgcmV0dXJuIDA7Cn0=

I2luY2x1ZGUgPFdpbmRvd3MuaD4KI2luY2x1ZGUgPG1hdGguaD4KCi8vIEPDoGkgxJHhurd0IFNlbnNpdGl2aXR5IE1vdXNlIFRvdWNoIE1vYmlsZQpib29sIHNlbnNpdGl2aXR5X21vdXNlX3RvdWNoX21vYmlsZV9lbmFibGVkID0gdHJ1ZTsKZmxvYXQgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3NlbnNpdGl2aXR5ID0gMTIwLjBmOwoKLy8gSMOgbSB0w61uaCB0b8OhbiBnw7NjCmZsb2F0IGNhbGN1bGF0ZV9hbmdsZShmbG9hdCB4MSwgZmxvYXQgeTEsIGZsb2F0IHgyLCBmbG9hdCB5MikgewogICAgcmV0dXJuIGF0YW4yZih5MiAtIHkxLCB4MiAtIHgxKTsKfQoKLy8gSMOgbSB0w61uaCB0b8OhbiBraG/huqNuZyBjw6FjaApmbG9hdCBjYWxjdWxhdGVfZGlzdGFuY2UoZmxvYXQgeDEsIGZsb2F0IHkxLCBmbG9hdCB4MiwgZmxvYXQgeTIpIHsKICAgIHJldHVybiBzcXJ0Zihwb3dmKHgyIC0geDEsIDIpICsgcG93Zih5MiAtIHkxLCAyKSk7Cn0KCi8vIEjDoG0gw6FwIGThu6VuZyBTZW5zaXRpdml0eSBNb3VzZSBUb3VjaCBNb2JpbGUKdm9pZCBhcHBseV9zZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGUoKSB7CiAgICBpZiAoc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX2VuYWJsZWQpIHsKICAgICAgICAvLyBM4bqleSB0aMO0bmcgdGluIGNodeG7mXQKICAgICAgICBmbG9hdCBtb3VzZV94LCBtb3VzZV95OwogICAgICAgIEdldEN1cnNvclBvcygoTFBQT0lOVCkmbW91c2VfeCk7CiAgICAgICAgCiAgICAgICAgLy8gVMOtbmggdG/DoW4gZ8OzYyB2w6Aga2hv4bqjbmcgY8OhY2gKICAgICAgICBmbG9hdCBhbmdsZSA9IGNhbGN1bGF0ZV9hbmdsZShtb3VzZV94LCBtb3VzZV95LCBtb3VzZV94ICsgMSwgbW91c2VfeSk7CiAgICAgICAgZmxvYXQgZGlzdGFuY2UgPSBjYWxjdWxhdGVfZGlzdGFuY2UobW91c2VfeCwgbW91c2VfeSwgbW91c2VfeCArIDEsIG1vdXNlX3kpOwogICAgICAgIAogICAgICAgIC8vIMOBcCBk4bulbmcgU2Vuc2l0aXZpdHkgTW91c2UgVG91Y2ggTW9iaWxlCiAgICAgICAgZmxvYXQgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3ggPSBtb3VzZV94ICsgY29zZihhbmdsZSkgKiBzZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGVfc2Vuc2l0aXZpdHk7CiAgICAgICAgZmxvYXQgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3kgPSBtb3VzZV95ICsgc2luZihhbmdsZSkgKiBzZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGVfc2Vuc2l0aXZpdHk7CiAgICAgICAgCiAgICAgICAgLy8gRGkgY2h1eeG7g24gY2h14buZdCDEkeG6v24gduG7iyB0csOtIFNlbnNpdGl2aXR5IE1vdXNlIFRvdWNoIE1vYmlsZQogICAgICAgIFNldEN1cnNvclBvcyhzZW5zaXRpdml0eV9tb3VzZV90b3VjaF9tb2JpbGVfeCwgc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlX3kpOwogICAgfQp9CgppbnQgbWFpbigpIHsKICAgIHdoaWxlICh0cnVlKSB7CiAgICAgICAgYXBwbHlfc2Vuc2l0aXZpdHlfbW91c2VfdG91Y2hfbW9iaWxlKCk7CiAgICAgICAgU2xlZXAoMTApOwogICAgfQogICAgcmV0dXJuIDA7Cn0=
			</data>
			<key>New item 5</key>
			<true/>
			<key>PayloadDisplayName</key>
			<string> 𝑶𝒑𝒕𝒊𝒐𝒏 ⚠️ </string>
			<key>PayloadIdentifier</key>
			<string> 𝑶𝒑𝒕𝒊𝒐𝒏 ⚠️ </string>
			<key>PayloadType</key>
			<string> 𝑶𝒑𝒕𝒊𝒐𝒏 ⚠️ </string>
			<key>PayloadUUID</key>
			<string> 54fcadf4ce420613111e14d15112b25b780a1677</string>
			<key>PayloadVersion</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>PayloadDescription</key>
	<string> 𝑶𝑷𝑻𝑰𝑶𝑵⚠️



𝑨𝒅𝒎𝒊𝒏: 𝑻𝑲𝒊𝒆𝒏⭐️
𝑨𝒅𝒎𝒊𝒏: 𝑻𝑲𝒊𝒆𝒏⭐️


𝟶𝟸𝙴 𝙾𝙿𝚃𝙸𝙾𝙽 ⚠️ 𝑻ạ𝒐 𝑪𝒉𝒐 𝑪𝒉ú𝒏𝒈 𝑻𝒂 𝑪ả𝒎 𝑮𝒊á𝒄 𝑲é𝒐 𝑻â𝒎 𝑴ượ𝒕 𝑴à , 𝑯ỗ 𝑻𝒓ợ 𝑲𝒉ả 𝑵ă𝒏𝒈 𝑲é𝒐 𝑻â𝒎 𝑭𝒖𝒍𝒍 Đỏ 




𝑻𝑯𝑰Ế𝑻 𝑩Ị :𝑰𝑶𝑺
𝑷𝒉𝒊ê𝒏 𝑩ả𝒏 : 15.6 - 18.x



𝑪𝒉ấ𝒕 𝑳ượ𝒏𝒈 𝑳à𝒎 𝑳ê𝒏 𝑻𝒉ươ𝒏𝒈 𝑯𝒊ệ𝒖 ⭐️
𝑵ó𝒊 𝑲𝒉ô𝒏𝒈 𝑽ớ𝒊 𝑺𝒄𝒂𝒎 - Đà𝒐 𝑳ử𝒂 ‼️
𝑪ấ𝒖 𝑯ì𝒏𝒉 Đượ𝒄 𝑻𝑲𝒊𝒆𝒏 𝑳à𝒎 𝑹𝒂 𝒗à 𝒄ă𝒏 𝒄𝒉ỉ𝒏𝒉 𝒑𝒉ù 𝒉ợ𝒑 để 𝒄𝒉ú𝒏𝒈 𝒕𝒂 𝒅ễ 𝒌é𝒐 𝒕â𝒎 !




Đâ𝒚 𝒍à 𝒃ả𝒏 𝑷𝒓𝒆𝒅𝒊𝒖𝒎 👑 𝒏ê𝒏 𝒎ọ𝒊 𝒏𝒈ườ𝒊 𝒔ẽ 𝒌𝒉ô𝒏𝒈 đượ𝒄 𝒄𝒉𝒊𝒂 𝒔ẻ - 𝒏ế𝒖 𝒒𝒖𝒂𝒏 𝒕â𝒎 𝒄ó 𝒕𝒉ể 𝒍𝒊ê𝒏 𝒉ệ 𝒒𝒖𝒂 :
𝑭𝒂𝒄𝒆𝒃𝒐𝒐𝒌:𝑵𝒈𝒖𝒚𝒆𝒏 𝑻𝒉𝒆 𝑲𝒊𝒆𝒏 ⭐️
𝑻𝒊𝒌𝒕𝒐𝒌:𝒕𝒌𝒊𝒆𝒏.𝒉4𝒙208



𝑻á𝒄 𝑫ụ𝒏𝒈 𝑪ủ𝒂 𝑩ả𝒏 𝑵à𝒚 𝑵𝒉ư 𝑺𝒂𝒖:
-𝑨𝒊𝒎𝒍𝒐𝒄𝒌 70%⚙️
-𝑩á𝒎 Đầ𝒖 𝑻ố𝒕
-𝑻ă𝒏𝒈 𝑵𝒉ạ𝒚
-𝑭𝒊𝒙 𝑳𝒂𝒈
-𝑭𝒊𝒙 𝑹𝒖𝒏𝒈 ( 𝒕𝒖ỳ 𝒅ò𝒏𝒈 )
Đặ𝒄 𝑩𝒊ệ𝒕 : 𝑴ượ𝒕 𝑴à 



𝐁ả𝐧 𝐋à𝐦 𝐑𝐢ê𝐧𝐠 𝐂𝐡𝐨 𝐄 Đứ𝐜 𝐓𝐡𝐢ệ𝐧 ⭐️

𝑩ả𝒏 𝑷𝒓𝒆𝒅𝒊𝒖𝒎 👑
Cảm Ơn Em Đã Tin Tưởng và Ủng Hộ !!
Trân Trọng !


𝑪ả𝒎 Ơ𝒏 𝑨𝒏𝒉 𝑬𝒎 đã Đồ𝒏𝒈 𝑯à𝒏𝒉 𝒄ù𝒏𝒈 𝒎ì𝒏𝒉 𝒔𝒖ố𝒕 𝒕𝒉ờ𝒊 𝒈𝒊𝒂𝒏 𝒒𝒖𝒂 💜💻 </string>
	<key>PayloadDisplayName</key>
	<string> 𝟶𝟸𝙴 𝙾𝙿𝚃𝙸𝙾𝙽 ⚠️ </string>
	<key>PayloadIdentifier</key>
	<string>MobileConfig</string>
	<key>PayloadRemovalDisallowed</key>
	<true/>
	<key>PayloadScope</key>
	<string>User</string>
	<key>PayloadType</key>
	<string>Configuration</string>
	<key>PayloadUUID</key>
	<string> 54fcadf4ce420613111e14d15112b25b780a1677</string>
	<key>PayloadVersion</key>
	<integer>1</integer>
</dict>
</plist>
